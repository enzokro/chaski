<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>chaski</title>
<link>https://enzokro.dev/</link>
<atom:link href="https://enzokro.dev/index.xml" rel="self" type="application/rss+xml"/>
<description>Enzo&#39;s site.</description>
<generator>quarto-1.4.550</generator>
<lastBuildDate>Sat, 21 Oct 2023 04:00:00 GMT</lastBuildDate>
<item>
  <title>Lesson 5: Processing text documents for LLMs</title>
  <dc:creator>Chris Kroenke</dc:creator>
  <link>https://enzokro.dev/blog/posts/fractal-llms/05-rag/</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>Preparing text data for LLM applications.</p>
</blockquote>
<section id="intro" class="level1">
<h1>Intro</h1>
<p>Welcome to the fifth lesson in the course. Let’s recap our progress so far:</p>
<ul>
<li>Lesson 1: We made a python environment for LLMs.<br>
</li>
<li>Lesson 2: Set up a personal blog to track our progress.</li>
<li>Lesson 3: Ran our first LLM with the HuggingFace API.<br>
</li>
<li>Lesson 4: Ran a quantized LLM with llama.cpp</li>
</ul>
<p>So far, we’ve used LLMs off the shelf as they are. Now we take our first steps towards augmenting our own LLM.</p>
<p>Specifically, we will augment an LLM with the <a href="https://diataxis.fr/">Diátaxis</a> website. Diátaxis is a framework and approach to write technical documents. Our goal is to give an LLM knowledge about Diátaxis and use it to help us write better notebooks.</p>
<p>Let’s start with our running notebook best practice:</p>
<div id="cell-4" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>load_ext autoreload</span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>autoreload <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
</div>
</section>
<section id="grabbing-the-diátaxis-data" class="level1">
<h1>Grabbing the Diátaxis data</h1>
<p>The <a href="https://diataxis.fr/">Diátaxis docs</a> will be the source of knowledge for our LLM. The pages are available in a repo as reStructuredText files with the extension <code>.rst</code>.</p>
<blockquote class="blockquote">
<p>Link to <a href="https://github.com/evildmp/diataxis-documentation-framework">Diátaxis code repo</a></p>
</blockquote>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clone the Diátaxis repo</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> clone https://github.com/evildmp/diataxis-documentation-framework</span></code></pre></div>
<section id="converting-.rst-to-.txt-files" class="level2">
<h2 class="anchored" data-anchor-id="converting-.rst-to-.txt-files">Converting .rst to .txt files</h2>
<p>It is rare that files come in exactly the right format for our ML algorithms. Pre-processing the input is one of the most important steps in ML that often gets overlooked. However, it is a great place to follow one of the Golden Rules of ML: <code>*always* look at your data</code>.</p>
<p>All too often, folks jump right into the code and start training models. This a fun step, to be sure, but we can learn so much about both our problem and the domain itself by first looking at the data. Without carefully inspecting data, you are basically flying blind. It is only the sheer and overwhelming power of ML and LLMs that let us get away with it (sometimes), but that doesn’t mean we should.</p>
<p>With that said, here we only have to do a little bit of pre-processing. We need to convert the Diátaxis <code>.rst</code> files into <code>.txt</code> files, then clean up the text a bit.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Make sure you are inside of the <code>llm-env</code> virtual environment.</p>
</div>
</div>
<p>Run the cell below to install the rst processing libraries.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># installing the rst to txt converter and writer</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install rst2txt docutils</span></code></pre></div>
<p>Next we can modify the example in the <a href="https://github.com/stephenfin/rst2txt"><code>rst2txt</code> documentation</a> to write a function that turns an <code>.rst</code> file into a <code>.txt</code> file.</p>
<div id="cell-12" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> docutils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> publish_file</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rst2txt</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> convert_rst_to_txt(filename):</span>
<span id="cb4-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Turns an rst file to a txt file with the same name.</span></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb4-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(filename, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> source:</span>
<span id="cb4-9">        publish_file(</span>
<span id="cb4-10">            source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>source,</span>
<span id="cb4-11">            destination_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>filename.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".rst"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".txt"</span>),</span>
<span id="cb4-12">            writer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rst2txt.Writer()</span>
<span id="cb4-13">        )</span></code></pre></div>
</div>
<p>Next up, let’s grab all of the .rst files in the Diátaxis repository and convert them into .txt files.</p>
<div id="cell-14" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">NOTE</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: replace with your path to the Diátaxis repo</span></span>
<span id="cb5-4">path_to_diataxis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/cck/repos/diataxis-documentation-framework'</span></span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># find all rst files in the docs repo</span></span>
<span id="cb5-7">rst_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [o <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> os.listdir(path_to_diataxis) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> o.endswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.rst'</span>)]</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert all rst files to txt files</span></span>
<span id="cb5-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> rst <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> rst_files:</span>
<span id="cb5-11">    convert_rst_to_txt(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>path_to_diataxis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>rst<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</div>
<p>The following subset are the docs with relevant information an LLM would need to write notebooks in the Diaxtaxis style.</p>
<div id="cell-16" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># files with important content about writing docs</span></span>
<span id="cb6-2">valid_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb6-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'compass.txt'</span>,</span>
<span id="cb6-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'complex-hierarchies.txt'</span>,</span>
<span id="cb6-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'explanation.txt'</span>,</span>
<span id="cb6-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'how-to-guides.txt'</span>,</span>
<span id="cb6-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'how-to-use-diataxis.txt'</span>,</span>
<span id="cb6-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'needs.txt'</span>,</span>
<span id="cb6-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'quality.txt'</span>,</span>
<span id="cb6-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reference-explanation.txt'</span>,</span>
<span id="cb6-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reference.txt'</span>,</span>
<span id="cb6-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tutorials-how-to.txt'</span>,</span>
<span id="cb6-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tutorials.txt'</span>,</span>
<span id="cb6-14">]</span></code></pre></div>
</div>
<p>Let’s read in these text files and store them into a <code>data</code> dictionary.</p>
<div id="cell-18" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stores the text data</span></span>
<span id="cb7-2">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read in the relevant files</span></span>
<span id="cb7-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> valid_files:</span>
<span id="cb7-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>path_to_diataxis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>f<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb7-7">        data[f] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.read())</span></code></pre></div>
</div>
<p>In <code>data</code>, file name are the keys and the values are the text in the files. This is a pretty standard pattern when loading ML data: features are loaded into a map (dictionary), indexed by some unique identifier.</p>
</section>
</section>
<section id="cleaning-up-the-text" class="level1">
<h1>Cleaning up the text</h1>
<p>Take a moment to look through the <code>.txt</code> files we’ve loaded, for example <code>how-to-guides.txt</code>. One thing should immediately stand out: there are some errors from the conversion process.</p>
<p>Specifically, there are some sections it wasn’t able to parse. Here’s an example of a broken parsing output:</p>
<pre><code>&lt;SYSTEM MESSAGE: ... Unknown interpreted text role "ref".&gt;</code></pre>
<p>Thankfully this is isolated to a single line that failed, the rest of the document is ok.</p>
<p>This means we have two kinds of text cleanup to do:<br>
1. Standard text cleanup and formatting.<br>
2. Errors from the <code>.rst</code> conversion process.</p>
<section id="standard-text-cleanup" class="level3">
<h3 class="anchored" data-anchor-id="standard-text-cleanup">Standard text cleanup</h3>
<p>There are a few best-practices steps to cleaning up text data:<br>
- Remove extra and trailing whitespaces.<br>
- Remove special characters, like HTML tags.<br>
- Properly handle escaped characters (<code>\t</code>, <code>\n</code>, etc).</p>
<p>Other steps like lower-casing, removing numbers, or dropping typical <a href="https://gist.github.com/sebleier/554280">stop-words</a> are more task-specific.</p>
<p>Let’s define a <code>clean_text</code> function that cleans up a given string.</p>
<div id="cell-26" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> clean_text(text):</span>
<span id="cb9-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Cleans up the headers and footers of the text.</span></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb9-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace multiple spaces with a single space</span></span>
<span id="cb9-8">    text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.sub(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'\s+'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>, text)</span>
<span id="cb9-9"></span>
<span id="cb9-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the regex pattern for the headers and footers</span></span>
<span id="cb9-11">    pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'[\*\=\^]+'</span></span>
<span id="cb9-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Substitute the special sequences with an empty string</span></span>
<span id="cb9-13">    text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.sub(pattern, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>, text)</span>
<span id="cb9-14"></span>
<span id="cb9-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TODO</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: any other cleaning you can think of?</span></span>
<span id="cb9-16">    </span>
<span id="cb9-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> text</span></code></pre></div>
</div>
<p>Let’s call this cleanup function on the raw text file.</p>
<div id="cell-28" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cleaning up the text</span></span>
<span id="cb10-2">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k: clean_text(v) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> data.items()}</span></code></pre></div>
</div>
</section>
<section id="special-text-cleanup" class="level3">
<h3 class="anchored" data-anchor-id="special-text-cleanup">Special text cleanup</h3>
<p>Now we can handle the errors that popped up when converting <code>.rst</code> documents. Let’s split the documents into list of sentences, so we can find the incorrect “SYSTEM MESSAGE” lines.</p>
<div id="cell-31" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split the data into a list of sentences</span></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> split_sentences(text):</span>
<span id="cb11-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Turns documents into a list of sentences."</span></span>
<span id="cb11-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [o <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> text.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'. '</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> o]</span>
<span id="cb11-5"></span>
<span id="cb11-6">split_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k: split_sentences(v) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> data.items()}</span></code></pre></div>
</div>
<p>Let’s look at one of the sentences in the <code>how-to-guides.txt</code> file.</p>
<div id="cell-33" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Looking at an example sentence</span></span>
<span id="cb12-2">split_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'how-to-guides.txt'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>'How-to guides matter not just because users need to be able to accomplish things: the list of how-to guides in your documentation helps frame the picture of what your product can actually do'</code></pre>
</div>
</div>
<p>How many processing errors are in this documents?</p>
<div id="cell-35" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># counting the number of system messages in how-to-guides.txt</span></span>
<span id="cb14-2">doc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'how-to-guides.txt'</span></span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> count_errors(text):</span>
<span id="cb14-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Counts the number of system messages in the text."</span></span>
<span id="cb14-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> text <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;SYSTEM MESSAGE:'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> o)</span>
<span id="cb14-7"></span>
<span id="cb14-8">count_errors(split_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'how-to-guides.txt'</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>1</code></pre>
</div>
</div>
<p>Let’s count the errors in all of the documents.</p>
<div id="cell-37" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># checking the full count of system errors</span></span>
<span id="cb16-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> valid_files:</span>
<span id="cb16-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"NumErrors </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>f<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>count_errors(split_data[f])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>NumErrors compass.txt: 0
NumErrors complex-hierarchies.txt: 3
NumErrors explanation.txt: 0
NumErrors how-to-guides.txt: 1
NumErrors how-to-use-diataxis.txt: 0
NumErrors needs.txt: 1
NumErrors quality.txt: 1
NumErrors reference-explanation.txt: 1
NumErrors reference.txt: 0
NumErrors tutorials-how-to.txt: 3
NumErrors tutorials.txt: 0</code></pre>
</div>
</div>
<p>Not too bad, but still something we want to clean up.</p>
<div id="cell-39" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> clean_rst_errors(txt):</span>
<span id="cb18-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Only returns items without system messages."</span></span>
<span id="cb18-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [o <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> txt <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;SYSTEM MESSAGE:'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> o]  </span>
<span id="cb18-4"></span>
<span id="cb18-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># our cleaned up data split into sentences</span></span>
<span id="cb18-6">clean_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k: clean_rst_errors(v) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> split_data.items()}</span></code></pre></div>
</div>
<p>We can then check if the system messages are gone:</p>
<div id="cell-41" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># checking the full count of system errors</span></span>
<span id="cb19-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> valid_files:</span>
<span id="cb19-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Clean NumErrors </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>f<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>count_errors(clean_data[f])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Clean NumErrors compass.txt: 0
Clean NumErrors complex-hierarchies.txt: 0
Clean NumErrors explanation.txt: 0
Clean NumErrors how-to-guides.txt: 0
Clean NumErrors how-to-use-diataxis.txt: 0
Clean NumErrors needs.txt: 0
Clean NumErrors quality.txt: 0
Clean NumErrors reference-explanation.txt: 0
Clean NumErrors reference.txt: 0
Clean NumErrors tutorials-how-to.txt: 0
Clean NumErrors tutorials.txt: 0</code></pre>
</div>
</div>
</section>
</section>
<section id="embedding-the-diátaxis-data" class="level1">
<h1>Embedding the Diátaxis data</h1>
<p>Now we have a set of clean sentences ready for embedding. Text embeddings are usually placed in vector store databases. There are many startups providing this service, or we could spin up our own. For now, we’ll use the <code>chromadb</code> embedding storage.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install chromadb inside llm-env</span></span>
<span id="cb21-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install chromadb</span></code></pre></div>
<div id="cell-45" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> chromadb</span>
<span id="cb22-2">chroma_client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chromadb.Client()</span></code></pre></div>
</div>
<div id="cell-46" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">chroma_client.delete_collection(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>coll_name)</span></code></pre></div>
</div>
<div id="cell-47" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a collection</span></span>
<span id="cb24-2">coll_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'diaxtaxis_docs'</span></span>
<span id="cb24-3">collection <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chroma_client.create_collection(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>coll_name)</span></code></pre></div>
</div>
<p>Now we can store the embeddings.</p>
<div id="cell-49" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step through our documents and sentences</span></span>
<span id="cb25-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> fid, sentences <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> clean_data.items():</span>
<span id="cb25-3"></span>
<span id="cb25-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># metadata for the files</span></span>
<span id="cb25-5">    metadatas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"source"</span>: fid}] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(sentences)</span>
<span id="cb25-6"></span>
<span id="cb25-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># unique id for each file</span></span>
<span id="cb25-8">    ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>fid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(sentences))]</span>
<span id="cb25-9"></span>
<span id="cb25-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add the documents</span></span>
<span id="cb25-11">    collection.add(</span>
<span id="cb25-12">        documents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sentences,</span>
<span id="cb25-13">        metadatas<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>metadatas,</span>
<span id="cb25-14">        ids<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ids,</span>
<span id="cb25-15">    )</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/Users/cck/.cache/chroma/onnx_models/all-MiniLM-L6-v2/onnx.tar.gz: 100%|██████████| 79.3M/79.3M [01:42&lt;00:00, 814kiB/s] </code></pre>
</div>
</div>
<section id="querying-the-database" class="level2">
<h2 class="anchored" data-anchor-id="querying-the-database">Querying the database</h2>
<p>Now we have a stored set of embeddings we can search with queries. Let’s try to find some relevant sentences for writing a Notebook.</p>
<div id="cell-52" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># example setup</span></span>
<span id="cb27-2">example_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Writing code to pre-process and cleanup text."</span></span>
<span id="cb27-3"></span>
<span id="cb27-4">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collection.query(</span>
<span id="cb27-5">    query_texts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[example_prompt],</span>
<span id="cb27-6">    n_results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb27-7">)</span></code></pre></div>
</div>
<div id="cell-53" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">results</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>{'ids': [['how-to-use-diataxis.txt_38',
   'tutorials.txt_104',
   'reference.txt_43',
   'tutorials-how-to.txt_62',
   'reference.txt_30']],
 'distances': [[1.1993290185928345,
   1.2605922222137451,
   1.2740986347198486,
   1.2925323247909546,
   1.304250955581665]],
 'metadatas': [[{'source': 'how-to-use-diataxis.txt'},
   {'source': 'tutorials.txt'},
   {'source': 'reference.txt'},
   {'source': 'tutorials-how-to.txt'},
   {'source': 'reference.txt'}]],
 'embeddings': None,
 'documents': [["Working like this helps reduce the stress of one of the most paralysing and troublesome aspects of the documentation-writer's work: working out what to do",
   'Provide minimal explanation of actions in the most basic language possible',
   'List commands, options, operations, features, flags, limitations, error messages, etc',
   'You already know these processes',
   'Do nothing but describe  Technical reference has one job: to describe, and to do that clearly, accurately and comprehensively']],
 'uris': None,
 'data': None}</code></pre>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>This notebook took the first steps to augment an LLM with extra knowledge. We embedded the Diátaxis documentation to eventually use it for Retrieval-Augmented Generation (RAG). Later on, we will also use other LLMs to generate Question-and-Answer pairs based on these documents, and use them to fine-tune a model.</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<div id="refs">
<p><a href="https://diataxis.fr/">Procida D. Diátaxis documentation framework</a></p>
</div>


</section>

 ]]></description>
  <category>fractal</category>
  <category>python</category>
  <category>LLM</category>
  <guid>https://enzokro.dev/blog/posts/fractal-llms/05-rag/</guid>
  <pubDate>Sat, 21 Oct 2023 04:00:00 GMT</pubDate>
  <media:content url="https://enzokro.dev/blog/posts/fractal-llms/05-rag/Fractal_canopy.svg" medium="image" type="image/svg+xml"/>
</item>
<item>
  <title>Lesson 4: Quantized LLMs with llama.cpp</title>
  <dc:creator>Chris Kroenke</dc:creator>
  <link>https://enzokro.dev/blog/posts/fractal-llms/04-llama/</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>Using llama.cpp to run a quantized Gemma model.</p>
</blockquote>
<section id="intro" class="level1">
<h1>Intro</h1>
<p>Welcome to the fourth lesson. Here is what we have done so far:</p>
<ul>
<li>Lesson 1: Created a python environment for LLMs.<br>
</li>
<li>Lesson 2: Set up a personal blog to track our progress.</li>
<li>Lesson 3: Ran our first LLM using the HuggingFace API.</li>
</ul>
<p>In this notebook, we will run an LLM using the <a href="https://github.com/ggerganov/llama.cpp"><code>llama.cpp</code></a> library. We’ll deploy a version of the powerful, recently released <a href="https://blog.google/technology/developers/gemma-open-models/"><code>Gemma</code></a> model.</p>
<p>llama.cpp is a library that lets us easily run <em>quantized</em> LLMs. What does it mean for a model to be quantized?</p>
<section id="quantized-models" class="level2">
<h2 class="anchored" data-anchor-id="quantized-models">Quantized models</h2>
<p>Quantizing a model reduces the amount of memory it takes up. This lets us run previously too-large models on less powerful hardware, like a laptop or a small, consumer GPU.</p>
<p>Quantization works by reducing the number of bits that represent a model’s weights. For example, instead of using floats with 32 bits of precision, we can use 8-bit or 4-bit floats to reduce the memory footprint by quite a bit.</p>
<p>LLMs do lose some accuracy and power when their weights are quantized. But, the drop in performance is more than made up for by the ability to run larger models on smaller machines. It’s better to run <em>something</em>, than to not run anything at all.</p>
</section>
</section>
<section id="overview-of-llama.cpp" class="level1">
<h1>Overview of llama.cpp</h1>
<p>llama.cpp is a library focused on running quantized LLMs on Mac computers. Despite its name, the project supports many other models beyond Llama and Llama-2. It also has a set of <a href="https://github.com/abetlen/llama-cpp-python">python bindings</a> to make our lives easier.</p>
<p>The picture below from project’s README shows the low-level details about how the repo works and what it supports.</p>
<p><img src="https://enzokro.dev/blog/posts/fractal-llms/04-llama/llama_description.png" class="img-fluid"></p>
<p>The original project was hacked together in a <a href="https://github.com/ggerganov/llama.cpp/issues/33#issuecomment-1465108022">single evening</a>, and has since become arguably the SOTA for deploying LLMs on CPUs. This is in largely thanks to the helpful and dedicated community behind it.</p>
<p>Below we can see the full list of models that llama.cpp supports as of writing.</p>
<p><img src="https://enzokro.dev/blog/posts/fractal-llms/04-llama/llama_model_support.png" class="img-fluid"></p>
<p>The benefits of llama.cpp stretch beyond its code and models. Folks are always collaborating in <a href="https://github.com/ggerganov/llama.cpp/pulls">Pull Requests</a> to bring in the latest, greatest advances from the flood of LLM progress. In fact, tracking these PRs is a great way of keeping up to date with the larger LLM field.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The proof of the community’s power is in the this notebook. Originally, it used a Mistral model. And even though Gemma was released very recently, there was a PR to run it with llama.cpp within a few days of release.</p>
</div>
</div>
<p>The community is also open to hackers and new approaches: if there is proof than an idea works, then it gets merged in.</p>
<p>Next, let’s use llama.cpp to run a quantized <code>Gemma</code> model.</p>
</section>
<section id="running-gemma-with-llama.cpp" class="level1">
<h1>Running Gemma with llama.cpp</h1>
<p>This section covers the following:<br>
1. Create a virtual env for llama.cpp<br>
2. Install the <code>llama.cpp</code> repo<br>
3. Download a quantized <code>Gemma</code> model<br>
4. Run the model directly with <code>llama.cpp</code><br>
5. Run the model in a Jupyter Notebook</p>
<p>First, we create a mamba environment to keep our work isolated. Then we download and install the llama.cpp repo. Next we download the actual gemma-7b-it model from the HuggingFace Model Hub. Lastly, we run the gemma-7b-it model first with C++ and then in a Jupyter Notebook.</p>
<section id="installing-llama.cpp" class="level3">
<h3 class="anchored" data-anchor-id="installing-llama.cpp">Installing llama.cpp</h3>
<p>Start by creating a new mamba environment for llama.cpp.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create an environment for llama.cpp</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> llama-cpp python=3.11</span></code></pre></div>
<p>This isn’t <em>strictly</em> necessary for llama.cpp since it uses C++, but we will need the env later for the python bindings. And in any case, it’s a good idea to keep our projects in isolated environments.</p>
<p>Next up, activate this new environment.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># activate the environment</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate llama-cpp</span></code></pre></div>
<p>Now clone the repo and move into the directory.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clone and move into the llama.cpp repo</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> clone https://github.com/ggerganov/llama.cpp</span>
<span id="cb3-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> llama.cpp</span></code></pre></div>
<p>After cloning, we can move inside and prepare it for the build.</p>
<p>There are two options to build llama.cpp:<br>
- <a href="https://www.gnu.org/software/make/">GNU Make</a><br>
- <a href="https://cmake.org/">CMake</a></p>
<p>Previously I had some issues with <code>make</code> on Mac. However, again thanks to the great llama.cpp community, the issues have been fixed. Go ahead and build the llama.cpp project.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from the main llama.cpp directory, build it</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span></span></code></pre></div>
<p>That’s it! llama.cpp is now installed. We can now grab the quantized Gemma model.</p>
</section>
<section id="the-gemma-model" class="level2">
<h2 class="anchored" data-anchor-id="the-gemma-model">The Gemma model</h2>
<p>We will be working with the <a href="https://huggingface.co/google/gemma-7b-it"><code>gemma-7b-it</code></a> model. What exactly does it do? We can find out by breaking down the name a bit:<br>
- <code>gemma</code> is the name given by the developers. - <code>7B</code> means that the model has 7 billion parameters<br>
- <code>it</code> means that it was trained to follow and complete user instructions</p>
<p>The link above takes you to the official, original model page on HuggingFace. I went ahead and quantized and uploaded a few models, as part of the lesson (check the Appendix for more details).</p>
<blockquote class="blockquote">
<p><a href="https://huggingface.co/enzokro/gemma-7b-it-gguf/tree/main">My quantized Gemma models</a></p>
</blockquote>
<p>Once on the page, click on the <code>Files</code> tab near the top. Here you’ll see a big list of different quantized models.</p>
<p><img src="https://enzokro.dev/blog/posts/fractal-llms/04-llama/enzokro_gemma_quants.png" class="img-fluid"></p>
<p>The files shown here are variants of the same, base gemma-7b-it model that were quantized in different ways. Why are there two different files, and how are they different?</p>
<section id="breaking-down-the-quantized-gemma-names" class="level3">
<h3 class="anchored" data-anchor-id="breaking-down-the-quantized-gemma-names">Breaking down the quantized gemma names</h3>
<p>You can see how each quantized gemma model ends with a format like: <code>Q*_*.gguf</code>.</p>
<p>For example the first file above is: <em>gemma-7b-it-v0.1.<strong>Q4_K_S.gguf</strong></em>. We already covered what the first part of the name means.</p>
<p>The <code>Q4</code> part tells us that the model was quantized with 4-bits. The <code>K_S</code> part refers to the specific flavor of quantization that was used.</p>
<p>There is an unfortunate tradeoff between quantization and performance. The fewer bits we use, the smaller and faster the model will be at the code of performance. And the more bits we use, the better its performance but the slower and larger the model.</p>
<p>In general, the <code>Q4</code> and <code>Q5</code> models offer a good balance between speed, performance, and size.</p>
<p>Here we stick with the <code>Q5_K_M</code> model. It is not much larger than the <code>Q4</code> model, and has a performance better enough to make it worthwhile.</p>
<p>Before grabbing this model, we need to install the <code>huggingface-hub</code> command-line interface (CLI) is installed. This tool will let us point to and download any model on the HuggingFace hub.</p>
</section>
<section id="downloaidng-a-quantized-gemma-model" class="level3">
<h3 class="anchored" data-anchor-id="downloaidng-a-quantized-gemma-model">Downloaidng a quantized Gemma model</h3>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install a tool to download HuggingFace models via the terminal</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install huggingface-hub</span></code></pre></div>
<p>Then move into <code>models/</code> and create a <code>gemma-7b-it</code> folder. Having one folder for each family of models keeps the folder from getting cluttered. Once inside, download the Q5_K_M model.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from the llama.cpp directory, move into the models directory</span></span>
<span id="cb6-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> models</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create and move into the gemma-7b-it directory</span></span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> gemma-7b-it</span>
<span id="cb6-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> gemma-7b-it</span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># download the quantized gemma-7b-it model</span></span>
<span id="cb6-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">huggingface-cli</span> download enzokro/gemma-7b-it-gguf <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb6-10">    gemma-7b-it-Q5_K_M.gguf <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb6-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--local-dir</span> . <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb6-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--local-dir-use-symlinks</span> False</span>
<span id="cb6-13"></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># download the quantized gemma-7b-it model</span></span>
<span id="cb6-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">huggingface-cli</span> download TheBloke/Mistral-7B-Instruct-v0.2-GGUF <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb6-16">    mistral-7b-instruct-v0.2.Q4_K_S.gguf <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb6-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--local-dir</span> . <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb6-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--local-dir-use-symlinks</span> False</span>
<span id="cb6-19"></span>
<span id="cb6-20"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">huggingface-cli</span> download TheBloke/Llama-2-7B-Chat-GGUF <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb6-21">    llama-2-7b-chat.Q4_K_M.gguf <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb6-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--local-dir</span> . <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb6-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--local-dir-use-symlinks</span> False</span></code></pre></div>
<p>Once the model is downloaded, we can run it with the <code>main</code> binary from the llama.cpp repo.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The binaries are created as part of the build process - make sure you’ve ran those before going forward.</p>
</div>
</div>
</section>
</section>
<section id="running-the-gemma-model" class="level2">
<h2 class="anchored" data-anchor-id="running-the-gemma-model">Running the Gemma model</h2>
<p>Let’s get right to it. Start with the command below, which will immediately prompt and run the quantized gemma model. We’re asking it to give us 10 simple steps for building a website. Then, we’ll breakdown exactly what the command is doing.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run a simple example to see quantized Gemma in action</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./main</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> models/gemma-7b-it/gemma-7b-it-Q5_K_M.gguf <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb7-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please provide 10 simple steps for building a website."</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb7-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--in-prefix</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;start_of_turn&gt;user\n"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb7-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--in-suffix</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;end_of_turn&gt;\n&lt;start_of_turn&gt;model\n"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb7-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb7-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--temp</span> 0 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb7-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--repeat-penalty</span> 1.0 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb7-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-penalize-nl</span></span></code></pre></div>
<p>The <code>-m</code> flag points to the quantized model weight we downloaded into the <code>models/gemma-7b-it</code> folder.</p>
<p>The <code>-p</code> flag is the prompt for the model to follow.</p>
<p>Here is where things get interesting. Remember that Gemma was trained to follow instructions from a user. During training, it was shown a pair of <code>&lt;PROMPT&gt;</code> and <code>&lt;RESPONSE&gt;</code> strings. The <code>&lt;PROMPT&gt;</code> string is the user’s input, and the <code>&lt;RESPONSE&gt;</code> string is the model’s output.</p>
<p>That means the model expects to see the same <code>&lt;PROMPT&gt; | &lt;RESPONSE&gt;</code> format in its input. This is very similar to the text preprocessing steps we covered in Lesson 3. Making sure we follow the model’s expected prompt format is the last text preprocessing step we <em>must</em> do.</p>
<p>Without this prompt structure, the model will technically still run. But we’d be throwing away a huge portion of the model’s power.</p>
<p>For the Gemma models, the <code>&lt;PROMPT&gt;</code> must begin with the phrase <code>&lt;start_of_turn&gt;user\n</code>. This tells the model to prepare for an instruction. And the <code>&lt;RESPONSE&gt;</code> string must begin with the phrase <code>&lt;end_of_turn&gt;\n&lt;start_of_turn&gt;model\n</code>. This tells the model to start following the request.</p>
<p>We specify the first string by passing in the <code>--in-prefix</code> argument. And we specify the second by passing in the <code>--in-suffix</code> argument. Our actual prompt will be sandwiched between these two strings:</p>
<pre><code>&lt;start_of_turn&gt;user
|| INSTRUCTION_HERE ||
&lt;end_of_turn&gt;
&lt;start_of_turn&gt;model</code></pre>
<p>The last three arguments are specific to the instruction model. They control the temperature, the repeat penalty, and the penalty for newlines.</p>
<pre><code>--temp 0
--repeat-penalty 1.0
--no-penalize-nl</code></pre>
<p>Think of them as sprinkles on top to get better model outputs. And for reference, they were suggested by <a href="https://huggingface.co/google/gemma-7b-it/discussions/38#65d7b14adb51f7c160769fa1">Georgi Gerganov</a>, the main author of llama.cpp.</p>
</section>
<section id="gemma-model-outputs" class="level2">
<h2 class="anchored" data-anchor-id="gemma-model-outputs">Gemma model outputs</h2>
<p>Here’s a the output I got after running the command:</p>
<blockquote class="blockquote">
<p>Please provide 10 simple steps for building a website.</p>
<p><strong>1. Choose a Domain Name:</strong> Select a domain name that is relevant to your website’s content and easy to remember.<br>
<strong>2. Choose a Web Host:</strong> Select a web hosting service that meets your needs in terms of bandwidth, storage space, and reliability.<br>
<strong>3. Select a Content Management System (CMS):</strong> Choose a CMS platform that offers the features you need to manage your website content easily.<br>
<strong>4. Design Your Website:</strong> Create a visually appealing website design that is responsive to different devices.<br>
<strong>5. Add Content:</strong> Populate your website with high-quality content that is relevant to your target audience.<br>
<strong>6. Optimize for Search Engines:</strong> Use SEO techniques to optimize your website for search engines to improve its visibility.<br>
<strong>7. Create a Mobile-Friendly Version:</strong> Ensure your website is responsive and optimized for mobile devices.<br>
<strong>8. Promote Your Website:</strong> Use social media and other marketing channels to promote your website.<br>
<strong>9. Track and Analyze:</strong> Monitor your website’s performance and analyze user behavior to identify areas for improvement.<br>
<strong>10. Continuously Update:</strong> Keep your website up-to-date with new content, updates, and security patches.</p>
</blockquote>
<p>Congratulation! We have now:<br>
- Downloaded and built llama.cpp.<br>
- Downloaded a quantized Gemma model.<br>
- Ran the Gemma model on a sample input.</p>
<p>Everything so far was done in C++ via the terminal.</p>
<p>Next, let’s run the Gemma model inside a Jupyter Notebook with the llama.cpp python bindings. This will give us a preview into a fun way of augmenting your work with LLMs: coding alongside an Agent that you can talk to anytime by popping into a code cell.</p>
</section>
</section>
<section id="running-gemma-with-python" class="level1">
<h1>Running Gemma with python</h1>
<p>Make sure to install the llama.cpp python bindings inside of the mamba virtual environment we created earlier.</p>
<p>The pair of pip commands below will install the bindings.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install the python bindings with Metal acceleration</span></span>
<span id="cb10-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> uninstall llama-cpp-python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb10-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">CMAKE_ARGS</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-DLLAMA_METAL=on"</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-U</span> llama-cpp-python <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-cache-dir</span></span></code></pre></div>
<p>The two commands above:<br>
- First uninstall older versions of the bindings, if any are found.<br>
- Then, it installs the bindings with Metal (Mac GPU) acceleration.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Make sure to change the <code>CMAKE_ARGS</code> to CUDA if running on Linux.</p>
</div>
</div>
<p>Next up, let’s install the ipykernel package. This will let us run the llama.cpp environment inside of a Jupyter Notebook.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install the ipykernel package to run in notebooks</span></span>
<span id="cb11-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install ipykernel</span></code></pre></div>
<p>After installing the bindings, run the following code snippet in the notebook. This will tell us if the bindings are installed correctly.</p>
<div id="cell-59" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check if we can import the llama.cpp python bindings </span></span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> llama_cpp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Llama</span></code></pre></div>
</div>
<p>If the command above works, we can now run the Gemma model inside a Jupyter Notebook!</p>
<p>We can instantiate a <code>Llama</code> model object and point it to the weights we downloaded earlier. Make sure to change the paths to match your own. Here we point to the Q4 model to try something different.</p>
<div id="cell-61" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># point the Llama class to the model weights we downloaded in the previous sections</span></span>
<span id="cb13-2">work_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/cck/repos/llama.cpp/"</span></span>
<span id="cb13-3">llm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Llama(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>work_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/models/gemma-7b-it/gemma-7b-it-Q4_K_M.gguf"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</div>
<p>Let’s prompt it again to give us 10 steps for building a website.</p>
<div id="cell-63" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># asking Gemma for help building a website</span></span>
<span id="cb14-2">prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;start_of_turn&gt;user"</span> </span>
<span id="cb14-3">suffix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;end_of_turn&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;start_of_turn&gt;model</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb14-4">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please provide 10 simple steps for building a website."</span></span>
<span id="cb14-5"></span>
<span id="cb14-6">full_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'''&lt;start_of_turn&gt;user</span></span>
<span id="cb14-7"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prompt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;end_of_turn&gt;</span></span>
<span id="cb14-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;start_of_turn&gt;model"</span></span>
<span id="cb14-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span></code></pre></div>
</div>
<div id="cell-64" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(full_prompt)</span></code></pre></div>
</div>
<div id="cell-65" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calling the llm from the notebook</span></span>
<span id="cb16-2">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> llm(</span>
<span id="cb16-3">    full_prompt, </span>
<span id="cb16-4">    max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb16-5">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>,</span>
<span id="cb16-6">    repeat_penalty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>,</span>
<span id="cb16-7">    echo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb16-8">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</div>
<div id="cell-66" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> some_function(input_one): </span>
<span id="cb17-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># some programming...</span></span></code></pre></div>
</div>
<div id="cell-67" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">llm(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please remind me about the XYZ module."</span>)</span></code></pre></div>
</div>
<p>Let’s look inside <code>output</code> to see what the model said.</p>
<div id="cell-69" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-overflow-wrap code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># viewing the in-notebook gemma-7b-it generation</span></span>
<span id="cb19-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'choices'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text'</span>])</span></code></pre></div>
</div>
<div id="cell-70" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># checking out the llm's arguments</span></span>
<span id="cb20-2">llm??</span></code></pre></div>
</div>
<p>Congrats! We’ve now ran the <code>gemma-7b-it</code> model with llama.cpp in both C++ and python.</p>
<p>The C++ version is ideal for a server or production application. And as for python version, we can now bootup a handy LLM assistant inside a Jupyter Notebook, and ask it questions as we code or develop.</p>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This notebook covered the llama.cpp library and how to use it to run LLMs. We then ran a <code>gemma-7b-it</code> model with llama.cpp in both C++ and python.</p>
<p>The main goal here was to get you familiar with quantized models, which are the ones we’ll eventually be deploy on our local devices.</p>
</section>
</section>
<section id="appendix-1-quantizing-the-gemma-7b-it-model" class="level1">
<h1>Appendix 1: Quantizing the gemma-7b-it model</h1>
<p>The model we used in this notebook was already quantized. I quantized the official, full GGUF model from Google and uploaded it to my own HuggingFace account.</p>
<p>The steps below are how I quantized this model.</p>
<section id="downloading-the-original-model" class="level2">
<h2 class="anchored" data-anchor-id="downloading-the-original-model">Downloading the original model</h2>
<p>First, we move into the <code>models/</code> folder and download the original model. I create a special <code>hf_models</code> folder to keep any models that came from the huggingface hub. Start from the base llama directory.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># move into the models/ and create a folder for huggingface models</span></span>
<span id="cb21-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> models/</span>
<span id="cb21-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> hf_models</span>
<span id="cb21-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> hf_models</span></code></pre></div>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># download the original model</span></span>
<span id="cb22-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">huggingface-cli</span> download google/gemma-7b-it <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb22-3">    gemma-7b-it.gguf <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb22-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--local-dir</span> . <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb22-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--local-dir-use-symlinks</span> False</span></code></pre></div>
<p>Once we have this model, we can run llama.cpp’s <code>quantize</code> command to compress it. I put this into a proper <code>gemma-7b-it</code> folder inside <code>models/</code> to keep things organized.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a folder for gemma-7b-it</span></span>
<span id="cb23-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> models/gemma-7b-it</span></code></pre></div>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># quantize the original model to the Q4_K_M format</span></span>
<span id="cb24-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./quantize</span> models/hf_models/gemma-7b-it.gguf models/gemma-7b-it/gemma-7b-it-Q5_K_M.gguf Q5_K_M</span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>fractal</category>
  <category>python</category>
  <category>LLM</category>
  <guid>https://enzokro.dev/blog/posts/fractal-llms/04-llama/</guid>
  <pubDate>Sat, 14 Oct 2023 04:00:00 GMT</pubDate>
  <media:content url="https://enzokro.dev/blog/posts/fractal-llms/04-llama/llama-cpp-logo.png" medium="image" type="image/png" height="72" width="144"/>
</item>
<item>
  <title>Lesson 3: HuggingFace NLP Models</title>
  <dc:creator>Chris Kroenke</dc:creator>
  <link>https://enzokro.dev/blog/posts/fractal-llms/03-hf-nlp-models/</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>Running powerful NLP models with the HuggingFace <code>transformers</code> library.</p>
</blockquote>
<section id="intro" class="level1">
<h1>Intro</h1>
<p>Welcome to the third lesson of the course. Let’s recap our progress so far:</p>
<ul>
<li>Lesson 1: We made a python environment for LLMs.<br>
</li>
<li>Lesson 2: Set up a personal blog to track our progress.</li>
</ul>
<p>Next we will use our first LLM. We’ll start with a Natural Language Processing (NLP) model provided by the HuggingFace team.</p>
<section id="notebook-best-practices" class="level2">
<h2 class="anchored" data-anchor-id="notebook-best-practices">Notebook best practices</h2>
<p>First, let’s set up our notebook to be fully interactive and easy to use. We can do this with a couple of “magic functions” built-in to Jupyter.</p>
<p>Specifically, we use the magic <code>autoreload</code> and <code>matplotlib</code> functions. The cell below shows them in action:</p>
<div id="cell-4" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># best practice notebook magic</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>load_ext autoreload</span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>autoreload <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span></code></pre></div>
</div>
<p>Let’s take a look at what these magic functions do.</p>
<p><code>autoreload</code> dynamically reloads code libraries, even as they’re changing under the hood. That means we do not have to restart the notebook after every change. We can instead code and experiment on the fly.</p>
<p><code>matplotlib inline</code> automatically displays any plots below the code cell that created them. The plots are also saved in the notebook itself, which is perfect for our blog posts.</p>
<p>All of our notebooks going forward will start with these magic functions.</p>
<p>Let’s start with the <code>"hello, world!"</code> of NLP: sentiment analysis.</p>
</section>
</section>
<section id="sentiment-analysis-with-huggingface" class="level1">
<h1>Sentiment Analysis with HuggingFace</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The code and examples below are based on the official HuggingFace tutorial, reworked to better suit the course.</p>
</div>
</div>
<p>Imagine that we’re selling some product. And we’ve gathered a bunch of reviews from a large group of users to find out both the good and bad things that people are saying. The bad reviews will point out where our product needs improving. Positive reviews will show what we’re doing right.</p>
<p>Figuring out the tone of a statement (<em>positive vs.&nbsp;negative</em>) is an area of NLP known as <code>sentiment analysis</code>.</p>
<p>Going through each review would give us a ton of insight about our product. But, it would take a ton of intense and manual effort. Enter Machine Learning to the rescue! An NLP model can automatically analyze and classify the reviews in bulk.</p>
<section id="first-a-pipeline" class="level2">
<h2 class="anchored" data-anchor-id="first-a-pipeline">First, a Pipeline</h2>
<p>Let’s take a look at the HuggingFace NLP model that we’ll run. At a high level, the model is built around three key pieces:</p>
<ol type="1">
<li>A <code>Config</code> file.<br>
</li>
<li>A <code>Preprocessor</code> file.<br>
</li>
<li><code>Model</code> file(s).</li>
</ol>
<p>The HuggingFace API has a handy, high-level <code>pipeline</code> that wraps up all three objects for us.</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Before going forward, make sure that the <code>llm-env</code> environment from the first lesson is active. This environment has the HuggingFace libraries used below.</p>
</div>
</div>
<p>The code below uses the <code>transformers</code> library to build a Sentiment Analysis <code>pipeline</code>.</p>
<div id="cell-18" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load in the pipeline object from HuggingFace</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pipeline</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a sentiment analysis pipeline</span></span>
<span id="cb2-5">classifier <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentiment-analysis"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>No model was supplied, defaulted to distilbert-base-uncased-finetuned-sst-2-english and revision af0f99b (https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english).
Using a pipeline without specifying a model name and revision in production is not recommended.</code></pre>
</div>
</div>
<p>Since we didn’t specify a model, you can see in the output above that HuggingFace picked a <a href="distilbert-base-uncased-finetuned-sst-2-english">distilbert model</a> for us by default.</p>
<p>We will learn more about what exactly <code>distilbert</code> is and how it works later on. For now, think of it as a useful NLP genie who can look at a sentence and tell us whether its has a positive or negative tone.</p>
<p>Next, let’s find out what the model thinks about the sentence: <code>"HuggingFace pipelines are awesome!"</code></p>
<div id="cell-21" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sentiment analysis on a simple, example sentence</span></span>
<span id="cb4-2">example_sentence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HuggingFace pipelines are awesome!"</span></span>
<span id="cb4-3">classifier(example_sentence)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>[{'label': 'POSITIVE', 'score': 0.9998503923416138}]</code></pre>
</div>
</div>
<p>Not bad. We see a strong confident score for a <code>POSITIVE</code> label, as could be expected.</p>
<p>We can also pass many sentences at once, which starts to show the bulk processing power of these models. Let’s process four sentences at once: three positive ones, and a clearly negative one.</p>
<div id="cell-24" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># many sentences at once, in a python list</span></span>
<span id="cb6-2">many_sentences <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb6-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HuggingFace pipelines are awesome!"</span>,</span>
<span id="cb6-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I hope you're enjoying this course so far"</span>,</span>
<span id="cb6-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hopefully the material is clear and useful"</span>,</span>
<span id="cb6-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I don't like this course so far"</span>,</span>
<span id="cb6-7">]</span>
<span id="cb6-8"></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># process many sentences at once</span></span>
<span id="cb6-10">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classifier(many_sentences)</span>
<span id="cb6-11"></span>
<span id="cb6-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check the tone of each sentence</span></span>
<span id="cb6-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> result <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> results:</span>
<span id="cb6-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"label: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, with score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'score'</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>label: POSITIVE, with score: 0.9999
label: POSITIVE, with score: 0.9998
label: POSITIVE, with score: 0.9998
label: NEGATIVE, with score: 0.8758</code></pre>
</div>
</div>
<p>Congrats! You’ve now ran a HuggingFace pipeline and used it to analyze the tone of a few sentences. Next, let’s take a closer look at the pipeline object.</p>
</section>
</section>
<section id="going-inside-the-pipeline" class="level1">
<h1>Going inside the <code>pipeline</code></h1>
<p>Under the hood, a pipeline handles three key HuggingFace NLP pieces: Config, Preprocessor, and Model.</p>
<p>To better understand each piece, let’s take one small step down the ladder of abstraction and build our own simple pipeline.</p>
<p>We will use the same <code>distilbert</code> model from before. First we need the three key pieces mentioned above. Thankfully, we can import each of these pieces from the <code>transformers</code> library.</p>
<section id="config-class" class="level2">
<h2 class="anchored" data-anchor-id="config-class">Config class</h2>
<p>The <code>config</code> class is a simple map with the options and configurations of a model. It has the key-value pairs that define a model’s architecture and hyperparameters.</p>
<div id="cell-31" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># config for the model</span></span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DistilBertConfig</span></code></pre></div>
</div>
</section>
<section id="preprocessor-class" class="level2">
<h2 class="anchored" data-anchor-id="preprocessor-class">Preprocessor class</h2>
<p>The <code>preprocessor</code> object in this case is a <code>Tokenizer</code>. Tokenizers convert strings and characters into special tensor inputs for the LLM.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Correctly pre-processing inputs is one of the most important and error-prone steps in using ML models. In other words, it’s good to offload to a class that’s already been tested and debugged.</p>
</div>
</div>
<div id="cell-35" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># input preprocessor to tokenize strings</span></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DistilBertTokenizer</span></code></pre></div>
</div>
</section>
<section id="model-class" class="level2">
<h2 class="anchored" data-anchor-id="model-class">Model class</h2>
<p>The <code>model</code> class holds the weights and parameters for the actual LLM. It’s the “meat and bones” of the setup, so to speak.</p>
<div id="cell-38" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the text classifier model</span></span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DistilBertForSequenceClassification</span></code></pre></div>
</div>
</section>
<section id="naming-the-model" class="level2">
<h2 class="anchored" data-anchor-id="naming-the-model">Naming the model</h2>
<p>We need to know a model’s full, proper name in to load it from HuggingFace. Its name is how we find the model on the <a href="https://huggingface.co/docs/hub/models-the-hub">HuggingFace Model Hub</a>.</p>
<p>Once we know its full name, there is a handy <code>from_pretrained()</code> function that will automatically find and download the pieces for us.</p>
<p>In this case, the distilbert model’s full name is:<br>
&gt; <code>distilbert-base-uncased-finetuned-sst-2-english</code>.</p>
<div id="cell-41" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sentiment analysis model name</span></span>
<span id="cb11-2">model_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distilbert-base-uncased-finetuned-sst-2-english'</span></span></code></pre></div>
</div>
<p>In the code below we can now load each of the three NLP pieces for this model.</p>
<div id="cell-43" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the config</span></span>
<span id="cb12-2">config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DistilBertConfig.from_pretrained(model_name)</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the input tokenizer </span></span>
<span id="cb12-5">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DistilBertTokenizer.from_pretrained(model_name)</span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the model</span></span>
<span id="cb12-8">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DistilBertForSequenceClassification.from_pretrained(model_name)</span></code></pre></div>
</div>
<p>Next we will compose these three pieces together to mimic the original <code>pipeline</code> example.</p>
</section>
<section id="putting-together-a-simple_pipeline" class="level2">
<h2 class="anchored" data-anchor-id="putting-together-a-simple_pipeline">Putting together a <code>simple_pipeline</code></h2>
<section id="preprocessing-the-inputs" class="level3">
<h3 class="anchored" data-anchor-id="preprocessing-the-inputs">Preprocessing the inputs</h3>
<p>First, we create a <code>preprocess</code> function to turn a given <code>text</code> string into the proper, tokenized inputs than an LLM expects.</p>
<div id="cell-48" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> preprocess(text: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb13-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Sends `text` through the model's tokenizer.  </span></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The tokenizer turns words and characters into proper inputs for an NLP model.</span></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb13-6">    tokenized_inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(text, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>)</span>
<span id="cb13-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tokenized_inputs</span></code></pre></div>
</div>
<p>Let’s test this preprocessing function on the example sentence from earlier.</p>
<div id="cell-50" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># manually preprocessing the example sentence: "HuggingFace pipelines are awesome!"</span></span>
<span id="cb14-2">preprocess(example_sentence)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>{'input_ids': tensor([[  101, 17662, 12172, 13117,  2015,  2024, 12476,   999,   102]]), 'attention_mask': tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1]])}</code></pre>
</div>
</div>
<p>It turned an input string into numerical embeddings for the LLM. We’ll breakdown what exactly this output means later on in the course. For now, think of it as sanitizing and formatting the text into a format that the LLM has been trained to work with.</p>
</section>
<section id="runnning-the-model" class="level3">
<h3 class="anchored" data-anchor-id="runnning-the-model">Runnning the model</h3>
<p>Next up, let’s make our own <code>forward</code> function that run the LLM on preprocessed inputs.</p>
<div id="cell-54" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(text: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb16-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    First we preprocess the `text` into tokens.</span></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Then we send the `tokenized_inputs` to the model.</span></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb16-6">    tokenized_inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> preprocess(text)</span>
<span id="cb16-7">    outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>tokenized_inputs)</span>
<span id="cb16-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> outputs</span></code></pre></div>
</div>
<p>Let’s check what this outputs for our running example sentence.</p>
<div id="cell-56" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> forward(example_sentence)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> outputs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>SequenceClassifierOutput(loss=None, logits=tensor([[-4.2326,  4.5748]], grad_fn=&lt;AddmmBackward0&gt;), hidden_states=None, attentions=None)</code></pre>
</div>
</div>
<p>You’ll see a lot going on in the <code>SequenceClassifierOutput</code> above. To be honest, this is where the original <code>pipeline</code> does most of the heavy-lifting for us. It takes the raw, detailed output from an LLM and converts it into a more human-readable format.</p>
<p>We’ll mimic this heavy-lifting by using the <code>Config</code> class and model outputs to find out whether the sentence is positive or negative.</p>
<div id="cell-59" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> process_outputs(outs):</span>
<span id="cb19-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Converting the raw model outputs into a human-readable result.</span></span>
<span id="cb19-4"></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Steps:</span></span>
<span id="cb19-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        1. Grab the raw "scores" from the model for Positive and Negative labels.  </span></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        2. Find out which score is the highest (aka the model's decision).  </span></span>
<span id="cb19-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        3. Use the `config` object to find the class label for the highest score.  </span></span>
<span id="cb19-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        4. Turn the raw score into a human-readable probability value.  </span></span>
<span id="cb19-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        5. Print out the predicted labels with its probability.  </span></span>
<span id="cb19-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb19-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. Grab the raw "scores" that from the model for Positive and Negative labels</span></span>
<span id="cb19-13">    logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outs.logits</span>
<span id="cb19-14"></span>
<span id="cb19-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. Find the strongest label score, aka the model's decision</span></span>
<span id="cb19-16">    pred_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.argmax(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).item()</span>
<span id="cb19-17"></span>
<span id="cb19-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. Use the `config` object to find the class label</span></span>
<span id="cb19-19">    pred_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> config.id2label[pred_idx]  </span>
<span id="cb19-20"></span>
<span id="cb19-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4. Calculate the human-readable number for the score</span></span>
<span id="cb19-22">    pred_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.softmax(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[:, pred_idx].item()</span>
<span id="cb19-23"></span>
<span id="cb19-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 5. return the label and score in a dictionary</span></span>
<span id="cb19-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {</span>
<span id="cb19-26">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>: pred_label,</span>
<span id="cb19-27">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'score'</span>: pred_score, </span>
<span id="cb19-28">    }</span></code></pre></div>
</div>
<p>We can now put together a <code>simple_pipeline</code>, and check how it compares to the original <code>pipeline</code>.</p>
<div id="cell-61" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> simple_pipeline(text):</span>
<span id="cb20-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Putting the NLP pieces and functions together into a pipeline.</span></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb20-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the model's raw output</span></span>
<span id="cb20-6">    model_outs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> forward(text)</span>
<span id="cb20-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert the raw outputs into a human readable result</span></span>
<span id="cb20-8">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> process_outputs(model_outs)</span>
<span id="cb20-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> predictions</span></code></pre></div>
</div>
<p>Calling the <code>simple_pipeline</code> on the example sentence, drumroll please…</p>
<div id="cell-63" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># running our simple pipeline on the example text</span></span>
<span id="cb21-2">simple_pipeline(example_sentence)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>{'label': 'POSITIVE', 'score': 0.9998503923416138}</code></pre>
</div>
</div>
<p>And just like that, we too a small peek under the <code>pipeline</code> hood and built our own, simple working version.</p>
<p>One pain point: we had to know the full, proper name of the different <code>Distilbert*</code> pieces to import the Config, Preprocessor, and Model. This gets overwhelming fast given the flood of LLM models released almost daily. Thankfully, HuggingFace has come up with a great solution to this problem: the <code>Auto</code> class.</p>
</section>
</section>
</section>
<section id="true-huggingface-magic-auto-classes" class="level1">
<h1>True HuggingFace magic: <code>Auto</code> classes</h1>
<p>With <code>Auto</code> classes, we don’t have to know the exact or proper name of the LLM’s objects to import them. We only need the proper name of the model on the hub:</p>
<div id="cell-67" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># viewing our distilber model's name</span></span>
<span id="cb23-2">model_name</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>'distilbert-base-uncased-finetuned-sst-2-english'</code></pre>
</div>
</div>
<p>Run the cell below to import the Auto classes. Then we’ll use them with the model name to create an even cleaner <code>simple_pipeline</code>.</p>
<div id="cell-69" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># importing the Auto classes</span></span>
<span id="cb25-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoConfig</span>
<span id="cb25-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoTokenizer</span>
<span id="cb25-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoModelForSequenceClassification</span></code></pre></div>
</div>
<p>Next we create the three key NLP pieces with the Auto classes.</p>
<div id="cell-71" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># building the pieces with `Auto` classes</span></span>
<span id="cb26-2">config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoConfig.from_pretrained(model_name)</span>
<span id="cb26-3">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(model_name)</span>
<span id="cb26-4">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForSequenceClassification.from_pretrained(model_name)</span></code></pre></div>
</div>
<p>We can now use these pieces to build a <code>simple_pipeline</code> class that’s cleaner than before, and can handle any model_name:</p>
<div id="cell-73" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> SentimentPipeline:</span>
<span id="cb27-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, model_name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb27-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb27-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Simple Sentiment Analysis pipeline.</span></span>
<span id="cb27-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb27-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_name</span>
<span id="cb27-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoConfig.from_pretrained(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model_name)</span>
<span id="cb27-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model_name)</span>
<span id="cb27-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForSequenceClassification.from_pretrained(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model_name)</span>
<span id="cb27-10"></span>
<span id="cb27-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> preprocess(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, text: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb27-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb27-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Sends `text` through the LLM's tokenizer.  </span></span>
<span id="cb27-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The tokenizer turns words and characters into special inputs for the LLM.</span></span>
<span id="cb27-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb27-16">        tokenized_inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tokenizer(text, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>)</span>
<span id="cb27-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tokenized_inputs</span>
<span id="cb27-18"></span>
<span id="cb27-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, text: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb27-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb27-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        First we preprocess the `text` into tokens.</span></span>
<span id="cb27-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Then we send the `token_inputs` to the model.</span></span>
<span id="cb27-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb27-24">        token_inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.preprocess(text)</span>
<span id="cb27-25">        outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>token_inputs)</span>
<span id="cb27-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> outputs</span>
<span id="cb27-27"></span>
<span id="cb27-28">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> process_outputs(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, outs):</span>
<span id="cb27-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb27-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Here we mimic the post-processing that HuggingFace automatically does in its `pipeline`.  </span></span>
<span id="cb27-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb27-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># grab the raw scores from the model for Positive and Negative labels</span></span>
<span id="cb27-33">        logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outs.logits</span>
<span id="cb27-34"></span>
<span id="cb27-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># find the strongest label score, aka the model's decision</span></span>
<span id="cb27-36">        pred_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.argmax(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).item()</span>
<span id="cb27-37"></span>
<span id="cb27-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use the `config` object to find the actual class label</span></span>
<span id="cb27-39">        pred_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.config.id2label[pred_idx]  </span>
<span id="cb27-40"></span>
<span id="cb27-41">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate the human-readable probability score for this class</span></span>
<span id="cb27-42">        pred_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.softmax(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[:, pred_idx].item()</span>
<span id="cb27-43"></span>
<span id="cb27-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return the predicted label and its score</span></span>
<span id="cb27-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {</span>
<span id="cb27-46">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>: pred_label,</span>
<span id="cb27-47">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'score'</span>: pred_score, </span>
<span id="cb27-48">        }</span>
<span id="cb27-49">    </span>
<span id="cb27-50">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, text: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb27-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb27-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Overriding the call method to easily and intuitively call the pipeline.</span></span>
<span id="cb27-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb27-54">        model_outs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.forward(text)</span>
<span id="cb27-55">        preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.process_outputs(model_outs)</span>
<span id="cb27-56">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> preds</span></code></pre></div>
</div>
<section id="using-the-custom-sentimentpipeline" class="level2">
<h2 class="anchored" data-anchor-id="using-the-custom-sentimentpipeline">Using the custom <code>SentimentPipeline</code></h2>
<p>Let’s leverage both the new class and a different model, to show the power of Auto classes.</p>
<p>For fun, let’s use BERT model that was trained specifically on tweets. The full model’s name is <a href="https://huggingface.co/finiteautomata/bertweet-base-sentiment-analysis"><code>finiteautomata/bertweet-base-sentiment-analysis</code></a>.</p>
<div id="cell-76" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># using a different model</span></span>
<span id="cb28-2">new_model_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'finiteautomata/bertweet-base-sentiment-analysis'</span></span></code></pre></div>
</div>
<div id="cell-77" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># creating a new sentiment pipeline</span></span>
<span id="cb29-2">simple_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SentimentPipeline(new_model_name)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>emoji is not installed, thus not converting emoticons or emojis into text. Install emoji: pip3 install emoji==0.6.0</code></pre>
</div>
</div>
<p>Now let’s run it on our handy example sentence.</p>
<div id="cell-79" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calling our new, flexible pipeline</span></span>
<span id="cb31-2">simple_pipeline(example_sentence)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>{'label': 'POS', 'score': 0.9908382296562195}</code></pre>
</div>
</div>
<p>Congrats! You’ve now built a flexible pipeline for Sentiment Analysis that can leverage most NLP models on the HuggingFace hub.</p>
</section>
</section>
<section id="conlusion" class="level1">
<h1>Conlusion</h1>
<p>This notebook went through the basics of using a HuggingFace pipeline to run sentiment analysis on a few sentences. We then looked under the hood at the pipeline’s three key pieces: Config, Preprocessor, and Model.</p>
<p>Lastly, we built our own <code>simple_pipeline</code> from scratch to see how the pieces fit together.</p>
<p>The goal of this notebook was two fold. First, we wanted to gain hands-on experience with using the <code>transformers</code> API from HuggingFace. It’s an incredibly powerful library, that lets us do what used to be difficult, research-level NLP tasks in a few lines of code.</p>
<p>Second, we wanted to get some familiarity with downloading models. The model weights that we downloaded from HuggingFace are the same ones that we will be fine-tuning, quantizing, and deploying on our devices throughout the course.</p>
<p>There are two appendixes below. The first one gives a handy way of counting the number of weights in a model. The second one goes into more details about how to interactively debug an analyze the code in a Jupyter notebook.</p>
</section>
<section id="appendix-1-counting-the-number-of-parameters-in-a-model" class="level1">
<h1>Appendix 1: Counting the number of parameters in a model</h1>
<p>The following code snippet counts the number of trainable parameters in a model. It’s a question that comes up often when working with LLMs, and having a quick reference to find out a rough model’s size often comes in handy.</p>
<div id="cell-86" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> count_parameters(model):</span>
<span id="cb33-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb33-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Counts the number of trainable parameters in a `model`.</span></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb33-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.numel() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> model.parameters() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> p.requires_grad)</span></code></pre></div>
</div>
<p>Here we use it to count the number of parameters in the distilbert model from above.</p>
<div id="cell-88" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># view the number of parameters in the last model used</span></span>
<span id="cb34-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of trainable params: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>count_parameters(model)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>'Number of trainable params: 66,955,010'</code></pre>
</div>
</div>
</section>
<section id="appendix-2-inspecting-the-classifier-notebook-style." class="level1">
<h1>Appendix 2: Inspecting the <code>classifier</code>, notebook style.</h1>
<p>What is the <code>classifier</code> object, exactly? Jupyter has many powerful ways of inspecting and analyzing its code.</p>
<p>One of the simplest ways of checking an object is to call it by itself in a code cell, as shown below.</p>
<div id="cell-92" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># show the contents of the `classifier` object</span></span>
<span id="cb36-2">classifier</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>&lt;transformers.pipelines.text_classification.TextClassificationPipeline at 0x15ac5f6d0&gt;</code></pre>
</div>
</div>
<p>We can see the <code>classifier</code> is a type of <code>TextClassification</code> pipeline. This makes sense: we fed it an input sentence and asked it to classify the statement as <em>positive</em> vs.&nbsp;<em>negative</em>.</p>
<p>There is also a tab-autocomplete feature to find the members and methods of an object. For example, to look up everything in <code>classifier</code>, hit tab after adding a <code>.</code>.</p>
<p>Uncomment the cells below and hit the tab key to test the auto-complete feature.</p>
<div id="cell-95" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## tab after the `.` to auto-complete all variables/methods</span></span>
<span id="cb38-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># classifier.</span></span></code></pre></div>
</div>
<p>Let’s say you vaguely remember the name of a variable or function, say for example the <code>forward()</code> method. In that case you can type the first few letters and hit tab to auto-complete the full set of options:</p>
<div id="cell-97" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## tab after the `.for` to auto-complete the rest of the options</span></span>
<span id="cb39-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># classifier.for</span></span></code></pre></div>
</div>
<section id="asking-questions-and" class="level2">
<h2 class="anchored" data-anchor-id="asking-questions-and">Asking questions: <code>?</code> and <code>??</code></h2>
<p>Lastly, we can literally interrogate an object in Jupyter for more information.</p>
<p>If we tag a single <code>?</code> after an object, we’ll get its basic documentation (docstring). Note that we omit it here to keep the notebook from getting too busy.</p>
<div id="cell-100" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## the power of asking questions</span></span>
<span id="cb40-2">classifier?</span></code></pre></div>
</div>
<p>If we tag on <em>two</em> question marks: <code>??</code>, then we get the full source code of the object:</p>
<div id="cell-102" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## really curious about classifier</span></span>
<span id="cb41-2">classifier??</span></code></pre></div>
</div>
<p>Both <code>?</code> and <code>??</code> are excellent and quick ways to look under the hood of any object in Jupyter.</p>
</section>
<section id="inspecting-a-specific-classifier-function" class="level2">
<h2 class="anchored" data-anchor-id="inspecting-a-specific-classifier-function">Inspecting a specific <code>classifier</code> function</h2>
<p>Let’s take a look at the function that does the heavy lifting for our sentiment analysis task: <code>forward()</code>.</p>
<div id="cell-106" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># looking at what actually runs the inputs</span></span>
<span id="cb42-2">classifier.forward</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>&lt;bound method Pipeline.forward of &lt;transformers.pipelines.text_classification.TextClassificationPipeline object at 0x15ac5f6d0&gt;&gt;</code></pre>
</div>
</div>
<p>What does this function actually do? Let’s find out.</p>
<div id="cell-108" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># source code of the forward function</span></span>
<span id="cb44-2">classifier.forward??</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Signature: classifier.forward(model_inputs, **forward_params)
Docstring: &lt;no docstring&gt;
Source:   
    def forward(self, model_inputs, **forward_params):
        with self.device_placement():
            if self.framework == "tf":
                model_inputs["training"] = False
                model_outputs = self._forward(model_inputs, **forward_params)
            elif self.framework == "pt":
                inference_context = self.get_inference_context()
                with inference_context():
                    model_inputs = self._ensure_tensor_on_device(model_inputs, device=self.device)
                    model_outputs = self._forward(model_inputs, **forward_params)
                    model_outputs = self._ensure_tensor_on_device(model_outputs, device=torch.device("cpu"))
            else:
                raise ValueError(f"Framework {self.framework} is not supported")
        return model_outputs
File:      ~/mambaforge/envs/llm_base/lib/python3.11/site-packages/transformers/pipelines/base.py
Type:      method</code></pre>
</div>
</div>
<p>We can see that it automatically handles whether we’re running a TensorFlow (<code>tf</code>) or PyTorch (<code>pt</code>) model. Then, it makes sure the tensors are on the correct device. Lastly is calls another function, <code>_forward()</code> on the prepared inputs.</p>
<p>We can follow the rabbit hole as far down as needed. Let’s take a look at the source of <code>_forward</code>.</p>
<div id="cell-110" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># going deeper</span></span>
<span id="cb46-2">classifier._forward??</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Signature: classifier._forward(model_inputs)
Docstring:
_forward will receive the prepared dictionary from `preprocess` and run it on the model. This method might
involve the GPU or the CPU and should be agnostic to it. Isolating this function is the reason for `preprocess`
and `postprocess` to exist, so that the hot path, this method generally can run as fast as possible.

It is not meant to be called directly, `forward` is preferred. It is basically the same but contains additional
code surrounding `_forward` making sure tensors and models are on the same device, disabling the training part
of the code (leading to faster inference).
Source:   
    def _forward(self, model_inputs):
        # `XXXForSequenceClassification` models should not use `use_cache=True` even if it's supported
        model_forward = self.model.forward if self.framework == "pt" else self.model.call
        if "use_cache" in inspect.signature(model_forward).parameters.keys():
            model_inputs["use_cache"] = False
        return self.model(**model_inputs)
File:      ~/mambaforge/envs/llm_base/lib/python3.11/site-packages/transformers/pipelines/text_classification.py
Type:      method</code></pre>
</div>
</div>
<p>Ah, we can see it calls the <code>model</code> of the classifier. This is the <code>distilbert</code> model we saw earlier! Now we can peek under the hood at the actual Transformer LLM.</p>
<div id="cell-112" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the distilbert sentiment analysis model</span></span>
<span id="cb48-2">classifier.model</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>DistilBertForSequenceClassification(
  (distilbert): DistilBertModel(
    (embeddings): Embeddings(
      (word_embeddings): Embedding(30522, 768, padding_idx=0)
      (position_embeddings): Embedding(512, 768)
      (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
      (dropout): Dropout(p=0.1, inplace=False)
    )
    (transformer): Transformer(
      (layer): ModuleList(
        (0-5): 6 x TransformerBlock(
          (attention): MultiHeadSelfAttention(
            (dropout): Dropout(p=0.1, inplace=False)
            (q_lin): Linear(in_features=768, out_features=768, bias=True)
            (k_lin): Linear(in_features=768, out_features=768, bias=True)
            (v_lin): Linear(in_features=768, out_features=768, bias=True)
            (out_lin): Linear(in_features=768, out_features=768, bias=True)
          )
          (sa_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
          (ffn): FFN(
            (dropout): Dropout(p=0.1, inplace=False)
            (lin1): Linear(in_features=768, out_features=3072, bias=True)
            (lin2): Linear(in_features=3072, out_features=768, bias=True)
            (activation): GELUActivation()
          )
          (output_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
        )
      )
    )
  )
  (pre_classifier): Linear(in_features=768, out_features=768, bias=True)
  (classifier): Linear(in_features=768, out_features=2, bias=True)
  (dropout): Dropout(p=0.2, inplace=False)
)</code></pre>
</div>
</div>
<p>We will breakdown the different pieces in this model later on in the course.</p>
<p>The important takeaway for now is that this shows the main structure of most Transformer LLM models. The changes are mostly incremental from this foundation.</p>


</section>
</section>

 ]]></description>
  <category>fractal</category>
  <category>python</category>
  <category>LLM</category>
  <guid>https://enzokro.dev/blog/posts/fractal-llms/03-hf-nlp-models/</guid>
  <pubDate>Sat, 07 Oct 2023 04:00:00 GMT</pubDate>
  <media:content url="https://enzokro.dev/blog/posts/fractal-llms/03-hf-nlp-models/llama.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Lessong 2: Blogging with nbdev</title>
  <dc:creator>Chris Kroenke</dc:creator>
  <link>https://enzokro.dev/blog/posts/fractal-llms/02-nbdev/</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>Making a personal blog course using nbdev.</p>
</blockquote>
<section id="intro" class="level1">
<h1>Intro</h1>
<p>The main goal of this lesson is to set up a personal blog for this course. The blog is where you will chronicle your learnings and challenges throughout the course. From the course syllabus:</p>
<p>This is a public-facing course. Students should write about their journey to both cement and track their progress.</p>
<p>Publishing is a powerful tool for learning since it casts a piece of work under a new, critical light. Your understanding of a topic is also crystallized by seeing other’s work, highlighted from different angles.</p>
<p>Blogging out in the open can be scary, but here we aim to make it as easy and helpful as possible.</p>
<p>On the topic of blogging and publishing being scary or intimidating: try to focus on writing snippets or summaries about what you’re currently learning. Then, pretend that you’re writing the article you <em>wish</em> you had when first learning about the topic. The first articles are the hardest, to be sure. Once you’ve gotten into the flow with the hints above, other longer articles will flow more easily.</p>
</section>
<section id="the-nbdev-framework" class="level1">
<h1>The <code>nbdev</code> framework</h1>
<p>We will setup our blog using <a href="https://nbdev.fast.ai/"><code>nbdev</code></a>. It is a great tool for creating powerful applications. <code>nbdev</code>’s core idea is that a project’s code, documentation, and tests should exist together as a unified, interactive document.</p>
<p><code>nbdev</code> is inspired by two paradigms in the coding world:<br>
- <a href="https://en.wikipedia.org/wiki/Literate_programming">Literate Programming</a><br>
- <a href="https://en.wikipedia.org/wiki/Exploratory_programming">Exploratory Programming</a></p>
<p>Feel free to take some time now and click on the links above to learn more about these paradigms.</p>
<p>Now, let’s go over these two ideas and explore why their combination is so powerful.</p>
<section id="literate-programming" class="level2">
<h2 class="anchored" data-anchor-id="literate-programming">Literate Programming</h2>
<p>In Literate Programming, comments and tests are woven directly into a project’s source code. The original idea was proposed by <a href="https://en.wikipedia.org/wiki/Donald_Knuth">Donald Knuth</a> in 1984. Having all of pieces together a single, interactive document makes for better, more readable code and a more cohesive project overall.</p>
<p>The code, documentation, and tests are all first-class citizens in Literate Programming. This is very different from the typical approach to software where tests and documentation live in a separate set of files.</p>
<p>In <code>nbdev</code>, a <a href="https://docs.jupyter.org/en/latest/">Jupyter Notebook</a> is the single source of truth for code, documentation, and tests. Instead of managing three independent groups of files, everything is defined and happens in the Notebook. If the Notebook runs, then you know your code will run.</p>
</section>
<section id="exploratory-programming" class="level2">
<h2 class="anchored" data-anchor-id="exploratory-programming">Exploratory Programming</h2>
<p>Exploratory Programming is an open-ended approach for tackling new problems and unknown domains. It’s very useful at the start of a project, while the scope and requirements are still being fleshed out. And it can highlight different angles on a known, established approach by casting it under a new light.</p>
<p>Notebooks are both dynamic and interactive which makes them perfect for Exploratory Programming. The barrier for trying new things in a notebook is extremely low. And they’re downright fun!</p>
<p>The video below is an incredible talk by Bret Victor about the power of Exploratory Programming, with stunning examples throughout to drive the point home. If these short snippets weren’t enough to sell you on the idea, the talk certainly will.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/PUv66718DII?si=rPbY3LL6kQw-4yUa" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
</section>
<section id="combining-literate-and-exploratory-programming" class="level2">
<h2 class="anchored" data-anchor-id="combining-literate-and-exploratory-programming">Combining Literate and Exploratory Programming</h2>
<p><code>nbdev</code> combines these two ideas. We covered why this is a powerful combination in the <a href="https://enzokro.dev/blog/posts/fractal-llms/00-Overview/#course-philosophy">Course Philosophy</a> section of the syllabus. Please take a moment to re-read with the new context from above.</p>
<p>With this combo, we can interactively learn about and explore how a piece of code works. We can easily follow any hint of curiosity since iterations are fast and cheap. And we can now develop code in a much more dynamic way than usual.</p>
<p>These ideas can be doled out on the fly. For example, at the start of a project we could lean Exploratory to map out the problem space. Then, as the idea matures, we can pivot to Literate to refine our approach.</p>
<p>And the best part is that if anything breaks, we can always restart the Notebook and try again. It’s like clearing out the whiteboard and taking another pass at the problem.</p>
<p>We’ve talked a big game about what <code>nbdev</code> can do for writing great software projects. Now, to get back on track, let’s look at how <code>nbdev</code> can turn Notebooks into our future blog posts.</p>
</section>
</section>
<section id="turning-notebooks-into-blog-posts" class="level1">
<h1>Turning Notebooks into Blog Posts</h1>
<p>First, a high-level look at the process we will follow to setup our blog:</p>
<p><strong>High-Level Steps</strong><br>
1. Create a new <code>nbdev</code> project.<br>
2. Make a blog inside the project.<br>
3. Publish and host the blog for free on Github Pages.</p>
<p><code>nbdev</code> relies on the <a href="https://quarto.org/">Quarto framework</a> to publish blogs. Quarto is a framework for writing beautiful technical and scientific articles. In a way, it’s a blogging platform for Literate Programming, where a series of code and comments lead the reader on a journey.</p>
<p>The picture below from the official Quarto site gives shows what the framework is all about.</p>
<p><img src="https://enzokro.dev/blog/posts/fractal-llms/02-nbdev/quarto.png" class="img-fluid"></p>
<section id="creating-a-new-nbdev-project" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-new-nbdev-project">Creating a new <code>nbdev</code> project</h3>
<p><code>nbdev</code> works on top of a Git repo. That means our first step is creating a new, empty repository. Here is a <a href="https://github.com/new">handy Github link</a> that takes us straight to the page for creating new repos.</p>
<blockquote class="blockquote">
<p>Note: We need a completely empty repo. Don’t include a <code>.gitignore</code> or <code>README.md</code>.</p>
</blockquote>
<p>In this example the empty repo is called <code>sample_blog</code>, but feel free to call it anything you’d like. We’re not tied to this name. We can always make new repos with different, better names.</p>
<p>Clone the new, empty repo to your computer. Make sure to change the github link below so it points to your repo instead.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clone the repo to your computer</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> clone https://github.com/enzokro/sample_blog.git <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &lt;-- ! link with your repo here</span></span></code></pre></div>
<p>Now we can move into this repo and let <code>nbdev</code> work its initialization magic. Run the <code>nbdev_new</code> command to get started. The command will prompt you for some general info, like a short description about the project.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># move into the new repo and initialize the nbdev project</span></span>
<span id="cb2-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> sample_blog/</span>
<span id="cb2-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">nbdev_new</span></span></code></pre></div>
<blockquote class="blockquote">
<p>Note: All of the options and configs for the project are in the <code>settings.ini</code> file. <code>nbdev</code> looks in this file when it needs any information for its commands.</p>
</blockquote>
<p>After <code>nbdev_new</code> finishes, we will have a brand new <code>nbdev</code> project!</p>
<p>Run a <code>git status</code> command to see everything that was added. Then we commit and push these changes to Github.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add, commit, and push the files created by nbdev</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> add .</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Initial nbdev project creation'</span></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> push</span></code></pre></div>
<p>As mentioned earlier, <code>nbdev</code> publishes notebooks using Quarto. Let’s now take a look at how to turn this project into a full Quarto blog.</p>
</section>
<section id="adding-quarto-to-the-mix" class="level3">
<h3 class="anchored" data-anchor-id="adding-quarto-to-the-mix">Adding Quarto to the Mix</h3>
<p>Start by activating the virtual environment from the previous <a href="link_tbd">Environment Setup Notebook</a>:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># activate the environment</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate llm_base</span></code></pre></div>
<p><code>nbdev</code> comes with a built-in command to install quarto: <code>nbdev_install_quarto</code>. Note that the command will ask for admin privileges.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install quarto </span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">nbdev_install_quarto</span></span></code></pre></div>
<p>You may need to refresh the terminal before it can see the newly installed <code>quarto</code> binary. To be safe, open up a new terminal and re-activate the environment. Then the command below will check if Quarto was installed successfully.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shows us where quarto was installed</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span> quarto </span></code></pre></div>
<p>Now that Quarto is installed, let’s turn our fresh nbdev project into an actual blog.</p>
<section id="turn-an-nbdev-project-into-a-quarto-blog" class="level4">
<h4 class="anchored" data-anchor-id="turn-an-nbdev-project-into-a-quarto-blog">Turn an <code>nbdev</code> project into a Quarto blog</h4>
<p>In an <code>nbdev</code> project the Notebooks usually live inside the <code>nbs/</code> folder. These Notebooks eventually become a project’s code source, tests, and documentation.</p>
<p>For Quarto to instead publish Notebooks as blog posts, we need to add a few files and folders to the <code>nbs/</code> folder.</p>
<p>Below is the structure for a <code>nbs/</code> folder that’s been primed for its blog post.</p>
<p><strong>Initial Structure for Quarto Blog</strong>:</p>
<pre><code>sample_blog
└───nbs/
│   │   _quarto.yml
│   │   index.ipynb
│   └───blog/
│       │   index.qmd
│       └───posts/
│           └───2023-09-27-Blog-Intro/     
│               │   index.ipynb</code></pre>
<p>The main change is adding a <code>blog/</code> folder inside of the <code>nbs/</code> directory. Inside, at its top level, we place an <code>index.qmd</code> file that tells Quarto about our blog. Here’s example <code>index.qmd</code> file that titles our blog and describes how posts will be listed:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb8-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Example Blog</span></span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtitle</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Publishing with Quarto and nbdev</span></span>
<span id="cb8-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">listing</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date desc"</span></span>
<span id="cb8-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contents</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"posts"</span></span>
<span id="cb8-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort-ui</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb8-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter-ui</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb8-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">categories</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb8-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">feed</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb8-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">page-layout</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> full</span></span>
<span id="cb8-12"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span></code></pre></div>
<p>To stay better organized, each post will get its in folder. An <code>index.ipynb</code> Notebook inside each folder will have the post’s actual content. We can also put photos, videos, or any other assets to enhance a post into this folder.</p>
<p>As a working example, we are going a bit meta and using this Notebook itself as <code>index.ipynb</code> in the folder called <code>2023-09-27-Blog-Intro/</code>.</p>
<p>In other words this Notebook will also be our first blog post.</p>
</section>
<section id="hosting-the-blog-on-github-pages" class="level4">
<h4 class="anchored" data-anchor-id="hosting-the-blog-on-github-pages">Hosting the Blog on Github Pages</h4>
<p>The site will be hosted on Github’s <a href="https://pages.github.com/">Pages platform</a>. This is a built-in feature offered by Github and we can leverage it by changing a few settings. The screenshot below shows the to configure the repo so it can be published as a blog.</p>
<p><img src="https://enzokro.dev/blog/posts/fractal-llms/02-nbdev/github_pages.png" class="img-fluid"></p>
<p>Specifically, we need to set the <code>Deploy from a branch</code> option under the <code>Build and deployment section</code>. Then, we pick the <code>gh-pages</code> branch as the branch to deploy from. <code>gh-pages</code> is a special branch where nbdev parses our Notebooks into a proper Quarto website.</p>
<p>Next, run the <code>quarto publish</code> command to build and publish the blog.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># publish the blog on github pages</span></span>
<span id="cb9-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">quarto</span> publish</span></code></pre></div>
<p>And there we go! We created and published our first blog post using <code>nbdev</code>. <a href="https://enzokro.dev/blog/posts/2023-09-27-Session_1_nbdev/">Click here</a> for a live link to this Notebook as a blog post.</p>
</section>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>This Notebook covered how to create and publish a blog. We used <code>nbdev</code> to build the blog and Quarto to publish it. We also showed how the mix of Literate and Exploratory Programming is a powerful approach to both research and thinking in general.</p>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ul>
<li><a href="https://nbdev.fast.ai/tutorials/tutorial.html#installation">Official nbdev tutorial</a></li>
<li><a href="https://nbdev.fast.ai/tutorials/blogging.html">Blogging with nbdev</a></li>
</ul>


</section>
</section>

 ]]></description>
  <category>fractal</category>
  <category>python</category>
  <category>nbdev</category>
  <guid>https://enzokro.dev/blog/posts/fractal-llms/02-nbdev/</guid>
  <pubDate>Thu, 05 Oct 2023 04:00:00 GMT</pubDate>
  <media:content url="https://enzokro.dev/blog/posts/fractal-llms/02-nbdev/nbdev_pic.png" medium="image" type="image/png" height="66" width="144"/>
</item>
<item>
  <title>Lesson 1: A Python Environment for LLMs</title>
  <dc:creator>Chris Kroenke</dc:creator>
  <link>https://enzokro.dev/blog/posts/fractal-llms/01-env/</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>Creating an Large Language Model (LLM) python environment with <code>mamba</code> and <code>pip</code></p>
</blockquote>
<section id="intro" class="level1">
<h1>Intro</h1>
<p>The first thing we need to run an open-source LLM is a <code>programming environment</code> for the model. An environment is a programming ecosystem with all of the software libraries and packages that the LLM needs.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Setting up an environment is one of the most time-consuming and challenging tasks in Machine Learning. There is no silver bullet, as we can see by the multiple tools and approaches available to tackle the problem.</p>
</div>
</div>
<p>It is ok to struggle or feel lost when setting up the environment! That is very normal and even expected. There is a good reason for all of the memes in the ML community about what a pain it is to deal with CUDA drivers…</p>
<p>Take some comfort in the fact that once we build the environment, most of the other tasks will feel easy by comparison.</p>
<p>In this notebook we create a useful starter environment. An environment we can use to prototype ML models, write blog posts, explore python code, make plots, etc.</p>
<p>The goal is to have a powerful launch pad for learning and experimenting. Down the road, we can make leaner environments focused on more specific apps.</p>
<p>Now, let’s start building our python LLM environment.</p>
</section>
<section id="the-base-environment-mamba" class="level1">
<h1>The Base Environment: <code>mamba</code></h1>
<p>There are many tools to create python environments. In this course, we will use <code>mamba</code> to make and manage our environments.</p>
<p><code>mamba</code> is is a highly optimized C++ wrapper build around the very popular <a href="https://docs.conda.io/en/latest/">Conda package manager</a>.</p>
<p>If you are familiar with Anaconda, then you already know mamba by proxy. Any call to <code>conda</code> can be drop-in replaced with a call to <code>mamba</code> instead.</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p><em>A conda horror story</em>: Once I ran a simple <code>conda</code> command on a GPU cluster that took more than a day to complete. The same <code>mamba</code> command finished in less than 10 minutes.</p>
<p>Conda’s stability can change a lot between versions, whereas mamba tends to remain fast and reliable.</p>
</div>
</div>
<section id="installing-mamba" class="level2">
<h2 class="anchored" data-anchor-id="installing-mamba">Installing <code>mamba</code></h2>
<p>There is a mamba installation script that handles all of the setup for us. But in case you run into any issues, here is a link to the <a href="https://github.com/conda-forge/miniforge#install">official installation instructions</a>.</p>
<p>In the cells below we install mamba on a Mac computer.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>The installation steps are identical for Linux, but they change a bit for Windows.</p>
</div>
</div>
<section id="mamba-on-mac" class="level3">
<h3 class="anchored" data-anchor-id="mamba-on-mac"><code>mamba</code> on Mac</h3>
<p>There are many mamba installation scripts for different computers and OSes. How do we know which script is right for us? Here is where the handy <code>uname</code> shell command comes to the rescue.</p>
<p><code>uname</code> tells use about the computer and system it is running from. This information lets us automatically grab the correct installation script for our specific Mac.</p>
<p>Run the bash commands below to do the following:<br>
- Find the appropriate mamba Mac installation script.<br>
- Download the script from the official mamba repo.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># find the name of the appropriate installation script</span></span>
<span id="cb1-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">script_name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mambaforge-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uname</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uname</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.sh"</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mamba repo url with all the installation scripts</span></span>
<span id="cb1-5"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">script_repo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/conda-forge/miniforge/releases/latest/download/"</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># download the appropriate script</span></span>
<span id="cb1-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-L</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-O</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${script_repo}</span>/<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${script_name}</span></span></code></pre></div>
<p>Note that this command downloads the script into the directory that you’re running it from.</p>
<p>Next, we can run the downloaded shell script to install mamba.</p>
<p>The script will step through all of installation steps. It will prompt you for some info along the way, but we can accept all of the defaults for now (i.e.&nbsp;don’t type anything in, just hit enter).</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run the Mambaforge installer</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bash</span> Mambaforge-<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uname</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span>-<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uname</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span>.sh</span></code></pre></div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you prefer to download the script directly, grab it from here: https://github.com/conda-forge/miniforge/releases/</p>
</div>
</div>
<p>Once <code>mamba</code> is installed, we are ready to create a base python environment.</p>
</section>
</section>
</section>
<section id="creating-a-mamba-python-environment" class="level1">
<h1>Creating a <code>mamba</code> python environment</h1>
<p>We can use <code>mamba</code> to install a specific version of python. As of writing, python versions 3.10 and 3.11 are popular with the ML community.</p>
<p>Our LLM environment will be called, quite creatively, <code>llm-env</code>.</p>
<p>Let’s now use mamba to create the environment with python 3.11.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the `llm-env` python 3.11 environment</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> llm-env python=3.11</span></code></pre></div>
<p>Now that we have a base environment, we can activate it and start installing the python packages we need to run LLMs.</p>
<section id="bringing-in-pip" class="level2">
<h2 class="anchored" data-anchor-id="bringing-in-pip">Bringing in <code>pip</code></h2>
<p>We could install all of the needed python libraries with mamba. However, we will use python’s built in <code>pip</code> package manager instead.</p>
<p>Some folks might understandable gripe with this choice. After hyping up <code>mamba</code> so much, why would we bring in another package amanger?</p>
<p>The reason is because we’re relying on some new and state-of-the-art libraries. Some of these libraries are not always available via mamba. And, more than that, sometimes the repos need extra installation steps which are better handled through <code>pip</code>.</p>
<p>To recap: we are bringing in <code>pip</code> because if offers more flexibility than mamba when installing bleeding edge LLM libraries.</p>
<p>First, make sure that the new <code>llm-env</code> environment is activated. Then we’ll install a few basic libraries that just about all LLM applications need.</p>
<section id="installing-pytorch" class="level3">
<h3 class="anchored" data-anchor-id="installing-pytorch">Installing pytorch</h3>
<p>The main library we need is <code>pytorch</code>. PyTorch does most of the heavy lifting for Neural Networks in python.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install the pytorch libraries</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch</span></code></pre></div>
<p>Note that this command also installs all of the additional libraries that <code>pytorch</code>’s depends on.</p>
</section>
<section id="installing-helper-libraries" class="level3">
<h3 class="anchored" data-anchor-id="installing-helper-libraries">Installing helper libraries</h3>
<p>We will also install some helper libraries for the rest of the course. We also install the popular scientific package scipy, which many ML libraries rely on.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install the jupyter notebook library</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install jupyterlab</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install matplotlib for drawing plots</span></span>
<span id="cb5-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install matplotlib</span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># library for writing blogs</span></span>
<span id="cb5-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install nbdev </span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># helpful python utilities</span></span>
<span id="cb5-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install fastcore</span>
<span id="cb5-12"></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a powerful scientific library</span></span>
<span id="cb5-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install scipy </span></code></pre></div>
</section>
<section id="aside-installing-rust" class="level3">
<h3 class="anchored" data-anchor-id="aside-installing-rust">Aside: Installing Rust</h3>
<p>Many LLMs rely on the <code>Rust</code> programming language for fast and optimized tokenizers. Run the command below to install Rust on your system and leverage these optimized tokenizers:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install Rust</span></span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--proto</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'=https'</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--tlsv1.2</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-sSf</span> https://sh.rustup.rs <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sh</span></span></code></pre></div>
</section>
<section id="installing-huggingface-libraries" class="level3">
<h3 class="anchored" data-anchor-id="installing-huggingface-libraries">Installing <a href="https://huggingface.co/">HuggingFace</a> libraries</h3>
<p>Next up, we install a suite of HuggingFace libraries. These libraries let us fully leverage the powerful tools offered by the HuggingFace team.</p>
<p>We won’t use all of them initially, but they will be available should you ever need them in other, personal projects.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install the main LLM library</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install transformers</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># library for optimized LLM training </span></span>
<span id="cb7-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install accelerate</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># library for optimized LLM inference</span></span>
<span id="cb7-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install optimum</span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># quick access to great data utilities</span></span>
<span id="cb7-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install datasets</span>
<span id="cb7-12"></span>
<span id="cb7-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install an optimized tokenizer library</span></span>
<span id="cb7-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install setuptools-rust</span>
<span id="cb7-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install tiktoken</span></code></pre></div>
<p>Congrats! We have now created a powerful python environment for LLMs. We will use this <code>llm-env</code> going forward in the rest of the course.</p>
</section>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>This notebook covered the basics of setting up a python environment for LLMs. We used the <code>mamba</code> package manager to install a basic python environment. Then, we used <code>pip</code> to install a set of libraries for running and learning about LLMs.</p>
<p>There are two appendixes below. The first appendix goes into more details about why creating environments is challenging, and why we even need them in the first place.</p>
<p>The second appendix covers how to install NVIDIA’s GPU libraries on a fresh Ubuntu 22.04 machine. If you are running this on a Linux machine, the second appendix also installs some powerful CUDA-only libraries that speed up LLMs even more. We will come back to this section later in the course when fine-tuning and augmenting our LLMs.</p>
</section>
<section id="appendix-1-silent-failures-in-ml-models" class="level1">
<h1>Appendix 1: Silent Failures in ML Models</h1>
<p>LLMs, and Machine Learning models in general, often fail in different ways than other software. For instance, classic bugs in regular software are things like: type mismatches, syntax errors, compilation errors, etc. In other words, failures that stem from a clearly <em>wrong</em> operation (aka a bug) that snuck into the code. We wanted the computer to do <code>X</code>, but we told it by accident to do <code>Y</code> instead.</p>
<p>In contrast, ML models often have “silent” failures. There is no syntax or compilation error - the program still runs and completes fine. But, there is <em>something</em> wrong in the code: adding where we should have subtracted, grabbing the wrong element from a list, or using the wrong mathematical function. There is no type checker or compiler that would (or even could, for now) catch these errors.</p>
<p>The fixes for these silent failures are clear:<br>
- Carefully inspect the code.<br>
- Monitor and validate the model’s inputs and outputs.<br>
- Clarity in both the algorithms and models we are running.</p>
<p>There is another, unfortunate kind of silent failure: version mismatches.</p>
<p>Version mismatches happen when we use a programming library with a different version than the one the model was originally trained with.</p>
<p>Since the software libraries we rely on are updated frequently, both subtle and major changes in their internals can affect a model’s output. These failures are unfortunately immune to our careful, logical checks.</p>
<p>Avoiding these silent failures is the main reason for being consistent and disciplined with our model’s programming environment. A good environment setup keeps us focused on the important, conceptual parts of our pipeline instead of getting bogged down managing software versions.</p>
<section id="an-environment-for-the-future" class="level2">
<h2 class="anchored" data-anchor-id="an-environment-for-the-future">An environment for the future</h2>
<p>There is a nice benefit to spending this much time up front on our environment.</p>
<p>Not only do we now have a specialized environment to run and fine-tune an LLM. But, it is also a springboard to keep up with the state of the art in the field. We now have a way to bring in other groundbreaking improvements as they are released. And, a way to weave in the latest and greatest models. The LLM world is now our oyster, and <code>llm-env</code> the small grain of sand pearl-in-waiting.</p>
</section>
</section>
<section id="appendix-2-installing-nvidia-drivers-and-cuda-libraries-on-a-fresh-ubuntu-22.04-machine" class="level1">
<h1>Appendix 2: Installing NVIDIA Drivers and CUDA Libraries on a fresh Ubuntu 22.04 machine</h1>
<p>There are three things we need to install to run ML models on NVIDIA GPUs:<br>
- NVIDIA Drivers.<br>
- CUDA Libraries.<br>
- cuDNN Libraries.</p>
<p>Folks often talk about “CUDA” as a loose mix of all three.</p>
<p>However, it’s important to keep things clear and separate. Let’s use a music analogy to help us along: imagine the GPU is an instrument, and running an LLM is like playing a song.</p>
<p>The NVIDIA Drivers let us pick up the instrument (GPU) with our hands and get ready to play. It’s the first step in making any music at all.</p>
<p>The CUDA libraries are the basic music theory (scales, chords, etc) and sheet reading that we need to play songs well.</p>
<p>The cuDNN library is like a set of advanced skills and muscle memory, built on top of lots of practice, that let us really shred on the instrument.</p>
<p>With this in mind, let’s install the NVIDIA Drivers and CUDA libraries on a fresh Ubuntu 22.04 machine.</p>
<section id="helper-libraries" class="level2">
<h2 class="anchored" data-anchor-id="helper-libraries">Helper libraries</h2>
<p>First, some best practice for system administration: make sure to update the Ubuntu package list:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the ubuntu package list</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt update</span></code></pre></div>
<p>There are two Ubuntu packages that are worth installing:<br>
- software-properties-common - build-essential</p>
<p><code>software-properties-common</code> includes a set of tools for adding and managing software repositories. It makes our life a bit easier.</p>
<p><code>build-essential</code> has a list of packages that are critical for building Ubuntu software. It has tools like like the GNU Compiler Collection (GCC) and GNU Make that are key for development.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install useful linux packages</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install software-properties-common</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install build-essential</span></code></pre></div>
</section>
<section id="installing-nvidia-drivers" class="level2">
<h2 class="anchored" data-anchor-id="installing-nvidia-drivers">Installing NVIDIA Drivers</h2>
<p>We’ll use one of the most reliable and straightforward way of installing NVIDIA drivers: the graphics drivers PPA.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add the graphics drivers ppas</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> add-apt-repository ppa:graphics-drivers/ppa</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the package list again</span></span>
<span id="cb10-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt update</span></code></pre></div>
<p>Now we can run the command below to install the actual nvidia drivers. As of writing, the <code>535</code> version of the driver is stable and supports a good number of GPU cards.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install the nvidia drivers</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install nvidia-driver-535</span></code></pre></div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>After installing the drivers, make sure to reboot your system before going forward!</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># restart the system after installing the drivers</span></span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> reboot</span></code></pre></div>
</div>
</div>
<p>Once the machine is back up, run the following command to check if the drivers were installed correctly.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this should show us any available gpus</span></span>
<span id="cb13-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">nvidia-smi</span></span></code></pre></div>
</section>
<section id="installing-cuda" class="level2">
<h2 class="anchored" data-anchor-id="installing-cuda">Installing CUDA</h2>
<p>With the drivers working, we can now install the CUDA library. The CUDA library is a set of ML tools optimized for NVIDIA GPUs.</p>
<p>The example below uses a local <code>.dev</code> installer for CUDA version 12.1. The steps come straight from the official <a href="https://developer.nvidia.com/cuda-12-1-0-download-archive?target_os=Linux&amp;target_arch=x86_64&amp;Distribution=Ubuntu&amp;target_version=22.04&amp;target_type=deb_local">CUDA website</a>.</p>
<p>There is a lot going on in the steps below. But it has been, in my experience, one of the most straightforward and reliable ways to install specific CUDA versions.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># full steps to install CUDA 12.1 libraries </span></span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># setting up the repo</span></span>
<span id="cb14-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wget</span> https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin</span>
<span id="cb14-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> mv cuda-ubuntu2204.pin /etc/apt/preferences.d/cuda-repository-pin-600</span>
<span id="cb14-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wget</span> https://developer.download.nvidia.com/compute/cuda/12.1.0/local_installers/cuda-repo-ubuntu2204-12-1-local_12.1.0-530.30.02-1_amd64.deb</span>
<span id="cb14-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> dpkg <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> cuda-repo-ubuntu2204-12-1-local_12.1.0-530.30.02-1_amd64.deb</span>
<span id="cb14-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> cp /var/cuda-repo-ubuntu2204-12-1-local/cuda-<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>-keyring.gpg /usr/share/keyrings/</span>
<span id="cb14-9"></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># installing the libraries</span></span>
<span id="cb14-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt-get update</span>
<span id="cb14-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt-get <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> install cuda</span></code></pre></div>
<p>Here is a full breakdown of what the bash commands above did. Feel free to skim this list on a first pass. The key takeaway: these commands install CUDA version 12.1 on our system. 12.1 is the latest version of CUDA as of writing used in many of the bleeding edge LLM libraries:</p>
<ol type="1">
<li><p><strong>Download the Pinning File</strong>: Utilize <code>wget</code> to download the <code>cuda-ubuntu2204.pin</code> file from NVIDIA’s developer website. This file aids in managing APT preferences regarding the CUDA repository.</p></li>
<li><p><strong>Relocate and Rename the Pinning File</strong>: Move the downloaded <code>cuda-ubuntu2204.pin</code> file to the <code>/etc/apt/preferences.d/</code> directory, and rename it to <code>cuda-repository-pin-600</code>. This step ensures that APT recognizes the preferences for the CUDA repository.</p></li>
<li><p><strong>Fetch the CUDA Repository Package</strong>: Download the Debian package for setting up the CUDA repository on your system. Ensure to get the package corresponding to CUDA version 12.1 for Ubuntu 22.04.</p></li>
<li><p><strong>Deploy the CUDA Repository Package</strong>: Utilize <code>dpkg</code> to install the downloaded Debian package, which in turn sets up the CUDA repository on your system.</p></li>
<li><p><strong>Transfer the GPG Keyring File</strong>: Copy the GPG keyring file from the CUDA repository directory to your system’s keyrings directory. This file is crucial for verifying the authenticity of packages from the CUDA repository.</p></li>
<li><p><strong>Refresh the APT Package List</strong>: Instruct APT to update its list of available packages. This step incorporates the information from the newly added CUDA repository.</p></li>
<li><p><strong>Initiate CUDA Installation</strong>: Command APT to install the <code>cuda</code> package along with all its necessary dependencies from the CUDA repository. The <code>-y</code> flag is used to automate the process by affirming “yes” to any prompts encountered.</p></li>
</ol>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>After installing CUDA, we need to run the following lines to modify our <code>~/.bashrc</code> file. These changes make sure that we can actually see and find the newly installed CUDA libraries:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># modify paths so we can find CUDA binaries</span></span>
<span id="cb15-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'export PATH=/usr/local/cuda-12.1/bin${PATH:+:${PATH}}'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> ~/.bashrc</span>
<span id="cb15-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'export LD_LIBRARY_PATH=/usr/local/cuda-12.1/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> ~/.bashrc</span>
<span id="cb15-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> ~/.bashrc</span></code></pre></div>
<p>Then reboot the system on more time, with feeling:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> reboot</span></code></pre></div>
</div>
</div>
<p>Once the machine is back online, run the following command to check if CUDA was installed correctly:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this command shows us the CUDA version</span></span>
<span id="cb17-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">nvcc</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--version</span></span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # it should output something like this:</span></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   nvcc: NVIDIA (R) Cuda compiler driver</span></span>
<span id="cb17-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   Copyright (c) 2005-2023 NVIDIA Corporation</span></span>
<span id="cb17-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   Built on Tue_Feb__7_19:32:13_PST_2023</span></span>
<span id="cb17-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   Cuda compilation tools, release 12.1, V12.1.66</span></span>
<span id="cb17-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   Build cuda_12.1.r12.1/compiler.32415258_0</span></span></code></pre></div>
</section>
<section id="installing-accelerated-cuda-libraries-on-linux" class="level2">
<h2 class="anchored" data-anchor-id="installing-accelerated-cuda-libraries-on-linux">Installing accelerated CUDA libraries on Linux</h2>
<p>If you are running on a Linux machine, you’ll have access to many powerful libraries to speed up LLM training and inference. Not all of these are available on Mac or Windows, but hopefully that changes with time.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Here we also see the first instance of needing a <code>pip</code> install with extra steps - something we could not have done with <code>mamba</code> alone.</p>
</div>
</div>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install optimized CUDA LLM libraries</span></span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># library to massively speed up Transformer LLMs</span></span>
<span id="cb18-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install flash-attn <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-build-isolation</span></span>
<span id="cb18-5"></span>
<span id="cb18-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># library crucial for quantized LLMs</span></span>
<span id="cb18-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install bitsandbytes </span>
<span id="cb18-8"></span>
<span id="cb18-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># xformers library from Meta</span></span>
<span id="cb18-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-U</span> xformers <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cu121</span></code></pre></div>
<p>And that does it! Phew, we made it. After following the above, your Ubuntu 22.04 machine stands ready at the bleeding edge of LLMs.</p>


</section>
</section>

 ]]></description>
  <category>fractal</category>
  <category>python</category>
  <category>LLM</category>
  <guid>https://enzokro.dev/blog/posts/fractal-llms/01-env/</guid>
  <pubDate>Wed, 27 Sep 2023 04:00:00 GMT</pubDate>
  <media:content url="https://enzokro.dev/blog/posts/fractal-llms/01-env/mamba_logo.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Syllabus: Fractal-U Course on LLMs</title>
  <dc:creator>Chris Kroenke</dc:creator>
  <link>https://enzokro.dev/blog/posts/fractal-llms/00-Overview/</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>Overview and motivations for the Fractal-U LLM Course.</p>
</blockquote>
<section id="intro" class="level1">
<h1>Intro</h1>
<p>In this course, we will create our own AI Assistant. The assistant will be created by augmenting and fine-tuning an open-source Large Language Model (LLM).</p>
<p>So what exactly is an AI Assistant, and why would we want to make one?</p>
<p>There is a lot of hype around AI Assistants at the moment. Folks are imagining a future where we all have powerful, personalized helpers at our fingertips. These Assistants promise to make our lives easier and more comfortable. They will be the AIs of Science Fiction made manifest: TARS from Interstellar, HAL 9000 from Space Odyssey, Iron Man’s Jarvis, etc.</p>
<section id="realistic-assistants" class="level2">
<h2 class="anchored" data-anchor-id="realistic-assistants">Realistic Assistants</h2>
<p>Despite the breakneck speed of LLM progress, AI Assistants as powerful as those are still a ways off. The exact timelines are hard, if not impossible, to predict. For now it is safe to say that Assistants of that caliber won’t be here anytime “soon”. But, barring some force majeure, they <em>will</em> exist at some point.</p>
<p>The gap, then, is between the advanced Assistants folks are promising and dreaming about, and the LLM hallucinations and steep compute requirements we are still dealing with one the ground.</p>
</section>
<section id="building-an-ai-assistant" class="level2">
<h2 class="anchored" data-anchor-id="building-an-ai-assistant">Building an AI Assistant</h2>
<p>Where does that leave us? Well, as a recent announcement <a href="https://twitter.com/gdb/status/1694107518488981868">from OpenAI</a> shows, fine-tuning a GPT-3.5 model on small, clean datasets can even surpass GPT-4 on certain tasks.</p>
<p><em>That’s</em> what we are aiming for. In other words, we already have the ability to develop outrageously powerful tools by fine-tuning LLMs on small, clean datasets.</p>
<p>So while we won’t make Iron Man’s Jarvis, we are aiming for far more than a simple chatbot. Think of our Assistant like a smart Rubber Duck. For reference, a Rubber Duck is anything that you keep around your desk and talk to about your work. It is a physical tool for thought, since it’s so often helpful to speak out loud the swirl of thoughts inside our heads.</p>
<p>Our simple Assistant will be a Rubber Duck that we can talk to, and that talks back. When we ask it a question about our work, it will respond given what it knows about the project as a whole. Or, if we are simply verbalizing a thought to untangle it, the Assistant can give us feedback or suggest other ideas.</p>
<p>If we can be so bold: our Assistant will be a mini-Jarvis laser-focused on a specific task. Then, as both the tools and field progresses, we will have a full development stack ready to unlock even more capabilities from this smart Rubber Duck.</p>
<blockquote class="blockquote">
<p>Course Summary: We will fine-tune and augment an LLM on a small, clean dataset to build an Intelligent Rubber Duck.</p>
</blockquote>
</section>
</section>
<section id="course-overview" class="level1">
<h1>Course Overview</h1>
<p>Each lesson lives inside a Jupyter Notebook. The notebooks build on each other, but they are also self-contained and reviewable on their own.</p>
<p>Here is an outline of the lessons:</p>
<p><strong>1. Python environments for LLMs</strong></p>
<blockquote class="blockquote">
<p>Using mamba and pip to create isolated, reproducible python environments.</p>
</blockquote>
<p><strong>2. Blogging with nbdev</strong></p>
<blockquote class="blockquote">
<p>Setting up a blog with nbdev and github pages.</p>
</blockquote>
<p><strong>3. Running HuggingFace NLP models</strong></p>
<blockquote class="blockquote">
<p>Using the HuggingFace API to run NLP models.</p>
</blockquote>
<p><strong>4. Running optimized LLMs with llama.cpp</strong></p>
<blockquote class="blockquote">
<p>Running quantized, optimized LLMs.</p>
</blockquote>
<p><strong>5. Processing text documents for LLMs</strong></p>
<blockquote class="blockquote">
<p>Preparing text data for fine-tuning and Retrieval Augmented Generation (RAG)</p>
</blockquote>
<p><strong>6. Fine-tuning LLMs on a GPU</strong></p>
<blockquote class="blockquote">
<p>Scripts to efficiently fine-tune LLMs</p>
</blockquote>
<p><strong>7. Running fine-tuned LLMs locally on your phone</strong></p>
<blockquote class="blockquote">
<p>Deploying fine-tuned, quantized LLMs on mobile devices</p>
</blockquote>
<p>This is a public-facing course. Students should write about their journey to both cement and track their progress.</p>
<p>Publishing is a powerful tool for learning since it casts a piece of work under a new, critical light. Your understanding of a topic is also crystallized by seeing other’s work, highlighted from different angles.</p>
<p>Blogging out in the open can be scary, but here we aim to make it as easy and helpful as possible.</p>
</section>
<section id="course-philosophy" class="level1">
<h1>Course Philosophy</h1>
<p>Jupyter Notebooks are the modern, programming version of field journals. The inspirational samples from <a href="https://www.wired.com/2011/07/science-field-notes-gallery/">this Wired article</a> below show what science, at its best and most alive, can be:</p>
<p><img src="https://enzokro.dev/blog/posts/fractal-llms/00-Overview/field-notes-butterflies.jpg" class="img-fluid"> <img src="https://enzokro.dev/blog/posts/fractal-llms/00-Overview/field-notes-grinnell.jpg" class="img-fluid"> <img src="https://enzokro.dev/blog/posts/fractal-llms/00-Overview/field-notes-lynx.jpg" class="img-fluid"></p>
<p>Let’s focus on the last example: the field notes about a lynx. Notice that we’re not reading a long description of what a Lynx is <em>supposed</em> to look like. And we’re not looking at a series of diagrams without context either. We’re getting the best of both worlds: short and relevant descriptions right next to clear, working examples. Field notes bridge the gap between the written, theoretical and the actual, practical.</p>
<p>Notebooks can do for code what the field notes above did for the lynx. We can interactively show people the data, describe what’s being done, and make sure that the results are correct. We can even show any mistakes and struggles along the way.</p>
<p>This tight loop between what you’re doing (<em>code</em>), describing what you’re doing (<em>documentation</em>), and making sure it’s correct (<em>tests</em>) is a great way to approach research. More than that, it is an incredibly powerful way to communicate and share ideas.</p>
<p>Each lesson is like an interactive field journal. You should feel as if someone is walking you through an experiment, going step by step and talking through the process along the way. And you should feel like an active participant in the research: you can always modify a cell or insert new ones to try out your own ideas.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>This notebook introduced our goals and approach for the Fractal-U LLMs course. In summary, we will fine-tune and augment an open-source LLM to create a simple AI Assistant that can help us better learn and create.</p>
<p>Thank you for coming along on this journey! I promise that we will learn a ton, and have lots of fun along the way.</p>


</section>

 ]]></description>
  <category>fractal</category>
  <category>python</category>
  <category>LLM</category>
  <guid>https://enzokro.dev/blog/posts/fractal-llms/00-Overview/</guid>
  <pubDate>Mon, 25 Sep 2023 04:00:00 GMT</pubDate>
  <media:content url="https://enzokro.dev/blog/posts/fractal-llms/00-Overview/fractal-llm-mascot.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Tips for LLM prompts</title>
  <dc:creator>enzokro </dc:creator>
  <link>https://enzokro.dev/blog/posts/2023-04-17-llm-prompt-tips/</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>General tips to get better outputs from ChatGPT.</p>
</blockquote>
<p># Tips and tricks for ChatGPT Prompts</p>
<p>This post is a recap of openai’s suggestions (as of writing) for improving ChatGPT’s outputs.</p>
<p>There are many teams actively working on improving and deploying new LLMs with useful (powerful) abilities. Their work has produced several papers that show different ways of improving an LLM’s output.</p>
<p>The official openAI documentation has the full details and discussion of a few key papers.</p>
<p>However, we can also extract a broad set of suggestions based on what the different proposed improvements share in common.</p>
<section id="improving-outputs" class="level2">
<h2 class="anchored" data-anchor-id="improving-outputs">Improving outputs</h2>
<ul>
<li>Split large, complex tasks into subtasks
<ul>
<li>Structure and isolate the instructions of each subtask</li>
</ul></li>
<li>Prompt the model to explain its reasoning(s) before answering</li>
<li>If the output was bad, try making the instructions clearer
<ul>
<li>Start with simple and direct language</li>
<li>Can get more complex as the conversation and context grow</li>
</ul></li>
<li>Have the model generate many answers, then ask it to distill them into a single, best answer</li>
<li>If possible, Fine-tune custom models to maximize performance</li>
</ul>
</section>
<section id="generic-tips" class="level2">
<h2 class="anchored" data-anchor-id="generic-tips">Generic tips</h2>
<ul>
<li>Explicitly guide the model through the thought process
<ul>
<li>Helps it stay focused on sub-tasks and subprocesses</li>
</ul></li>
<li>“Let’s think step by step…”
<ul>
<li>Works best on logical, mathematical, and reasoning tasks</li>
<li>Possible leverage for other tasks by breaking them down into “logical” steps</li>
</ul></li>
<li>Give the model a few examples of the task you want (Few-Shot)</li>
<li>Split a question into two types of prompts and alternate between the two
<ul>
<li>Selection prompt -&gt; find the relevant pieces of into</li>
<li>Inference prompt -&gt; use the relevant pieces to generate the answer</li>
<li>Halter prompt -&gt; figure out when the alternating should halt, if possible add a value function to evaluate different prompts</li>
</ul></li>
<li>Reduce hallucinations by constraining what the model can say</li>
</ul>
</section>
<section id="api-tips" class="level2">
<h2 class="anchored" data-anchor-id="api-tips">API Tips</h2>
<ul>
<li>Give the model an identity that behaves in a certain way with an explicit intent</li>
<li>Ask to model to answer from the perspective of an expert</li>
<li>Try restating the original “system” message to keep the model on-task.</li>
<li>If the model is getting off-track, try reminding it of the instruction and context at the end of the prompt</li>
</ul>


</section>

 ]]></description>
  <category>LLM</category>
  <category>deep learning</category>
  <guid>https://enzokro.dev/blog/posts/2023-04-17-llm-prompt-tips/</guid>
  <pubDate>Mon, 17 Apr 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Stable Diffusion v2 with dynamic Classifier-free Guidance</title>
  <dc:creator>enzokro </dc:creator>
  <link>https://enzokro.dev/blog/posts/2022-11-28-sd-v2-schedules-1/</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>Running dynamic CFG with the Stable Diffusion v2 model.</p>
</blockquote>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This notebook is an initial exploration of dynamic Classifier-free Guidance using the new Stable Diffusion v2 model.</p>
<p>To leverage the best samplers, we also integrate the <a href="https://github.com/crowsonkb/k-diffusion/tree/master/k_diffusionhttps://github.com/crowsonkb/k-diffusion/tree/master/k_diffusion">k_diffusion</a> library.</p>
</section>
<section id="python-imports" class="level1">
<h1>Python imports</h1>
<p>We start with a few python imports.</p>
<div id="ea1e75a0-0d64-436f-b9d8-d641393dca3a" class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Callable, List, Dict</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.colors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mcolors</span></code></pre></div>
</div>
<div id="dca0a373-c7fd-4fb1-811a-fd261e6af29f" class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="cell-output cell-output-stderr">
<pre><code>2022-11-28 18:22:40.147192: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2022-11-28 18:22:40.869264: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory
2022-11-28 18:22:40.869333: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory
2022-11-28 18:22:40.869340: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.</code></pre>
</div>
</div>
<section id="seed-for-reproducibility" class="level2">
<h2 class="anchored" data-anchor-id="seed-for-reproducibility">Seed for reproducibility</h2>
<p><code>seed_everything</code> makes sure that the results are reproducible across notebooks.</p>
<div id="58d6c482-17da-41df-9605-4759b3281944" class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set the seed for rng</span></span>
<span id="cb3-2">SEED <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4191151944</span> </span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> seed_everything(seed: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> torch.Generator:</span>
<span id="cb3-4">    random.seed(seed)</span>
<span id="cb3-5">    os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PYTHONHASHSEED'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(seed)</span>
<span id="cb3-6">    np.random.seed(seed)</span>
<span id="cb3-7">    generator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.manual_seed(seed)</span>
<span id="cb3-8">    torch.backends.cudnn.deterministic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-9">    torch.backends.cudnn.benchmark <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> generator</span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for sampling the initial, noisy latents</span></span>
<span id="cb3-13">generator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seed_everything(SEED)</span></code></pre></div>
</div>
</section>
</section>
<section id="text-prompt-for-image-generations" class="level1">
<h1>Text prompt for image generations</h1>
<p>Negative prompts appear to be very helpful in <code>v2</code>. At least, more helpful than they were for <code>v1.x</code> models.</p>
<p>Below, we also borrow a prompt and negative-prompt format that’s going around the Stable Diffusion discord. It seems to be a good starting point as the community figures out the new prompt structures.</p>
<div id="9620a51c-3961-4c75-93af-9121d3938b62" class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># text prompt for image generations</span></span>
<span id="cb4-2">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"((a peaceful mountainside village in the Andes)), ((by Hayao Miyazaki)), studio lighting, High quality, professional, dramatic, cinematic movie still, very detailed, character art, concept art, focused, subsurface scatter"</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a good negative prompt</span></span>
<span id="cb4-5">neg_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ugly, tiling, poorly drawn hands, poorly drawn feet, poorly drawn face, out of frame, mutation, mutated, extra limbs, extra legs, extra arms, disfigured, deformed, cross-eye, body out of frame, blurry, bad art, bad anatomy, blurred, text, watermark, grainy"</span></span></code></pre></div>
</div>
</section>
<section id="image-and-sampler-parameters" class="level1">
<h1>Image and Sampler parameters</h1>
<p>The images will be generated over <img src="https://latex.codecogs.com/png.latex?30"> diffusion steps. It will be a rather large <code>1024 x 1024</code> output.</p>
<p>We are using the <code>DPM++ SDE Karras</code> sampler with 30 steps. This sampler seems to be working the best for high-quality outputs at the moment. The <code>2m Karras</code> schedule wins out on speed, however.</p>
<p>If the image is too large or the generation is too slow on your machine, I’d suggest bumping down to a <code>768 x 768</code> resolution and using the <code>k_dpmpp_2m</code> sampler instead.</p>
<div id="cb50e210-14ed-43a9-a44e-53bff5858db2" class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of diffusion steps</span></span>
<span id="cb5-2">num_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>    </span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># larger image dimensions</span></span>
<span id="cb5-5">height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 768</span></span>
<span id="cb5-6">width  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 768</span></span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set the k-diffusion scheduler</span></span>
<span id="cb5-9">use_k_diffusion  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k_dpmpp_sde'</span></span>
<span id="cb5-10">hf_scheduler_kls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dpm_multi'</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">NOTE</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: only used for alpha_cumprod at the moment</span></span>
<span id="cb5-11"></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># whether to use the Karras sigma schedule</span></span>
<span id="cb5-13">use_karras_sigmas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb5-14"></span>
<span id="cb5-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># group the argument for generate function</span></span>
<span id="cb5-16">gen_kwargs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb5-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height'</span>: height,</span>
<span id="cb5-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'width'</span>: width, </span>
<span id="cb5-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'negative_prompt'</span>: neg_prompt, </span>
<span id="cb5-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'steps'</span>: num_steps,</span>
<span id="cb5-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'use_karras_sigmas'</span>: use_karras_sigmas,</span>
<span id="cb5-22">}</span></code></pre></div>
</div>
</section>
<section id="gathering-stable-diffusion-models" class="level1">
<h1>Gathering Stable Diffusion models</h1>
<p>For now, the <code>k_diffusion</code> integration is only working with the full, <code>768-v</code> model. The plan is to eventually support the base model as well.</p>
<div id="67c5e34b-5be8-4579-b4cb-769f49aa9386" class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># group the different models to run</span></span>
<span id="cb6-3">diffusion_runs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb6-4"></span>
<span id="cb6-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stable Diffusion 2</span></span>
<span id="cb6-6">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'stabilityai/stable-diffusion-2'</span>,</span>
<span id="cb6-7">     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_kwargs'</span>: {</span>
<span id="cb6-8">         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'unet_attn_slice'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb6-9">         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scheduler_kls'</span>:   hf_scheduler_kls,</span>
<span id="cb6-10">         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'use_k_diffusion'</span>: use_k_diffusion,</span>
<span id="cb6-11">         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'generator'</span>:       generator,</span>
<span id="cb6-12">    }},</span>
<span id="cb6-13"></span>
<span id="cb6-14">]</span></code></pre></div>
</div>
</section>
<section id="creating-guidance-schedules" class="level1">
<h1>Creating Guidance schedules</h1>
<p>We create the Guidance schedules with the <code>cf_guidance</code> library.</p>
<p>However, it seems that our normalizations are broken in v2. This is likely due to the new <code>v-prediction</code> objective. So we avoid normalizations for now, and stick only with the <code>Inverse kDecay</code> schedules.</p>
<div id="1b0cacb1-b98f-47b2-965f-71c71d03b043" class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># helpers to create cosine schedules</span></span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cf_guidance.schedules  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_cos_sched</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># transformations for classifier-free guidance</span></span>
<span id="cb7-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cf_guidance.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GuidanceTfm <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#, BaseNormGuidance, TNormGuidance, FullNormGuidance</span></span></code></pre></div>
</div>
<section id="schedule-parameters" class="level3">
<h3 class="anchored" data-anchor-id="schedule-parameters">Schedule parameters</h3>
<p>Given how much the prompts have changed in v2, we are back in exploration territory as to what are the best parameters. Exciting times!</p>
<p>Overall, it seems that the Guidance range is broader in v2. Folks are getting good results with low CFGs (3-5) or with higher values (9+). This is likely highly dependent on both the prompt and negative-prompt. We should know more as the stability.ai team releases their guides and tips.</p>
<div id="a1c1a549-d3c5-43ff-a672-051f087a54b3" class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Default schedule parameters from the blog post</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">######################################</span></span>
<span id="cb8-3">baseline_g        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># default, static guidance value</span></span>
<span id="cb8-4">max_val           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the max scheduled guidance scaling value</span></span>
<span id="cb8-5">min_val           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the minimum scheduled guidance value</span></span>
<span id="cb8-6">num_warmup_steps  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of warmup steps</span></span>
<span id="cb8-7">warmup_init_val   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the intial warmup value</span></span>
<span id="cb8-8">num_cycles        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of cosine cycles</span></span>
<span id="cb8-9">k_decay           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># k-decay for cosine curve scaling </span></span>
<span id="cb8-10"></span>
<span id="cb8-11"></span>
<span id="cb8-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># group the default schedule parameters</span></span>
<span id="cb8-13">DEFAULT_COS_PARAMS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb8-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>:           max_val,</span>
<span id="cb8-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_steps'</span>:         num_steps,</span>
<span id="cb8-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_val'</span>:           min_val,</span>
<span id="cb8-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_cycles'</span>:        num_cycles,</span>
<span id="cb8-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k_decay'</span>:           k_decay,</span>
<span id="cb8-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_warmup_steps'</span>:  num_warmup_steps,</span>
<span id="cb8-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warmup_init_val'</span>:   warmup_init_val,</span>
<span id="cb8-21">}</span>
<span id="cb8-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">######################################</span></span></code></pre></div>
</div>
<p>The functions below quickly build different Guidance schedules. They are also re-used from the <a href="https://enzokro.dev/blog/posts/2022-11-26-guidance-expts-8/https://enzokro.dev/blog/posts/2022-11-26-guidance-expts-8/">previous notebooks</a>.</p>
<div id="27d6dfa1-eef5-4948-885d-5194cd44286c" class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> cos_harness(default_params: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>, new_params: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>:</span>
<span id="cb9-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Creates cosine schedules with updated parameters in `new_params`</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb9-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start from the given baseline `default_params`</span></span>
<span id="cb9-5">    cos_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(default_params)</span>
<span id="cb9-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the with the new, given parameters</span></span>
<span id="cb9-7">    cos_params.update(new_params)</span>
<span id="cb9-8">    </span>
<span id="cb9-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return the new cosine schedule</span></span>
<span id="cb9-10">    sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_cos_sched(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>cos_params)</span>
<span id="cb9-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sched</span>
<span id="cb9-12"></span>
<span id="cb9-13"></span>
<span id="cb9-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_expts(params: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>, schedule_func: Callable) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List[Dict]:</span>
<span id="cb9-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Creates a list of experiments.</span></span>
<span id="cb9-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb9-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Each element is a dictionary with the name, value, and schedule for a given parameter.</span></span>
<span id="cb9-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A `title` field is also added for easy plotting.</span></span>
<span id="cb9-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb9-20">    names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(params)</span>
<span id="cb9-21">    expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb9-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step through parameter names and their values</span></span>
<span id="cb9-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(names):</span>
<span id="cb9-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j,val <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(params[name]):</span>
<span id="cb9-25">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the experiment</span></span>
<span id="cb9-26">            expt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'param_name'</span>: name,</span>
<span id="cb9-27">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>: val,</span>
<span id="cb9-28">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>: schedule_func(new_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{name: val})}</span>
<span id="cb9-29">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># name for plotting</span></span>
<span id="cb9-30">            expt[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Param: "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">", val=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>val<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb9-31">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add it to the experiment list</span></span>
<span id="cb9-32">            expts.append(expt)</span>
<span id="cb9-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> expts</span></code></pre></div>
</div>
</section>
<section id="static-baselines" class="level2">
<h2 class="anchored" data-anchor-id="static-baselines">Static baselines</h2>
<p>First we create the constant, baseline Guidances.</p>
<div id="4993e135-cf67-4059-821d-203410fc925c" class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the baseline schedule with the new function</span></span>
<span id="cb10-2">baseline_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>: [baseline_g]}</span>
<span id="cb10-3">baseline_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs: [baseline_g <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_steps)]</span>
<span id="cb10-4">baseline_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_expts(baseline_params, baseline_func)</span></code></pre></div>
</div>
</section>
<section id="improving-the-baseline-with-scheduled-guidance" class="level2">
<h2 class="anchored" data-anchor-id="improving-the-baseline-with-scheduled-guidance">Improving the baseline with scheduled Guidance</h2>
<p>Now we build the most promising dynamic schedule: <code>Inverse kDecay</code> with a fast warmup.</p>
<div id="9fe94d2d-47e6-490d-a491-affa4c1920c3" class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># creating the inverse kDecay cosine schedules</span></span>
<span id="cb11-2">k_decays <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>]</span>
<span id="cb11-3">inv_k_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k_decay'</span>: k_decays}</span>
<span id="cb11-4">inv_k_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(cos_harness, default_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DEFAULT_COS_PARAMS)</span>
<span id="cb11-5">inv_k_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_expts(inv_k_params, inv_k_func)</span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># invert the schedules to turn them into a type of warmup </span></span>
<span id="cb11-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">##TODO: move into the scheduler helper</span></span>
<span id="cb11-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> inv_k_expts:</span>
<span id="cb11-10">    s[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [max_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> min_val <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> g <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> s[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>]]</span>
<span id="cb11-11"></span>
<span id="cb11-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># put all schedules together</span></span>
<span id="cb11-13">all_k_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inv_k_expts</span></code></pre></div>
</div>
<p>Let’s plot these schedules to see what they look like.</p>
<div id="9b631d08-6d5c-493b-a890-a081977eea6d" class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-28-sd-v2-schedules-1/index_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="function-to-run-the-experiments" class="level1">
<h1>Function to run the experiments</h1>
<p>The code below loads the v2 Stable Diffusion model. It’s also our harness to easily run many, different experiments.</p>
<div id="af74809b-8a67-49e9-b435-15556a3fcea0" class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to load Stable Diffusion pipelines</span></span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> min_diffusion.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MinimalDiffusion</span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to plot generated images</span></span>
<span id="cb12-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> min_diffusion.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> show_image, image_grid, plot_grid</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>WARNING:jax._src.lib.xla_bridge:No GPU/TPU found, falling back to CPU. (Set TF_CPP_MIN_LOG_LEVEL=0 and rerun for more info.)</code></pre>
</div>
</div>
<div id="941fbfca-e503-4207-9a41-d23fb89695af" class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> load_sd_model(model_name, device, dtype, revision, model_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{}):</span>
<span id="cb14-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Loads the given `model_name` Stable Diffusion in `dtype` precision.  </span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The model is placed on the `device` hardware. </span></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The optional `generator` is used to create noisy latents.  </span></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Optional `model_kwargs` are passed to the model's load function.</span></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb14-8">    pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MinimalDiffusion(model_name, device, dtype, revision, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>model_kwargs)</span>
<span id="cb14-9">    pipeline.load()</span>
<span id="cb14-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pipeline</span></code></pre></div>
</div>
<div id="bc74e1c7" class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run(pipeline, prompt, schedules, gen_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{},</span>
<span id="cb15-2">        guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, show_each<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, test_run<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb15-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Runs a dynamic Classifier-free Guidance experiment. </span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Generates an image for the text `prompt` given all the values in `schedules`.</span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Uses a Guidance Transformation class from the `cf_guidance` library.  </span></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Stores the output images with a matching title for plotting. </span></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Optionally shows each image as its generated.</span></span>
<span id="cb15-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    If `test_run` is true, it runs a single schedule for testing. </span></span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb15-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># store generated images and their title (the experiment name)</span></span>
<span id="cb15-12">    images, titles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb15-13">    </span>
<span id="cb15-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make sure we have a valid guidance transform</span></span>
<span id="cb15-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> guide_tfm</span>
<span id="cb15-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Using Guidance Transform: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>guide_tfm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb15-17">    </span>
<span id="cb15-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># optionally run a single test schedule</span></span>
<span id="cb15-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> test_run:</span>
<span id="cb15-20">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Running a single schedule for testing.'</span>)</span>
<span id="cb15-21">        schedules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> schedules[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb15-22">        </span>
<span id="cb15-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run all schedule experiments</span></span>
<span id="cb15-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(schedules):</span>
<span id="cb15-25">        </span>
<span id="cb15-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parse out the title for the current run</span></span>
<span id="cb15-27">        cur_title  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>]</span>
<span id="cb15-28">        titles.append(cur_title)</span>
<span id="cb15-29">        </span>
<span id="cb15-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the guidance transformation </span></span>
<span id="cb15-31">        cur_sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>]</span>
<span id="cb15-32">        gtfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> guide_tfm({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'g'</span>: cur_sched})</span>
<span id="cb15-33">        </span>
<span id="cb15-34">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Running experiment [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(schedules)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">]: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cur_title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">...'</span>)</span>
<span id="cb15-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.autocast(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>):</span>
<span id="cb15-36">            img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline.generate(prompt, gtfm, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>gen_kwargs)</span>
<span id="cb15-37">        images.append(img)</span>
<span id="cb15-38">        </span>
<span id="cb15-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># optionally plot each generated image</span></span>
<span id="cb15-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> show_each:</span>
<span id="cb15-41">            show_image(img, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb15-42">            </span>
<span id="cb15-43">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Done.'</span>)</span>
<span id="cb15-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images'</span>: images,</span>
<span id="cb15-45">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'titles'</span>: titles}</span></code></pre></div>
</div>
</section>
<section id="generating-the-images" class="level1">
<h1>Generating the images</h1>
<p>We put together all of the pieces above to generate images with Stable Diffusion v2. Both with our static baseline guidances, and the <code>Inverse-kDecay</code> schedules.</p>
<div id="d261b6aa-1ce2-46e6-a9fd-d0141dc62a63" class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stores the generated images</span></span>
<span id="cb16-2">outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load the model on the GPU in full precision</span></span>
<span id="cb16-5">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span></span>
<span id="cb16-6">dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.float16</span>
<span id="cb16-7">revision <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fp16"</span></span>
<span id="cb16-8"></span>
<span id="cb16-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step through the Diffusion models</span></span>
<span id="cb16-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> dparams <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> diffusion_runs:</span>
<span id="cb16-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parse out model name and its custom args</span></span>
<span id="cb16-12">    model_name   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dparams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_name'</span>]</span>
<span id="cb16-13">    model_kwargs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dparams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_kwargs'</span>]</span>
<span id="cb16-14">    </span>
<span id="cb16-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># view some info about the run</span></span>
<span id="cb16-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Running model: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dparams<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb16-17">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Generation kwargs: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gen_kwargs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb16-18">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Using prompt: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prompt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb16-19">    </span>
<span id="cb16-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load the current Diffusion model</span></span>
<span id="cb16-21">    pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_sd_model(model_name, device, dtype, revision, model_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model_kwargs)</span>
<span id="cb16-22">    </span>
<span id="cb16-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run the baseline, static Guidance</span></span>
<span id="cb16-24">    baseline_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(pipeline, prompt, baseline_expts, gen_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gen_kwargs,</span>
<span id="cb16-25">                       guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>GuidanceTfm, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generator)</span>
<span id="cb16-26">    outputs[(model_name,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'baseline'</span>)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> baseline_res</span>
<span id="cb16-27">    </span>
<span id="cb16-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run the scheduled Guidances</span></span>
<span id="cb16-29">    base_norm_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(pipeline, prompt, all_k_expts, gen_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gen_kwargs,</span>
<span id="cb16-30">                        guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>GuidanceTfm, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generator)</span>
<span id="cb16-31">    outputs[(model_name,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scheduled'</span>)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base_norm_res</span>
<span id="cb16-32">                                </span>
<span id="cb16-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cleanup GPU memory for the next model</span></span>
<span id="cb16-34">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">del</span> pipeline</span>
<span id="cb16-35">    pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb16-36">    torch.cuda.empty_cache()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running model: {'model_name': 'stabilityai/stable-diffusion-2', 'model_kwargs': {'unet_attn_slice': True, 'better_vae': '', 'scheduler_kls': 'dpm_multi', 'use_k_diffusion': 'k_dpmpp_sde', 'generator': &lt;torch._C.Generator object at 0x7f492216fc30&gt;}}
Generation kwargs: {'height': 1024, 'width': 1024, 'negative_prompt': 'ugly, tiling, poorly drawn hands, poorly drawn feet, poorly drawn face, out of frame, mutation, mutated, extra limbs, extra legs, extra arms, disfigured, deformed, cross-eye, body out of frame, blurry, bad art, bad anatomy, blurred, text, watermark, grainy', 'steps': 30, 'use_karras_sigmas': True}
Using prompt: ((a peaceful mountainside village in the Andes)), ((by Hayao Miyazaki)), studio lighting, High quality, professional, dramatic, cinematic movie still, very detailed, character art, concept art, focused, subsurface scatter
Enabling default unet attention slicing.
Using scheduler: &lt;class 'diffusers.schedulers.scheduling_dpmsolver_multistep.DPMSolverMultistepScheduler'&gt;
Using Guidance Transform: &lt;class 'cf_guidance.transforms.GuidanceTfm'&gt;
Running experiment [1 of 1]: Param: "max_val", val=8...
Using negative prompt: ugly, tiling, poorly drawn hands, poorly drawn feet, poorly drawn face, out of frame, mutation, mutated, extra limbs, extra legs, extra arms, disfigured, deformed, cross-eye, body out of frame, blurry, bad art, bad anatomy, blurred, text, watermark, grainy
NOTE: Generating with k-diffusion Samplers: k_dpmpp_sde
Using Karras sigma schedule
Done.
Using Guidance Transform: &lt;class 'cf_guidance.transforms.GuidanceTfm'&gt;
Running experiment [1 of 4]: Param: "k_decay", val=0.1...
Using negative prompt: ugly, tiling, poorly drawn hands, poorly drawn feet, poorly drawn face, out of frame, mutation, mutated, extra limbs, extra legs, extra arms, disfigured, deformed, cross-eye, body out of frame, blurry, bad art, bad anatomy, blurred, text, watermark, grainy
NOTE: Generating with k-diffusion Samplers: k_dpmpp_sde
Using Karras sigma schedule
Running experiment [2 of 4]: Param: "k_decay", val=0.2...
Using negative prompt: ugly, tiling, poorly drawn hands, poorly drawn feet, poorly drawn face, out of frame, mutation, mutated, extra limbs, extra legs, extra arms, disfigured, deformed, cross-eye, body out of frame, blurry, bad art, bad anatomy, blurred, text, watermark, grainy
NOTE: Generating with k-diffusion Samplers: k_dpmpp_sde
Using Karras sigma schedule
Running experiment [3 of 4]: Param: "k_decay", val=0.3...
Using negative prompt: ugly, tiling, poorly drawn hands, poorly drawn feet, poorly drawn face, out of frame, mutation, mutated, extra limbs, extra legs, extra arms, disfigured, deformed, cross-eye, body out of frame, blurry, bad art, bad anatomy, blurred, text, watermark, grainy
NOTE: Generating with k-diffusion Samplers: k_dpmpp_sde
Using Karras sigma schedule
Running experiment [4 of 4]: Param: "k_decay", val=0.5...
Using negative prompt: ugly, tiling, poorly drawn hands, poorly drawn feet, poorly drawn face, out of frame, mutation, mutated, extra limbs, extra legs, extra arms, disfigured, deformed, cross-eye, body out of frame, blurry, bad art, bad anatomy, blurred, text, watermark, grainy
NOTE: Generating with k-diffusion Samplers: k_dpmpp_sde
Using Karras sigma schedule
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"6918eb5f4cb043dbad071104fc0e06ca","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ef204be0a0fe48b881203949abff6b8b","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"736eed89ccad4b7fb06837f5bf225d10","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"bca8d242b98a4bbe8e133fb564861871","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"eb3c20b1ddad424492ee03b79287faa2","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
</section>
<section id="results" class="level1">
<h1>Results</h1>
<section id="stable-diffusion-v2-images" class="level2">
<h2 class="anchored" data-anchor-id="stable-diffusion-v2-images">Stable Diffusion v2 images</h2>
<p>Here we plot all of the generated images.</p>
<p>The image on the left is the baseline with a static, constant Guidance.<br>
The images on the right are the improvements with Guidance scheduling. Specifically, using the <code>Inverse-kDecay</code> cosine schedules with different values of <code>k</code>.</p>
<div id="d71ff8fe-888e-4e9c-aad2-c1268ed3965c" class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">plot_all_results(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'stabilityai/stable-diffusion-2'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-28-sd-v2-schedules-1/index_files/figure-html/cell-19-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-28-sd-v2-schedules-1/index_files/figure-html/cell-19-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-28-sd-v2-schedules-1/index_files/figure-html/cell-19-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-28-sd-v2-schedules-1/index_files/figure-html/cell-19-output-4.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this notebook we checked whether scheduling the Classifier-free Guidance improves the images generated by Stable Diffusion v2.</p>
<p>At first glance, it seems that scheduling still helps! The scheduled generations have a lot more buildings and details. They seem to also better follow the prompt.</p>


</section>

 ]]></description>
  <category>diffusion</category>
  <category>classifier-free guidance</category>
  <category>deep learning</category>
  <guid>https://enzokro.dev/blog/posts/2022-11-28-sd-v2-schedules-1/</guid>
  <pubDate>Mon, 28 Nov 2022 05:00:00 GMT</pubDate>
  <media:content url="https://enzokro.dev/blog/posts/2022-11-28-sd-v2-schedules-1/better_village.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Classifier-free Guidance with Cosine Schedules Pt. 7</title>
  <dc:creator>enzokro </dc:creator>
  <link>https://enzokro.dev/blog/posts/2022-11-26-guidance-expts-8/</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>Improving generated images with dynamic Classifier-free Guidance across Diffusion models.</p>
</blockquote>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This notebook is Part 7 in a <a href="https://enzokro.dev/blog/posts/2022-11-25-guidance-expts-7/">series</a> on dynamic Classifier-free Guidance. It checks whether scheduling and normalizing the Guidance improves the quality of images generated by different kinds of Stable Diffusion models.</p>
<section id="recap-of-parts-1-6" class="level2">
<h2 class="anchored" data-anchor-id="recap-of-parts-1-6">Recap of Parts 1-6</h2>
<p>In the first six parts, we found a good, initial set of schedules and normalizations. The most promising schedules are used in this notebook.</p>
</section>
<section id="part-7-improvement-across-models" class="level2">
<h2 class="anchored" data-anchor-id="part-7-improvement-across-models">Part 7: Improvement across models</h2>
<p>Part 7 runs our best schedules on the following Diffusion models:</p>
<ul>
<li>Stable Diffusion v1-4<br>
</li>
<li>Stable Diffusion v1-5<br>
</li>
<li>Prompt Hero’s openjourney<br>
</li>
<li>Stable Diffusion 2-base</li>
</ul>
</section>
</section>
<section id="python-imports" class="level1">
<h1>Python imports</h1>
<p>We start with a few python imports.</p>
<div id="ea1e75a0-0d64-436f-b9d8-d641393dca3a" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Callable, List, Dict</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.colors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mcolors</span></code></pre></div>
</div>
<div id="dca0a373-c7fd-4fb1-811a-fd261e6af29f" class="cell">
<div class="cell-output cell-output-stderr">
<pre><code>2022-11-26 21:21:39.015654: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2022-11-26 21:21:39.739713: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory
2022-11-26 21:21:39.739778: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory
2022-11-26 21:21:39.739784: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.</code></pre>
</div>
</div>
<section id="seed-for-reproducibility" class="level2">
<h2 class="anchored" data-anchor-id="seed-for-reproducibility">Seed for reproducibility</h2>
<p><code>seed_everything</code> makes sure that the results are reproducible across notebooks.</p>
<div id="58d6c482-17da-41df-9605-4759b3281944" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set the seed for rng</span></span>
<span id="cb3-2">SEED <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">977145576</span> </span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> seed_everything(seed: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> torch.Generator:</span>
<span id="cb3-4">    random.seed(seed)</span>
<span id="cb3-5">    os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PYTHONHASHSEED'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(seed)</span>
<span id="cb3-6">    np.random.seed(seed)</span>
<span id="cb3-7">    generator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.manual_seed(seed)</span>
<span id="cb3-8">    torch.backends.cudnn.deterministic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-9">    torch.backends.cudnn.benchmark <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> generator</span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for sampling the initial, noisy latents</span></span>
<span id="cb3-13">generator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seed_everything(SEED)</span></code></pre></div>
</div>
</section>
</section>
<section id="text-prompt-for-image-generations" class="level1">
<h1>Text prompt for image generations</h1>
<p>We use the following input text prompt, randomly chosen from the <a href="https://prompthero.com/">Prompt Hero</a> site.</p>
<div id="f1a10cc5-1463-4d96-bba7-b84e8d0e6089" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># text prompt for image generations</span></span>
<span id="cb4-2">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"digital painting of masked incan warrior, by filipe pagliuso and justin gerard, symmetric, fantasy, highly detailed, realistic, intricate, portrait, sharp focus, tarot card, face, handsome, peruvian, ax"</span></span></code></pre></div>
</div>
<section id="image-parameters" class="level2">
<h2 class="anchored" data-anchor-id="image-parameters">Image parameters</h2>
<p>Images will be generated over <img src="https://latex.codecogs.com/png.latex?50"> diffusion steps. The height and width will depend on the Stable Diffusion model</p>
<div id="cb50e210-14ed-43a9-a44e-53bff5858db2" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the number of diffusion steps</span></span>
<span id="cb5-2">num_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dimensions for v1 and v2 Stable Diffusions</span></span>
<span id="cb5-5">v1_sd_dims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'width'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>}</span>
<span id="cb5-6">v2_sd_dims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">768</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'width'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">768</span>}</span></code></pre></div>
</div>
</section>
</section>
<section id="creating-guidance-schedules" class="level1">
<h1>Creating Guidance schedules</h1>
<p>We create Guidance schedules with the <code>cf_guidance</code> library. This library also has the Guidance normalizations.</p>
<div id="1b0cacb1-b98f-47b2-965f-71c71d03b043" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># helpers to create cosine schedules</span></span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cf_guidance.schedules  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_cos_sched</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># normalizations for classifier-free guidance</span></span>
<span id="cb6-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cf_guidance.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GuidanceTfm, BaseNormGuidance, TNormGuidance, FullNormGuidance</span></code></pre></div>
</div>
<p>We keep most of the schedule <a href="https://enzokro.dev/blog/posts/2022-11-20-guidance-expts-2/#default-schedule-parameters">parameters and values</a> from the rest of the series.</p>
<div id="a1c1a549-d3c5-43ff-a672-051f087a54b3" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Default schedule parameters from the blog post</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">######################################</span></span>
<span id="cb7-3">max_val           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># guidance scaling value</span></span>
<span id="cb7-4">min_val           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minimum guidance scaling</span></span>
<span id="cb7-5">num_steps         <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of diffusion steps</span></span>
<span id="cb7-6">num_warmup_steps  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of warmup steps</span></span>
<span id="cb7-7">warmup_init_val   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the intial warmup value</span></span>
<span id="cb7-8">num_cycles        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of cosine cycles</span></span>
<span id="cb7-9">k_decay           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># k-decay for cosine curve scaling </span></span>
<span id="cb7-10"></span>
<span id="cb7-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># smaller values for T-Norm and FullNorm</span></span>
<span id="cb7-12">max_T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span></span>
<span id="cb7-13">min_T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb7-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">######################################</span></span>
<span id="cb7-15"></span>
<span id="cb7-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for constant Guidance, and Base Norm guidance</span></span>
<span id="cb7-17">DEFAULT_COS_PARAMS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb7-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>:           max_val,</span>
<span id="cb7-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_steps'</span>:         num_steps,</span>
<span id="cb7-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_val'</span>:           min_val,</span>
<span id="cb7-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_cycles'</span>:        num_cycles,</span>
<span id="cb7-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k_decay'</span>:           k_decay,</span>
<span id="cb7-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_warmup_steps'</span>:  num_warmup_steps,</span>
<span id="cb7-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warmup_init_val'</span>:   warmup_init_val,</span>
<span id="cb7-25">}</span>
<span id="cb7-26"></span>
<span id="cb7-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for T-Norm and Full Norm guidance</span></span>
<span id="cb7-28">DEFAULT_T_PARAMS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb7-29">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>:           max_T,</span>
<span id="cb7-30">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_steps'</span>:         num_steps,</span>
<span id="cb7-31">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_val'</span>:           min_T,</span>
<span id="cb7-32">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_cycles'</span>:        num_cycles,</span>
<span id="cb7-33">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k_decay'</span>:           k_decay,</span>
<span id="cb7-34">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_warmup_steps'</span>:  num_warmup_steps,</span>
<span id="cb7-35">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warmup_init_val'</span>:   warmup_init_val,</span>
<span id="cb7-36">}</span></code></pre></div>
</div>
<p>The functions below are used to quickly build different schedules. They are also re-used from previous notebooks.</p>
<div id="27d6dfa1-eef5-4948-885d-5194cd44286c" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> cos_harness(default_params: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>, new_params: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>:</span>
<span id="cb8-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Creates cosine schedules with updated parameters in `new_params`</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb8-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start from the given baseline `default_params`</span></span>
<span id="cb8-5">    cos_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(default_params)</span>
<span id="cb8-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the with the new, given parameters</span></span>
<span id="cb8-7">    cos_params.update(new_params)</span>
<span id="cb8-8">    </span>
<span id="cb8-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return the new cosine schedule</span></span>
<span id="cb8-10">    sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_cos_sched(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>cos_params)</span>
<span id="cb8-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sched</span>
<span id="cb8-12"></span>
<span id="cb8-13"></span>
<span id="cb8-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_expts(params: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>, schedule_func: Callable) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List[Dict]:</span>
<span id="cb8-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Creates a list of experiments.</span></span>
<span id="cb8-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb8-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Each element is a dictionary with the name, value, and schedule for a given parameter.</span></span>
<span id="cb8-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A `title` field is also added for easy plotting.</span></span>
<span id="cb8-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb8-20">    names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(params)</span>
<span id="cb8-21">    expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step through parameter names and their values</span></span>
<span id="cb8-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(names):</span>
<span id="cb8-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j,val <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(params[name]):</span>
<span id="cb8-25">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the experiment</span></span>
<span id="cb8-26">            expt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'param_name'</span>: name,</span>
<span id="cb8-27">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>: val,</span>
<span id="cb8-28">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>: schedule_func(new_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{name: val})}</span>
<span id="cb8-29">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># name for plotting</span></span>
<span id="cb8-30">            expt[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Param: "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">", val=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>val<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb8-31">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add it to the experiment list</span></span>
<span id="cb8-32">            expts.append(expt)</span>
<span id="cb8-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> expts</span></code></pre></div>
</div>
<section id="static-baselines" class="level2">
<h2 class="anchored" data-anchor-id="static-baselines">Static baselines</h2>
<p>First we create the constant, baseline Guidances.</p>
<p>For <code>Prediction Normalization</code> we use the same default of <img src="https://latex.codecogs.com/png.latex?G%20=%207.5">. For <code>T-Normalization</code> and <code>Full Normalization</code>, we use a static <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D%20=%200.15">.</p>
<div id="4993e135-cf67-4059-821d-203410fc925c" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the baseline schedule with the new function</span></span>
<span id="cb9-2">baseline_g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span></span>
<span id="cb9-3">baseline_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>: [baseline_g]}</span>
<span id="cb9-4">baseline_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs: [baseline_g <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_steps)]</span>
<span id="cb9-5">baseline_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_expts(baseline_params, baseline_func)</span>
<span id="cb9-6"></span>
<span id="cb9-7">T_baseline_g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span></span>
<span id="cb9-8">T_baseline_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>: [T_baseline_g]}</span>
<span id="cb9-9">T_baseline_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs: [T_baseline_g <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_steps)]</span>
<span id="cb9-10">T_baseline_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_expts(T_baseline_params, T_baseline_func)</span></code></pre></div>
</div>
</section>
<section id="improving-the-baseline-with-schedules-and-normalizations" class="level2">
<h2 class="anchored" data-anchor-id="improving-the-baseline-with-schedules-and-normalizations">Improving the baseline with schedules and normalizations</h2>
<p>Now we build the most promising schedule so far: <code>Inverse kDecay</code> with a fast warmup.</p>
<div id="9fe94d2d-47e6-490d-a491-affa4c1920c3" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start by creating regualr kDecay cosine schedules</span></span>
<span id="cb10-2">inv_k_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k_decay'</span>: [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>]}</span>
<span id="cb10-3">inv_k_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(cos_harness, default_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DEFAULT_COS_PARAMS)</span>
<span id="cb10-4">inv_k_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_expts(inv_k_params, inv_k_func)</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># invert the schedules to turn them into a type of warmup </span></span>
<span id="cb10-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> inv_k_expts:</span>
<span id="cb10-8">    s[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [max_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> min_val <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> g <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> s[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>]]</span>
<span id="cb10-9"></span>
<span id="cb10-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># put all schedules together</span></span>
<span id="cb10-11">all_k_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inv_k_expts</span></code></pre></div>
</div>
<div id="9b631d08-6d5c-493b-a890-a081977eea6d" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-26-guidance-expts-8/index_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We also build a matching schedule with smaller <img src="https://latex.codecogs.com/png.latex?G"> values for the <code>T</code> and <code>Full</code> Normalizations.</p>
<div id="959f09d8-5a29-4289-bece-c2010572e55b" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the kDecay cosine experiments</span></span>
<span id="cb11-2">T_inv_k_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(cos_harness, default_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DEFAULT_T_PARAMS)</span>
<span id="cb11-3">T_inv_k_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_expts(inv_k_params, T_inv_k_func)</span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># inverse the schedules</span></span>
<span id="cb11-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> T_inv_k_expts:</span>
<span id="cb11-7">    s[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [max_T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> min_T <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> g <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> s[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>]]</span>
<span id="cb11-8"></span>
<span id="cb11-9">all_T_k_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T_inv_k_expts</span></code></pre></div>
</div>
<div id="319df1f7-a9d2-4a07-bc67-6b19b33061f2" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-26-guidance-expts-8/index_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="gathering-stable-diffusion-models" class="level1">
<h1>Gathering Stable Diffusion models</h1>
<p>Below we group the different Stable Diffusion for testing:</p>
<ul>
<li>Stable Diffusion v1-4<br>
</li>
<li>Stable Diffusion v1-5<br>
</li>
<li>Prompt Hero’s openjourney<br>
</li>
<li>Stable Diffusion 2-base</li>
</ul>
<div id="67c5e34b-5be8-4579-b4cb-769f49aa9386" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># group the different models to run</span></span>
<span id="cb12-3">diffusion_runs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb12-4"></span>
<span id="cb12-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stable Diffusion v1-4</span></span>
<span id="cb12-6">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CompVis/stable-diffusion-v1-4'</span>,</span>
<span id="cb12-7">     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_kwargs'</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'better_vae'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ema'</span>}},</span>
<span id="cb12-8">    </span>
<span id="cb12-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stable Diffusion v1-5</span></span>
<span id="cb12-10">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'runwayml/stable-diffusion-v1-5'</span>,</span>
<span id="cb12-11">     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_kwargs'</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'better_vae'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ema'</span>}},</span>
<span id="cb12-12">    </span>
<span id="cb12-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prompthero/openjourney</span></span>
<span id="cb12-14">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prompthero/openjourney"</span>,</span>
<span id="cb12-15">     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_kwargs'</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'better_vae'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ema'</span>}},</span>
<span id="cb12-16">    </span>
<span id="cb12-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stable Diffusion 2-base</span></span>
<span id="cb12-18">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'stabilityai/stable-diffusion-2-base'</span>,</span>
<span id="cb12-19">     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_kwargs'</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'unet_attn_slice'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>}},</span>
<span id="cb12-20">    </span>
<span id="cb12-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TODO</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: test on SD-v2 proper</span></span>
<span id="cb12-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # SD 2</span></span>
<span id="cb12-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># {'model_name': 'stabilityai/stable-diffusion-2',</span></span>
<span id="cb12-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  'model_kwargs': {'unet_attn_slice': False}},</span></span>
<span id="cb12-25"></span>
<span id="cb12-26">]</span></code></pre></div>
</div>
<section id="function-to-run-the-experiments" class="level2">
<h2 class="anchored" data-anchor-id="function-to-run-the-experiments">Function to run the experiments</h2>
<p>The previous notebooks ran one Diffusion model at a time. Now, we need to load the model as part of the pipeline.</p>
<div id="af74809b-8a67-49e9-b435-15556a3fcea0" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to load Stable Diffusion pipelines</span></span>
<span id="cb13-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> min_diffusion.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MinimalDiffusion</span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to plot generated images</span></span>
<span id="cb13-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> min_diffusion.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> show_image, image_grid, plot_grid</span></code></pre></div>
</div>
<p>To do this, we move the model loading code <code>load_sd_model</code> into the <code>run</code> function. We also add some memory cleanup at the end to free up the GPU for the next model.</p>
<div id="941fbfca-e503-4207-9a41-d23fb89695af" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> load_sd_model(model_name, device, dtype, model_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{}, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb14-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Loads the given `model_name` Stable Diffusion in `dtype` precision.  </span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The model is placed on the `device` hardware. </span></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The optional `generator` is used to create noisy latents.  </span></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Optional `model_kwargs` are passed to the model's load function.</span></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb14-8">    pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MinimalDiffusion(model_name, device, dtype, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generator)</span>
<span id="cb14-9">    pipeline.load(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>model_kwargs)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pipeline</span></code></pre></div>
</div>
<div id="bc74e1c7" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run(pipeline, prompt, schedules, gen_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{},</span>
<span id="cb15-2">        guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, show_each<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, test_run<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb15-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Runs a dynamic Classifier-free Guidance experiment. </span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Generates an image for the text `prompt` given all the values in `schedules`.</span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Uses a Guidance Transformation class from the `cf_guidance` library.  </span></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Stores the output images with a matching title for plotting. </span></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Optionally shows each image as its generated.</span></span>
<span id="cb15-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    If `test_run` is true, it runs a single schedule for testing. </span></span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb15-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># store generated images and their title (the experiment name)</span></span>
<span id="cb15-12">    images, titles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb15-13">    </span>
<span id="cb15-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make sure we have a valid guidance transform</span></span>
<span id="cb15-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> guide_tfm</span>
<span id="cb15-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Using Guidance Transform: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>guide_tfm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb15-17">    </span>
<span id="cb15-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># optionally run a single test schedule</span></span>
<span id="cb15-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> test_run:</span>
<span id="cb15-20">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Running a single schedule for testing.'</span>)</span>
<span id="cb15-21">        schedules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> schedules[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb15-22">        </span>
<span id="cb15-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run all schedule experiments</span></span>
<span id="cb15-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(schedules):</span>
<span id="cb15-25">        </span>
<span id="cb15-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parse out the title for the current run</span></span>
<span id="cb15-27">        cur_title  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>]</span>
<span id="cb15-28">        titles.append(cur_title)</span>
<span id="cb15-29">        </span>
<span id="cb15-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the guidance transformation </span></span>
<span id="cb15-31">        cur_sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>]</span>
<span id="cb15-32">        gtfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> guide_tfm({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'g'</span>: cur_sched})</span>
<span id="cb15-33">        </span>
<span id="cb15-34">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Running experiment [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(schedules)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">]: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cur_title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">...'</span>)</span>
<span id="cb15-35">        img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline.generate(prompt, gtfm, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>gen_kwargs)</span>
<span id="cb15-36">        images.append(img)</span>
<span id="cb15-37">        </span>
<span id="cb15-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># optionally plot each generated image</span></span>
<span id="cb15-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> show_each:</span>
<span id="cb15-40">            show_image(img, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb15-41">            </span>
<span id="cb15-42">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Done.'</span>)</span>
<span id="cb15-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images'</span>: images,</span>
<span id="cb15-44">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'titles'</span>: titles}</span></code></pre></div>
</div>
</section>
</section>
<section id="generating-the-images" class="level1">
<h1>Generating the images</h1>
<p>We put all of the pieces together to generate images for the different schedules and Diffusion models.</p>
<div id="d261b6aa-1ce2-46e6-a9fd-d0141dc62a63" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stores the generated images</span></span>
<span id="cb16-2">outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load the model on the GPU in full precision</span></span>
<span id="cb16-5">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span></span>
<span id="cb16-6">dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.float16</span>
<span id="cb16-7"></span>
<span id="cb16-8"></span>
<span id="cb16-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step through the Diffusion models</span></span>
<span id="cb16-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> dparams <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> diffusion_runs:</span>
<span id="cb16-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parse out model name and its custom args</span></span>
<span id="cb16-12">    model_name   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dparams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_name'</span>]</span>
<span id="cb16-13">    model_kwargs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dparams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_kwargs'</span>]</span>
<span id="cb16-14">    </span>
<span id="cb16-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set the output image size based on the model</span></span>
<span id="cb16-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> model_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'stabilityai/stable-diffusion-2'</span>:</span>
<span id="cb16-17">        gen_kwargs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v2_sd_dims</span>
<span id="cb16-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb16-19">        gen_kwargs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v1_sd_dims</span>
<span id="cb16-20">    </span>
<span id="cb16-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add the midjourney prefix for the openjourney model</span></span>
<span id="cb16-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'openjourney'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> model_name:</span>
<span id="cb16-23">        cur_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mdjrny-v4 style "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> prompt</span>
<span id="cb16-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb16-25">        cur_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prompt</span>
<span id="cb16-26">    </span>
<span id="cb16-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># view some info about the run</span></span>
<span id="cb16-28">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Running model: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dparams<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb16-29">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Generation kwargs: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gen_kwargs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb16-30">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Using prompt: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cur_prompt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb16-31">    </span>
<span id="cb16-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load the current Diffusion model</span></span>
<span id="cb16-33">    pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_sd_model(model_name, device, dtype, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generator,</span>
<span id="cb16-34">                             model_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model_kwargs)</span>
<span id="cb16-35">    </span>
<span id="cb16-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run the baseline Guidance for this model</span></span>
<span id="cb16-37">    baseline_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(pipeline, cur_prompt, baseline_expts, gen_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gen_kwargs,</span>
<span id="cb16-38">                       guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>GuidanceTfm, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generator)</span>
<span id="cb16-39">    outputs[(model_name,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'baseline'</span>)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> baseline_res</span>
<span id="cb16-40">    </span>
<span id="cb16-41">    </span>
<span id="cb16-42">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">### Generate images with our best normalizations and schedules</span></span>
<span id="cb16-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">###############################################################</span></span>
<span id="cb16-44">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">###############################################################</span></span>
<span id="cb16-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1) Prediction Normalization</span></span>
<span id="cb16-46">    base_norm_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(pipeline, cur_prompt, baseline_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> all_k_expts, gen_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gen_kwargs,</span>
<span id="cb16-47">                        guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BaseNormGuidance, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generator)</span>
<span id="cb16-48">    outputs[(model_name,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'baseNorm'</span>)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base_norm_res</span>
<span id="cb16-49">                            </span>
<span id="cb16-50">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2) T-Normalization</span></span>
<span id="cb16-51">    T_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(pipeline, cur_prompt, T_baseline_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> all_T_k_expts, gen_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gen_kwargs,</span>
<span id="cb16-52">                guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TNormGuidance, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generator)</span>
<span id="cb16-53">    outputs[(model_name,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TNorm'</span>)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T_res</span>
<span id="cb16-54"></span>
<span id="cb16-55">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3) Full Normalization</span></span>
<span id="cb16-56">    full_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(pipeline, cur_prompt, T_baseline_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> all_T_k_expts, gen_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gen_kwargs,</span>
<span id="cb16-57">                   guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>FullNormGuidance, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generator)</span>
<span id="cb16-58">    outputs[(model_name,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FullNorm'</span>)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> full_res</span>
<span id="cb16-59">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">###############################################################</span></span>
<span id="cb16-60">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">###############################################################</span></span>
<span id="cb16-61">    </span>
<span id="cb16-62">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cleanup GPU memory for the next model</span></span>
<span id="cb16-63">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">del</span> pipeline</span>
<span id="cb16-64">    pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb16-65">    torch.cuda.empty_cache()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running model: {'model_name': 'CompVis/stable-diffusion-v1-4', 'model_kwargs': {'better_vae': 'ema'}}
Generation kwargs: {'height': 640, 'width': 512}
Using prompt: digital painting of masked incan warrior, by filipe pagliuso and justin gerard, symmetric, fantasy, highly detailed, realistic, intricate, portrait, sharp focus, tarot card, face, handsome, peruvian, ax
Using the improved VAE "ema" from stabiliy.ai
Enabling default unet attention slicing.
Using Guidance Transform: &lt;class 'cf_guidance.transforms.GuidanceTfm'&gt;
Running experiment [1 of 1]: Param: "max_val", val=7.5...
Done.
Using Guidance Transform: &lt;class 'cf_guidance.transforms.BaseNormGuidance'&gt;
Running experiment [1 of 2]: Param: "max_val", val=7.5...
Running experiment [2 of 2]: Param: "k_decay", val=0.15...
Done.
Using Guidance Transform: &lt;class 'cf_guidance.transforms.TNormGuidance'&gt;
Running experiment [1 of 2]: Param: "max_val", val=0.15...
Running experiment [2 of 2]: Param: "k_decay", val=0.15...
Done.
Using Guidance Transform: &lt;class 'cf_guidance.transforms.FullNormGuidance'&gt;
Running experiment [1 of 2]: Param: "max_val", val=0.15...
Running experiment [2 of 2]: Param: "k_decay", val=0.15...
Done.
Running model: {'model_name': 'runwayml/stable-diffusion-v1-5', 'model_kwargs': {'better_vae': 'ema'}}
Generation kwargs: {'height': 640, 'width': 512}
Using prompt: digital painting of masked incan warrior, by filipe pagliuso and justin gerard, symmetric, fantasy, highly detailed, realistic, intricate, portrait, sharp focus, tarot card, face, handsome, peruvian, ax
Using the improved VAE "ema" from stabiliy.ai
Enabling default unet attention slicing.
Using Guidance Transform: &lt;class 'cf_guidance.transforms.GuidanceTfm'&gt;
Running experiment [1 of 1]: Param: "max_val", val=7.5...
Done.
Using Guidance Transform: &lt;class 'cf_guidance.transforms.BaseNormGuidance'&gt;
Running experiment [1 of 2]: Param: "max_val", val=7.5...
Running experiment [2 of 2]: Param: "k_decay", val=0.15...
Done.
Using Guidance Transform: &lt;class 'cf_guidance.transforms.TNormGuidance'&gt;
Running experiment [1 of 2]: Param: "max_val", val=0.15...
Running experiment [2 of 2]: Param: "k_decay", val=0.15...
Done.
Using Guidance Transform: &lt;class 'cf_guidance.transforms.FullNormGuidance'&gt;
Running experiment [1 of 2]: Param: "max_val", val=0.15...
Running experiment [2 of 2]: Param: "k_decay", val=0.15...
Done.
Running model: {'model_name': 'prompthero/openjourney', 'model_kwargs': {'better_vae': 'ema'}}
Generation kwargs: {'height': 640, 'width': 512}
Using prompt: mdjrny-v4 style digital painting of masked incan warrior, by filipe pagliuso and justin gerard, symmetric, fantasy, highly detailed, realistic, intricate, portrait, sharp focus, tarot card, face, handsome, peruvian, ax
Using the improved VAE "ema" from stabiliy.ai
Enabling default unet attention slicing.
Using Guidance Transform: &lt;class 'cf_guidance.transforms.GuidanceTfm'&gt;
Running experiment [1 of 1]: Param: "max_val", val=7.5...
Done.
Using Guidance Transform: &lt;class 'cf_guidance.transforms.BaseNormGuidance'&gt;
Running experiment [1 of 2]: Param: "max_val", val=7.5...
Running experiment [2 of 2]: Param: "k_decay", val=0.15...
Done.
Using Guidance Transform: &lt;class 'cf_guidance.transforms.TNormGuidance'&gt;
Running experiment [1 of 2]: Param: "max_val", val=0.15...
Running experiment [2 of 2]: Param: "k_decay", val=0.15...
Done.
Using Guidance Transform: &lt;class 'cf_guidance.transforms.FullNormGuidance'&gt;
Running experiment [1 of 2]: Param: "max_val", val=0.15...
Running experiment [2 of 2]: Param: "k_decay", val=0.15...
Done.
Running model: {'model_name': 'stabilityai/stable-diffusion-2-base', 'model_kwargs': {'unet_attn_slice': False}}
Generation kwargs: {'height': 640, 'width': 512}
Using prompt: digital painting of masked incan warrior, by filipe pagliuso and justin gerard, symmetric, fantasy, highly detailed, realistic, intricate, portrait, sharp focus, tarot card, face, handsome, peruvian, ax
Using Guidance Transform: &lt;class 'cf_guidance.transforms.GuidanceTfm'&gt;
Running experiment [1 of 1]: Param: "max_val", val=7.5...
Done.
Using Guidance Transform: &lt;class 'cf_guidance.transforms.BaseNormGuidance'&gt;
Running experiment [1 of 2]: Param: "max_val", val=7.5...
Running experiment [2 of 2]: Param: "k_decay", val=0.15...
Done.
Using Guidance Transform: &lt;class 'cf_guidance.transforms.TNormGuidance'&gt;
Running experiment [1 of 2]: Param: "max_val", val=0.15...
Running experiment [2 of 2]: Param: "k_decay", val=0.15...
Done.
Using Guidance Transform: &lt;class 'cf_guidance.transforms.FullNormGuidance'&gt;
Running experiment [1 of 2]: Param: "max_val", val=0.15...
Running experiment [2 of 2]: Param: "k_decay", val=0.15...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4a9142f211424c79a440f2e12fe45cfa","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"9379b0df06254c789c597ac387fb2c74","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"000baf204e11420ebea30260d1640f52","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"9470fbd356cf473aae4bb665ce5e55c2","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"80adc7694bfc4d808f11a1879cff77b0","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"5bca02d3f8b44635ab2e4c0b43aa4a16","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"7bafd7b3356d4bca9bfa7e4425ef8eca","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c75199cb409a4ef08f8f24a866c5136c","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"849d17482fc647508e6b05fcc389ae0b","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"0529b79d3c784a11b9a521fef3d437cd","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ae96fb6b16f545daa26f1531a41c5809","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"40274847e1794624b465bf327cd603be","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"00d98c88f15e459b96e489103bb5a7c0","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"5655b0401dca4b0b8b21013ae2908291","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"cd23e488bcbd4185b289149c7c37cdb0","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1942d367931d45728018498bb114744a","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ff9346b1c14643b1ac93bd2d7f838a9f","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"5d90d78240304cdb8f419ab39d577937","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"afe3db289e0c4bddafb9f86e3caf6ef7","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"32eb03f0f68d48d1bc32a286e9c50cc7","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"2a3e15b5d4fa42cf95635151f55126bb","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"3ea102817d5d4b509ea85f5f55a47c1e","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"77e34e7aa01e405c9b1ae9dbcc956d4f","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1772203c6faf4b0596e41cd09d517427","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"31533004ffc54d25b23acc1d3da3bfd4","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"28121410e9e84157867cf82185d76a33","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ce1e8facf03143839b5df250e8090e75","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"0681296342f04b45abcadf9debb33890","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
</section>
<section id="results" class="level1">
<h1>Results</h1>
<section id="reading-the-plots" class="level2">
<h2 class="anchored" data-anchor-id="reading-the-plots">Reading the plots</h2>
<p>For each model, we plot a grid with its generated images. The grid has two rows and four columns.</p>
<p>The first row shows results from the fixed, constant Guidance. The second row shows results for the <code>Inverse kDecay</code> cosine schedules.</p>
<p>The first column shows the baseline: unnormalized Classifier-free Guidance with a constant <img src="https://latex.codecogs.com/png.latex?G%20=%207.5">.<br>
The second column has the <code>Prediction Normalization</code> results.<br>
The third column has the <code>T-Normalization</code> results.<br>
The fourth column has the <code>Full Normalization</code> results.</p>
<p>In general we expect that normalization should improve the images. In other words, the second, third, and fourth column should be better than the first column (the baseline).</p>
<p>Likewise, we expect that the <code>Inverse kDecay</code> schedules are better than the static schedules. That means that, for a given column, the result in its second row should be better than its first row.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The plotting functions are available in the notebook. They are omitted here for space.</p>
</div>
</div>
</section>
<section id="stable-diffusion-v1-4" class="level2">
<h2 class="anchored" data-anchor-id="stable-diffusion-v1-4">Stable Diffusion v1-4</h2>
<div id="935cda8e-6ff3-46df-809b-644e1bafce7e" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">plot_all_results(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CompVis/stable-diffusion-v1-4'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-26-guidance-expts-8/index_files/figure-html/cell-21-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-26-guidance-expts-8/index_files/figure-html/cell-21-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="stable-diffusion-v1-5" class="level2">
<h2 class="anchored" data-anchor-id="stable-diffusion-v1-5">Stable Diffusion v1-5</h2>
<div id="f6b0297a-ba15-4f66-9779-835f002af7d7" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">plot_all_results(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'runwayml/stable-diffusion-v1-5'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-26-guidance-expts-8/index_files/figure-html/cell-22-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-26-guidance-expts-8/index_files/figure-html/cell-22-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="openjourney" class="level2">
<h2 class="anchored" data-anchor-id="openjourney">openjourney</h2>
<div id="a8057996-d7e0-41e8-8245-b99b4783e42e" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">plot_all_results(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prompthero/openjourney'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-26-guidance-expts-8/index_files/figure-html/cell-23-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-26-guidance-expts-8/index_files/figure-html/cell-23-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="stable-diffusion-2-base" class="level2">
<h2 class="anchored" data-anchor-id="stable-diffusion-2-base">Stable Diffusion 2-base</h2>
<div id="f7cd5518-b1d8-4c10-a4a6-34a5c6b3ddbe" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">plot_all_results(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'stabilityai/stable-diffusion-2-base'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-26-guidance-expts-8/index_files/figure-html/cell-24-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-26-guidance-expts-8/index_files/figure-html/cell-24-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="evaluating-the-outputs" class="level2">
<h2 class="anchored" data-anchor-id="evaluating-the-outputs">Evaluating the outputs</h2>
<p>In general, it seems that <code>Prediction Normalization</code> adds more details to the image and background. <code>T-Normalization</code> makes the image “smoother” and can help with its syntax. <code>Full Normalization</code>, which is a combination of the two, seems to get a bit from both worlds.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this notebook we checked whether normalizing and scheduling the Classifier-free Guidance improves Diffusion images.</p>
<p>It seems that, overall, a dynamic Guidance does make the images better. It will be especially interesting to explore this further with Stable Diffusion v2 given the new prompt structure.</p>
<p>If you are generating an image and details or syntax are the main concerns, then dynamic Guidances could be an easy way to get better outputs!</p>


</section>

 ]]></description>
  <category>diffusion</category>
  <category>classifier-free guidance</category>
  <category>deep learning</category>
  <guid>https://enzokro.dev/blog/posts/2022-11-26-guidance-expts-8/</guid>
  <pubDate>Sun, 27 Nov 2022 05:00:00 GMT</pubDate>
  <media:content url="https://enzokro.dev/blog/posts/2022-11-26-guidance-expts-8/better_inca.png" medium="image" type="image/png" height="180" width="144"/>
</item>
<item>
  <title>Classifier-free Guidance with Cosine Schedules Pt. 6</title>
  <dc:creator>enzokro </dc:creator>
  <link>https://enzokro.dev/blog/posts/2022-11-25-guidance-expts-7/</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>Combining the best schedules and normalizations so far.</p>
</blockquote>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This notebook is Part 6 in a <a href="https://enzokro.dev/blog/posts/2022-11-15-guidance-expts-5/">series</a> on dynamic Classifier-free Guidance. It combines the best schedules and normalizations we’ve found so far.</p>
<section id="recap-of-parts-1-5" class="level2">
<h2 class="anchored" data-anchor-id="recap-of-parts-1-5">Recap of Parts 1-5</h2>
<p>The first five parts explored how to turn Classifier-free Guidance into a dynamic process. We found a good set of schedules and normalizations that seem to improve the output of diffusion image models.</p>
</section>
<section id="part-6-putting-it-all-together" class="level2">
<h2 class="anchored" data-anchor-id="part-6-putting-it-all-together">Part 6: Putting it all together</h2>
<p>Part 6 brings together our best approaches so far. Specifically, it explores the following schedules:</p>
<ul>
<li><code>kDecay</code> with large <img src="https://latex.codecogs.com/png.latex?k"> values.<br>
</li>
<li><code>Inverse kDecay</code> with small <img src="https://latex.codecogs.com/png.latex?k"> values.</li>
</ul>
<p>On all three Guidance normalizations:</p>
<ul>
<li><code>Prediction Normalization</code><br>
</li>
<li><code>T-Normalization</code><br>
</li>
<li><code>Full Normalization</code></li>
</ul>
</section>
</section>
<section id="python-imports" class="level1">
<h1>Python imports</h1>
<p>We start with a few python imports.</p>
<div id="ea1e75a0-0d64-436f-b9d8-d641393dca3a" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.colors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mcolors</span></code></pre></div>
</div>
<section id="seed-for-reproducibility" class="level2">
<h2 class="anchored" data-anchor-id="seed-for-reproducibility">Seed for reproducibility</h2>
<p><code>seed_everything</code> makes sure that the results are reproducible across notebooks.</p>
<div id="58d6c482-17da-41df-9605-4759b3281944" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set the seed and pseudo random number generator</span></span>
<span id="cb2-2">SEED <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> seed_everything(seed):</span>
<span id="cb2-4">    random.seed(seed)</span>
<span id="cb2-5">    os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PYTHONHASHSEED'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(seed)</span>
<span id="cb2-6">    np.random.seed(seed)</span>
<span id="cb2-7">    generator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.manual_seed(seed)</span>
<span id="cb2-8">    torch.backends.cudnn.deterministic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb2-9">    torch.backends.cudnn.benchmark <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb2-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> generator</span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for sampling the initial, noisy latents</span></span>
<span id="cb2-13">generator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seed_everything(SEED)</span></code></pre></div>
</div>
</section>
</section>
<section id="cosine-schedules-with-k-decay" class="level1">
<h1>Cosine schedules with k-decay</h1>
<p>We create the schedules with different <img src="https://latex.codecogs.com/png.latex?k"> values using the <code>cf_guidance</code> library.</p>
<div id="1b0cacb1-b98f-47b2-965f-71c71d03b043" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># helpers to create cosine schedules</span></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cf_guidance.schedules  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_cos_sched</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># normalizations for classifier-free guidance</span></span>
<span id="cb3-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cf_guidance.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GuidanceTfm, BaseNormGuidance, TNormGuidance, FullNormGuidance</span></code></pre></div>
</div>
<p>For the other schedule parameters, we keep the <a href="https://enzokro.dev/blog/posts/2022-11-20-guidance-expts-2/#default-schedule-parameters">same values</a> from the rest of the series. The functions below are also shared with previous notebooks.</p>
<div id="c4d2d542-01de-4ca8-bb1f-de35ff167744" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Default schedule parameters from the blog post</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">######################################</span></span>
<span id="cb4-3">max_val           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># guidance scaling value</span></span>
<span id="cb4-4">min_val           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minimum guidance scaling</span></span>
<span id="cb4-5">num_steps         <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of diffusion steps</span></span>
<span id="cb4-6">num_warmup_steps  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of warmup steps</span></span>
<span id="cb4-7">warmup_init_val   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the intial warmup value</span></span>
<span id="cb4-8">num_cycles        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of cosine cycles</span></span>
<span id="cb4-9">k_decay           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># k-decay for cosine curve scaling </span></span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># smaller values for T-Norm and FullNorm</span></span>
<span id="cb4-12">max_T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span></span>
<span id="cb4-13">min_T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">######################################</span></span>
<span id="cb4-15"></span>
<span id="cb4-16">DEFAULT_COS_PARAMS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb4-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>:           max_val,</span>
<span id="cb4-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_steps'</span>:         num_steps,</span>
<span id="cb4-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_val'</span>:           min_val,</span>
<span id="cb4-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_cycles'</span>:        num_cycles,</span>
<span id="cb4-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k_decay'</span>:           k_decay,</span>
<span id="cb4-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_warmup_steps'</span>:  num_warmup_steps,</span>
<span id="cb4-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warmup_init_val'</span>:   warmup_init_val,</span>
<span id="cb4-24">}</span>
<span id="cb4-25"></span>
<span id="cb4-26">DEFAULT_T_PARAMS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb4-27">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>:           max_T,</span>
<span id="cb4-28">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_steps'</span>:         num_steps,</span>
<span id="cb4-29">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_val'</span>:           min_T,</span>
<span id="cb4-30">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_cycles'</span>:        num_cycles,</span>
<span id="cb4-31">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k_decay'</span>:           k_decay,</span>
<span id="cb4-32">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_warmup_steps'</span>:  num_warmup_steps,</span>
<span id="cb4-33">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warmup_init_val'</span>:   warmup_init_val,</span>
<span id="cb4-34">}</span>
<span id="cb4-35"></span>
<span id="cb4-36"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> cos_harness(default_params, new_params):</span>
<span id="cb4-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Creates cosine schedules with updated parameters in `new_params`</span></span>
<span id="cb4-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb4-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start from the given baseline `default_params`</span></span>
<span id="cb4-40">    cos_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(default_params)</span>
<span id="cb4-41">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the with the new, given parameters</span></span>
<span id="cb4-42">    cos_params.update(new_params)</span>
<span id="cb4-43">    </span>
<span id="cb4-44">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return the new cosine schedule</span></span>
<span id="cb4-45">    sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_cos_sched(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>cos_params)</span>
<span id="cb4-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sched</span>
<span id="cb4-47"></span>
<span id="cb4-48"></span>
<span id="cb4-49"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_expts(params: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>, schedule_func) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>:</span>
<span id="cb4-50">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Creates a list of experiments.</span></span>
<span id="cb4-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb4-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Each element is a dictionary with the name, value, and schedule for a given parameter.</span></span>
<span id="cb4-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A `title` field is also added for easy plotting.</span></span>
<span id="cb4-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb4-55">    names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(params)</span>
<span id="cb4-56">    expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-57">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step through parameter names and their values</span></span>
<span id="cb4-58">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(names):</span>
<span id="cb4-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j,val <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(params[name]):</span>
<span id="cb4-60">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the experiment</span></span>
<span id="cb4-61">            expt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'param_name'</span>: name,</span>
<span id="cb4-62">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>: val,</span>
<span id="cb4-63">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>: schedule_func(new_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{name:val})}</span>
<span id="cb4-64">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># name for plotting</span></span>
<span id="cb4-65">            expt[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Param: "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">", val=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>val<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb4-66">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add it to the experiment list</span></span>
<span id="cb4-67">            expts.append(expt)</span>
<span id="cb4-68">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> expts</span></code></pre></div>
</div>
<p>Next we create the best k-decay cosine schedules.</p>
<div id="9fe94d2d-47e6-490d-a491-affa4c1920c3" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the k-decay cosine experiments</span></span>
<span id="cb5-2">k_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k_decay'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]}</span>
<span id="cb5-3">k_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(cos_harness, default_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DEFAULT_COS_PARAMS)</span>
<span id="cb5-4">k_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_expts(k_params, k_func)</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># setup for the Inverse-k-decay cosine schedules</span></span>
<span id="cb5-7">inv_k_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k_decay'</span>: [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>]}</span>
<span id="cb5-8">inv_k_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(cos_harness, default_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DEFAULT_COS_PARAMS)</span>
<span id="cb5-9">inv_k_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_expts(inv_k_params, inv_k_func)</span>
<span id="cb5-10"></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># invert the `k` schedules with small values</span></span>
<span id="cb5-12">tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> inv_k_expts:</span>
<span id="cb5-14">    new_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(s)</span>
<span id="cb5-15">    inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [max_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> min_val <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> g <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> s[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>]]</span>
<span id="cb5-16">    new_vals[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inv</span>
<span id="cb5-17">    tmp.append(new_vals)</span>
<span id="cb5-18">inv_k_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tmp</span>
<span id="cb5-19"></span>
<span id="cb5-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># put all schedules together</span></span>
<span id="cb5-21">all_k_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> k_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> inv_k_expts</span></code></pre></div>
</div>
<div id="b4e24a44-23d9-486f-9030-91e8d85fb199" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-25-guidance-expts-7/index_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="9b631d08-6d5c-493b-a890-a081977eea6d" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-25-guidance-expts-7/index_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We repeat this for the <code>T</code> and <code>Full</code> Normalizations as well</p>
<div id="959f09d8-5a29-4289-bece-c2010572e55b" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the k-decay cosine experiments</span></span>
<span id="cb6-2">T_k_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(cos_harness, default_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DEFAULT_T_PARAMS)</span>
<span id="cb6-3">T_k_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_expts(k_params, T_k_func)</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the Inverse-k-decay cosine experiments</span></span>
<span id="cb6-6">T_inv_k_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(cos_harness, default_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DEFAULT_T_PARAMS)</span>
<span id="cb6-7">T_inv_k_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_expts(inv_k_params, T_inv_k_func)</span>
<span id="cb6-8"></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stores the inverted schedules</span></span>
<span id="cb6-10">tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># flip the schedules</span></span>
<span id="cb6-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> T_inv_k_expts:</span>
<span id="cb6-13">    new_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(s)</span>
<span id="cb6-14">    inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [max_T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> min_T <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> g <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> s[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>]]</span>
<span id="cb6-15">    new_vals[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inv</span>
<span id="cb6-16">    tmp.append(new_vals)</span>
<span id="cb6-17">T_inv_k_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tmp</span>
<span id="cb6-18"></span>
<span id="cb6-19">all_T_k_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T_k_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> T_inv_k_expts</span></code></pre></div>
</div>
<div id="8a0757ce-6a53-416a-a9a7-aaae83549c09" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-25-guidance-expts-7/index_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="319df1f7-a9d2-4a07-bc67-6b19b33061f2" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-25-guidance-expts-7/index_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="loading-the-stable-diffusion-v1-4-model-from-compvis" class="level1">
<h1>Loading the <code>Stable Diffusion v1-4</code> model from CompVis</h1>
<p>The <code>min_diffusion</code> library loads a Stable Diffusion model from the HuggingFace hub.</p>
<div id="af74809b-8a67-49e9-b435-15556a3fcea0" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to load Stable Diffusion pipelines</span></span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> min_diffusion.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MinimalDiffusion</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to plot generated images</span></span>
<span id="cb7-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> min_diffusion.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> show_image, image_grid, plot_grid</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>2022-11-25 13:55:51.399114: I tensorflow/stream_executor/platform/default/dso_loader.cc:53] Successfully opened dynamic library libcudart.so.11.0</code></pre>
</div>
</div>
<p>We use it to load the <code>Stable Diffusion v1-4</code> model on the GPU, with <code>torch.float16</code> precision.</p>
<div id="aaa29896-dbf1-46ce-8226-559c10203090" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">model_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CompVis/stable-diffusion-v1-4'</span></span>
<span id="cb9-2">device     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span></span>
<span id="cb9-3">dtype      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.float16</span></code></pre></div>
</div>
<div id="74f9e74c-e0ee-43a7-b8c3-1853f3de6372" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MinimalDiffusion(model_name, device, dtype, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generator)</span></code></pre></div>
</div>
<div id="8e276d19-564d-403c-bad7-2dd1d4aebe4b" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">pipeline.load(better_vae<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ema'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Using the improved VAE "ema" from stabiliy.ai
Enabling default unet attention slicing.</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/paperspace/mambaforge/envs/prod/lib/python3.8/site-packages/diffusers/utils/deprecation_utils.py:35: FutureWarning: It is deprecated to pass a pretrained model name or path to `from_config`.If you were trying to load a scheduler, please use &lt;class 'diffusers.schedulers.scheduling_lms_discrete.LMSDiscreteScheduler'&gt;.from_pretrained(...) instead. Otherwise, please make sure to pass a configuration dictionary instead. This functionality will be removed in v1.0.0.
  warnings.warn(warning + message, FutureWarning)</code></pre>
</div>
</div>
</section>
<section id="text-prompt-for-image-generations" class="level1">
<h1>Text prompt for image generations</h1>
<p>We use the familiar, running prompt in our series to generate an image:</p>
<blockquote class="blockquote">
<p>“a photograph of an astronaut riding a horse”</p>
</blockquote>
<div id="f1a10cc5-1463-4d96-bba7-b84e8d0e6089" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># text prompt for image generations</span></span>
<span id="cb14-2">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a photograph of an astronaut riding a horse"</span></span></code></pre></div>
</div>
<section id="image-parameters" class="level2">
<h2 class="anchored" data-anchor-id="image-parameters">Image parameters</h2>
<p>Images will be generated over <img src="https://latex.codecogs.com/png.latex?50"> diffusion steps. They will have a height and width of <code>512 x 512</code> pixels.</p>
<div id="cb50e210-14ed-43a9-a44e-53bff5858db2" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the number of diffusion steps</span></span>
<span id="cb15-2">num_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb15-3"></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generated image dimensions</span></span>
<span id="cb15-5">width, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span></code></pre></div>
</div>
</section>
</section>
<section id="running-the-experiments" class="level1">
<h1>Running the experiments</h1>
<p>The <code>run</code> function below generates images for a given <code>prompt</code>.</p>
<p>It also stores the output images with a matching title for plotting and visualizations.</p>
<div id="bc74e1c7" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run(prompt, schedules, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb16-2">        show_each<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, test_run<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb16-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Runs a dynamic Classifier-free Guidance experiment. </span></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Generates an image for the text `prompt` given all the values in `schedules`.</span></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Uses a Guidance Transformation class from the `cf_guidance` library.  </span></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Stores the output images with a matching title for plotting. </span></span>
<span id="cb16-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Optionally shows each image as its generated.</span></span>
<span id="cb16-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    If `test_run` is true, it runs a single schedule for testing. </span></span>
<span id="cb16-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb16-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># store generated images and their title (the experiment name)</span></span>
<span id="cb16-12">    images, titles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb16-13">    </span>
<span id="cb16-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make sure we have a valid guidance transform</span></span>
<span id="cb16-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> guide_tfm</span>
<span id="cb16-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Using Guidance Transform: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>guide_tfm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb16-17">    </span>
<span id="cb16-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># optionally run a single test schedule</span></span>
<span id="cb16-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> test_run:</span>
<span id="cb16-20">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Running a single schedule for testing.'</span>)</span>
<span id="cb16-21">        schedules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> schedules[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb16-22">        </span>
<span id="cb16-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run all schedule experiments</span></span>
<span id="cb16-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(schedules):</span>
<span id="cb16-25">        </span>
<span id="cb16-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parse out the title for the current run</span></span>
<span id="cb16-27">        cur_title  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>]</span>
<span id="cb16-28">        titles.append(cur_title)</span>
<span id="cb16-29">        </span>
<span id="cb16-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the guidance transformation </span></span>
<span id="cb16-31">        cur_sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>]</span>
<span id="cb16-32">        gtfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> guide_tfm({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'g'</span>: cur_sched})</span>
<span id="cb16-33">        </span>
<span id="cb16-34">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Running experiment [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(schedules)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">]: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cur_title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">...'</span>)</span>
<span id="cb16-35">        img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline.generate(prompt, gtfm, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generator)</span>
<span id="cb16-36">        images.append(img)</span>
<span id="cb16-37">        </span>
<span id="cb16-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># optionally plot the image</span></span>
<span id="cb16-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> show_each:</span>
<span id="cb16-40">            show_image(img, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-41"></span>
<span id="cb16-42">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Done.'</span>)</span>
<span id="cb16-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images'</span>: images,</span>
<span id="cb16-44">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'titles'</span>: titles}</span></code></pre></div>
</div>
<section id="creating-the-baseline-image-with-g-7.5" class="level2">
<h2 class="anchored" data-anchor-id="creating-the-baseline-image-with-g-7.5">Creating the baseline image with <img src="https://latex.codecogs.com/png.latex?G%20=%207.5"></h2>
<p>First we create the baseline image using a constant Classifier-free Guidance with <img src="https://latex.codecogs.com/png.latex?G%20=%207.5">. Since this is a constant schedule, <img src="https://latex.codecogs.com/png.latex?k"> does not come into play.</p>
<div id="4993e135-cf67-4059-821d-203410fc925c" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the baseline schedule with the new function</span></span>
<span id="cb17-2">baseline_g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span></span>
<span id="cb17-3">baseline_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>: [baseline_g]}</span>
<span id="cb17-4">baseline_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs: [baseline_g <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_steps)]</span>
<span id="cb17-5">baseline_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_expts(baseline_params, baseline_func)</span></code></pre></div>
</div>
<div id="e04b1b19-7786-4cd5-8189-d3247b3b1c9f" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">baseline_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(prompt, baseline_expts, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>GuidanceTfm)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Using Guidance Transform: &lt;class 'cf_guidance.transforms.GuidanceTfm'&gt;
Running experiment [1 of 1]: Param: "max_val", val=7.5...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"30363b97ed04484d96fe9a0dbff4269b","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="204bafb8-f2ba-4bca-96cf-320f29ee5cf6" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># view the baseline image</span></span>
<span id="cb20-2">baseline_res[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-25-guidance-expts-7/index_files/figure-html/cell-21-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="improving-the-baseline-with-schedules-and-normalizations" class="level2">
<h2 class="anchored" data-anchor-id="improving-the-baseline-with-schedules-and-normalizations">Improving the baseline with schedules and normalizations</h2>
<p>Now let’s run our <code>kDecay</code> schedules with normalizations. Then we can check how it changed the baseline image.</p>
<p>Since every run starts from the exact same noisy latents, only the schedules and normalizations are affecting the output.</p>
</section>
<section id="prediction-normalization-runs" class="level2">
<h2 class="anchored" data-anchor-id="prediction-normalization-runs"><code>Prediction Normalization</code> runs</h2>
<div id="78095eb2-bedf-46ca-9f4f-083fb220495f" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Running the Prediction Norm experiments...'</span>)</span>
<span id="cb21-2">base_norm_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(prompt, all_k_expts, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BaseNormGuidance)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running the Prediction Norm experiments...
Using Guidance Transform: &lt;class 'cf_guidance.transforms.BaseNormGuidance'&gt;
Running experiment [1 of 8]: Param: "k_decay", val=1...
Running experiment [2 of 8]: Param: "k_decay", val=2...
Running experiment [3 of 8]: Param: "k_decay", val=5...
Running experiment [4 of 8]: Param: "k_decay", val=0.15...
Running experiment [5 of 8]: Param: "k_decay", val=0.2...
Running experiment [6 of 8]: Param: "k_decay", val=0.3...
Running experiment [7 of 8]: Param: "k_decay", val=0.5...
Running experiment [8 of 8]: Param: "k_decay", val=0.7...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f50a98dce79e463784d4cbd536617698","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"53dbd5c7268545a29c37ecd5a3024d41","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c07de3ed6b0e4a2b93e167a4aa321da8","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"882af6bb779b4f898e5f1e6fe6c0daeb","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"fe87cde82d67473581bc0d29673c060c","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"15996bbfe20d40ccb53f81ea31e4a69d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"05c4457c29714b0f878bd7c678a9f553","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"62dd7b4b388647d8b7a8b32c872a6bcc","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
</section>
<section id="t-normalization-runs" class="level2">
<h2 class="anchored" data-anchor-id="t-normalization-runs"><code>T-Normalization</code> runs</h2>
<div id="16943921-4d48-419c-9a54-fff44545c630" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Running the T-Norm experiments...'</span>)</span>
<span id="cb23-2">T_norm_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(prompt, all_T_k_expts, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TNormGuidance)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running the T-Norm experiments...
Using Guidance Transform: &lt;class 'cf_guidance.transforms.TNormGuidance'&gt;
Running experiment [1 of 8]: Param: "k_decay", val=1...
Running experiment [2 of 8]: Param: "k_decay", val=2...
Running experiment [3 of 8]: Param: "k_decay", val=5...
Running experiment [4 of 8]: Param: "k_decay", val=0.15...
Running experiment [5 of 8]: Param: "k_decay", val=0.2...
Running experiment [6 of 8]: Param: "k_decay", val=0.3...
Running experiment [7 of 8]: Param: "k_decay", val=0.5...
Running experiment [8 of 8]: Param: "k_decay", val=0.7...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1f0d3220554544f58264e03ac276599d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"7102142ef3b04b37b4833eea26c09211","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"31b7e06225d84c26a9c8879d04f9e9d7","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1a222890025649679ac2eee9883677a4","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"250b783faad043cf9cfa3eb7cd39b537","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"9b75d89bcb30408f8cbb1c94cd7c87a1","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"5603cd53e77d43d1a68932edd83aa1dd","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1e4728540fbe44fdbd5e276452f320e5","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
</section>
<section id="full-normalization-runs" class="level2">
<h2 class="anchored" data-anchor-id="full-normalization-runs"><code>Full Normalization</code> runs</h2>
<div id="92b70090-5f37-4172-b81f-fe01604ac940" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Running the T-Norm experiments...'</span>)</span>
<span id="cb25-2">full_norm_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(prompt, all_T_k_expts, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>FullNormGuidance)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running the T-Norm experiments...
Using Guidance Transform: &lt;class 'cf_guidance.transforms.FullNormGuidance'&gt;
Running experiment [1 of 8]: Param: "k_decay", val=1...
Running experiment [2 of 8]: Param: "k_decay", val=2...
Running experiment [3 of 8]: Param: "k_decay", val=5...
Running experiment [4 of 8]: Param: "k_decay", val=0.15...
Running experiment [5 of 8]: Param: "k_decay", val=0.2...
Running experiment [6 of 8]: Param: "k_decay", val=0.3...
Running experiment [7 of 8]: Param: "k_decay", val=0.5...
Running experiment [8 of 8]: Param: "k_decay", val=0.7...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"0b93d84a9c764e0785a27c2781ecfddc","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c4b68a0d49064f938d8da8f3f7e1a867","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ad3ffd64f15147b6a8456c0f43ee789c","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f299bc1bbc7641288bfd65084c0c7cf8","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"fc3958441fbb4b86b93cc6752b7c15a7","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"22ca110537f74dd2b98623ac67e1abbf","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"49415d39c880489f8b7f8264aa504ced","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e8eee6857ad34879aa04112a98aeafd1","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
</section>
</section>
<section id="results" class="level1">
<h1>Results</h1>
<section id="prediction-normalization-results" class="level2">
<h2 class="anchored" data-anchor-id="prediction-normalization-results"><code>Prediction Normalization</code> results</h2>
<div id="4acfd44f-b586-4d7b-b128-592c92b44847" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-25-guidance-expts-7/index_files/figure-html/cell-25-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="t-normalization-results" class="level2">
<h2 class="anchored" data-anchor-id="t-normalization-results"><code>T-Normalization</code> results</h2>
<div id="4d2cd389-7805-4245-9568-0c209f9337e1" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-25-guidance-expts-7/index_files/figure-html/cell-26-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="full-normalization-results" class="level2">
<h2 class="anchored" data-anchor-id="full-normalization-results"><code>Full-Normalization</code> results</h2>
<div id="a7a3894f-43b7-41ad-9af6-988a57ef09a5" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-25-guidance-expts-7/index_files/figure-html/cell-27-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="analysis" class="level1">
<h1>Analysis</h1>
<p><code>Inverse kDecay</code> schedules improve the images the most. The regular <code>kDecay</code> schedules also helped, but the improvements are not as drastic.</p>
<p>The sweet spot for <code>Inverse kDecay</code> seems to be between <img src="https://latex.codecogs.com/png.latex?0.15"> and <img src="https://latex.codecogs.com/png.latex?0.3">. It is not fully constant throughout the normalizations either. Sometimes <img src="https://latex.codecogs.com/png.latex?0.15"> is better than <img src="https://latex.codecogs.com/png.latex?0.2"> and vice-versa.</p>
<p>When in doubt, it seems <img src="https://latex.codecogs.com/png.latex?0.2"> is a good middle ground. Perhaps we need to explore this range further, or increase the slope of the initial <code>kDecay</code> warmup.</p>
<section id="prediction-normalization-comparison" class="level2">
<h2 class="anchored" data-anchor-id="prediction-normalization-comparison"><code>Prediction Normalization</code> comparison</h2>
<div id="78af2113-e805-482b-9319-b721116b252f" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-25-guidance-expts-7/index_files/figure-html/cell-28-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="t-normalization-comparison" class="level2">
<h2 class="anchored" data-anchor-id="t-normalization-comparison"><code>T-Normalization</code> comparison</h2>
<div id="db985c17-820d-4e2b-848e-7a447ae5b01f" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-25-guidance-expts-7/index_files/figure-html/cell-29-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="full-normalization-comparison" class="level2">
<h2 class="anchored" data-anchor-id="full-normalization-comparison"><code>Full Normalization</code> comparison</h2>
<div id="38c0be3c-81f4-4ef8-b74a-8f4d3dba0aa0" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-25-guidance-expts-7/index_files/figure-html/cell-30-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="comparing-k-0.15-across-normalizations" class="level2">
<h2 class="anchored" data-anchor-id="comparing-k-0.15-across-normalizations">Comparing <img src="https://latex.codecogs.com/png.latex?k%20=%200.15"> across normalizations</h2>
<div id="a6818840-0670-4f91-9f8a-afde35d56e58" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-25-guidance-expts-7/index_files/figure-html/cell-31-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="comparing-k-0.2-across-normalizations" class="level2">
<h2 class="anchored" data-anchor-id="comparing-k-0.2-across-normalizations">Comparing <img src="https://latex.codecogs.com/png.latex?k%20=%200.2"> across normalizations</h2>
<div id="cd8a9181-25b6-4656-9da0-ad89686e98c0" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-25-guidance-expts-7/index_files/figure-html/cell-32-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="comparing-k-0.3-across-normalizations" class="level2">
<h2 class="anchored" data-anchor-id="comparing-k-0.3-across-normalizations">Comparing <img src="https://latex.codecogs.com/png.latex?k%20=%200.3"> across normalizations</h2>
<div id="76dd5f46-5c33-4c49-95fa-3b3d7366bbcf" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-25-guidance-expts-7/index_files/figure-html/cell-33-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>At this point, the difference in quality between <img src="https://latex.codecogs.com/png.latex?0.15"> and <img src="https://latex.codecogs.com/png.latex?0.2"> becomes subjective. It does seem that 0.2 makes for more stable images across the normalizations. But, 0.15 fixed the astronaut’s leg and arm.</p>
<p><img src="https://latex.codecogs.com/png.latex?0.3"> still improves the image, but we start to lose texture and coherence in the background.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In Part 6 of the series we combined our best schedules so far with normalizations.</p>
<p>We found that normalizations with an <code>Inverse kDecay</code> schedule of <img src="https://latex.codecogs.com/png.latex?k%20=%200.2"> or <img src="https://latex.codecogs.com/png.latex?k%20=%200.15"> improved on the baseline. These schedules gave the background more details, enhanced details on the floor, improved details in the astronaut’s suit, and made the horse more anatomically correct. This confirms our explorations in previous notebooks, which showed that the Guidance scaling had to warmup quickly and/or stay high for as long as possible.</p>
<p>In Part 7, we will check if these gains hold across different Stable Diffusion models.</p>


</section>

 ]]></description>
  <category>diffusion</category>
  <category>classifier-free guidance</category>
  <category>deep learning</category>
  <guid>https://enzokro.dev/blog/posts/2022-11-25-guidance-expts-7/</guid>
  <pubDate>Sat, 26 Nov 2022 05:00:00 GMT</pubDate>
  <media:content url="https://enzokro.dev/blog/posts/2022-11-25-guidance-expts-7/better_horse_6.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Classifier-free Guidance with Cosine Schedules Pt. 5</title>
  <dc:creator>enzokro </dc:creator>
  <link>https://enzokro.dev/blog/posts/2022-11-24-guidance-expts-6/</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>Exploring a range of guidance values for T-Normalization.</p>
</blockquote>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This notebook is Part 5 in a <a href="https://enzokro.dev/blog/posts/2022-11-15-guidance-expts-5">series</a> on dynamic Classifier-free Guidance. It explores smaller <img src="https://latex.codecogs.com/png.latex?G"> values for normalizations.</p>
<section id="recap-of-parts-1-4" class="level2">
<h2 class="anchored" data-anchor-id="recap-of-parts-1-4">Recap of Parts 1-4</h2>
<p>The first three parts explored how to turn Classifier-free Guidance into a dynamic process. We found an initial set of schedules and normalizers that seem to improve the quality of Diffusion images. We then dug in and refined a few of the most promising schedules.</p>
</section>
<section id="part-5-exploring-values-for-t-normalization" class="level2">
<h2 class="anchored" data-anchor-id="part-5-exploring-values-for-t-normalization">Part 5: Exploring values for <code>T-Normalization</code></h2>
<p>Part 5 answers the question: what should the value of <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D"> be for <code>T-Normalization</code> and <code>Full Normalization</code>?</p>
<p>Recall that these two normalizations scale the update vector <img src="https://latex.codecogs.com/png.latex?%5Cleft(t%20-%20u%20%5Cright)">. That places the update vector on a different scale than the unconditioned vector <img src="https://latex.codecogs.com/png.latex?u">. If we then scaled the update vector by a large scalar, say <img src="https://latex.codecogs.com/png.latex?G%20=%207.5">, the output collapses to noise. In fact it seems to collapse to the true mode of the latent image distribution: uniform, brown values.</p>
<p>These two normalizations are very promising: they improve the syntax and details of the image. However, we only explored a single value of <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D%20=%200.15">. This is very different from the default <img src="https://latex.codecogs.com/png.latex?G%20=%207.5"> that has been truly explored in regular Classifier-free Guidance.</p>
<p>This notebook tries to find a good starting point for <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D">, so we can try the normalizations with our best schedules so far.</p>
</section>
</section>
<section id="python-imports" class="level1">
<h1>Python imports</h1>
<p>We start with a few basic python imports.</p>
<div id="e6c6aecb-36f7-4d0b-ad6a-2ddb293c8a2d" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.colors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mcolors</span></code></pre></div>
</div>
<section id="seed-for-reproducibility" class="level2">
<h2 class="anchored" data-anchor-id="seed-for-reproducibility">Seed for reproducibility</h2>
<p><code>seed_everything</code> makes sure that the results are reproducible across notebooks.</p>
<div id="79229c30-e77d-4937-aea9-b6210c9dfe41" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set the seed and pseudo random number generator</span></span>
<span id="cb2-2">SEED <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> seed_everything(seed):</span>
<span id="cb2-4">    random.seed(seed)</span>
<span id="cb2-5">    os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PYTHONHASHSEED'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(seed)</span>
<span id="cb2-6">    np.random.seed(seed)</span>
<span id="cb2-7">    generator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.manual_seed(seed)</span>
<span id="cb2-8">    torch.backends.cudnn.deterministic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb2-9">    torch.backends.cudnn.benchmark <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb2-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> generator</span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for sampling the initial, noisy latents</span></span>
<span id="cb2-13">generator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seed_everything(SEED)</span></code></pre></div>
</div>
</section>
</section>
<section id="constant-schedules-with-a-range-of-g_textsmall-values" class="level1">
<h1>Constant schedules with a range of <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D"> values</h1>
<p>We can try different <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D"> values using the <code>cf_guidance</code> library.</p>
<div id="7172d31f-0019-455c-b9b4-7d6b65d1f947" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># helpers to create cosine schedules</span></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cf_guidance.schedules  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_cos_sched</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># normalizations for classifier-free guidance</span></span>
<span id="cb3-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cf_guidance.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TNormGuidance, FullNormGuidance</span></code></pre></div>
</div>
<p>For the other schedule parameters, we will use the <a href="https://enzokro.dev/blog/posts/2022-11-20-guidance-expts-2/#default-schedule-parameters">same values</a> from the running series on dynamic Classifier-free Guidance.</p>
<div id="2ea4ddfe-1989-4efc-90c4-3f619f71d729" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Default schedule parameters from the blog post</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">######################################</span></span>
<span id="cb4-3">max_val           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># guidance scaling value</span></span>
<span id="cb4-4">min_val           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minimum guidance scaling</span></span>
<span id="cb4-5">num_steps         <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of diffusion steps</span></span>
<span id="cb4-6">num_warmup_steps  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of warmup steps</span></span>
<span id="cb4-7">warmup_init_val   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the intial warmup value</span></span>
<span id="cb4-8">num_cycles        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of cosine cycles</span></span>
<span id="cb4-9">k_decay           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># k-decay for cosine curve scaling </span></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">######################################</span></span>
<span id="cb4-11"></span>
<span id="cb4-12">DEFAULT_COS_PARAMS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb4-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>:           max_val,</span>
<span id="cb4-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_steps'</span>:         num_steps,</span>
<span id="cb4-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_val'</span>:           min_val,</span>
<span id="cb4-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_cycles'</span>:        num_cycles,</span>
<span id="cb4-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k_decay'</span>:           k_decay,</span>
<span id="cb4-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_warmup_steps'</span>:  num_warmup_steps,</span>
<span id="cb4-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warmup_init_val'</span>:   warmup_init_val,</span>
<span id="cb4-20">}</span>
<span id="cb4-21"></span>
<span id="cb4-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> cos_harness(new_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{}, default_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{}):</span>
<span id="cb4-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Creates cosine schedules with updated parameters in `new_params`</span></span>
<span id="cb4-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb4-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start from the given baseline `cos_params`</span></span>
<span id="cb4-26">    cos_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(default_params)</span>
<span id="cb4-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the schedule with any new parameters</span></span>
<span id="cb4-28">    cos_params.update(new_params)</span>
<span id="cb4-29">    </span>
<span id="cb4-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return the new cosine schedule</span></span>
<span id="cb4-31">    sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_cos_sched(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>cos_params)</span>
<span id="cb4-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sched</span>
<span id="cb4-33"></span>
<span id="cb4-34"></span>
<span id="cb4-35"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_expts(params: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>, schedule_func) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>:</span>
<span id="cb4-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Creates a list of experiments.</span></span>
<span id="cb4-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb4-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Each element is a dictionary with the name, value, and schedule for a given parameter.</span></span>
<span id="cb4-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A `title` field is also added for easy plotting.</span></span>
<span id="cb4-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb4-41">    names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(params)</span>
<span id="cb4-42">    expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step through parameter names and their values</span></span>
<span id="cb4-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(names):</span>
<span id="cb4-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j,val <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(params[name]):</span>
<span id="cb4-46">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the experiment</span></span>
<span id="cb4-47">            expt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'param_name'</span>: name,</span>
<span id="cb4-48">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>: val,</span>
<span id="cb4-49">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>: schedule_func(val)}</span>
<span id="cb4-50">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'schedule': schedule_func({name: val})}</span></span>
<span id="cb4-51">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># name for plotting</span></span>
<span id="cb4-52">            expt[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Param: "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">", val=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>val<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb4-53">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add it to the experiment list</span></span>
<span id="cb4-54">            expts.append(expt)</span>
<span id="cb4-55">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> expts</span>
<span id="cb4-56"></span>
<span id="cb4-57"></span>
<span id="cb4-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the constant G_small cosine experiments</span></span>
<span id="cb4-59">const_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>: [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.08</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.22</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>]}</span>
<span id="cb4-60">const_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> val: [val <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_steps)]</span>
<span id="cb4-61">const_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_expts(const_params, const_func)</span></code></pre></div>
</div>
</section>
<section id="plotting-the-g_textsmall-values" class="level1">
<h1>Plotting the <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D"> values</h1>
<div id="a076385c-2110-487f-9e26-c12a0f48d01d" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-24-guidance-expts-6/index_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="loading-the-openjourney-model-from-prompt-hero" class="level1">
<h1>Loading the <code>openjourney</code> model from Prompt Hero</h1>
<p>The <code>min_diffusion</code> library loads a Stable Diffusion model from the HuggingFace hub.</p>
<div id="f2838324-f5af-479c-9304-cd365eceb593" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to load Stable Diffusion pipelines</span></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> min_diffusion.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MinimalDiffusion</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to plot generated images</span></span>
<span id="cb5-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> min_diffusion.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> show_image, image_grid, plot_grid</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>2022-11-24 20:59:11.535760: I tensorflow/stream_executor/platform/default/dso_loader.cc:53] Successfully opened dynamic library libcudart.so.11.0</code></pre>
</div>
</div>
<p>We use it to load the <code>openjourney</code> model on the GPU in <code>torch.float16</code> precision.</p>
<div id="dc39de99-b497-475e-85d4-d778888a4f6d" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">model_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prompthero/openjourney'</span></span>
<span id="cb7-2">device     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span></span>
<span id="cb7-3">dtype      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.float16</span></code></pre></div>
</div>
<div id="8acb8858-01c7-455d-993d-2bbde67fa07a" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MinimalDiffusion(model_name, device, dtype, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generator)</span></code></pre></div>
</div>
<div id="8566621b-1eb8-4a06-8d07-2db6e179810f" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">pipeline.load()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Enabling default unet attention slicing.</code></pre>
</div>
</div>
</section>
<section id="text-prompt-for-image-generations" class="level1">
<h1>Text prompt for image generations</h1>
<p>We use the familiar, running prompt in our series to generate an image:</p>
<blockquote class="blockquote">
<p>“a photograph of an astronaut riding a horse”</p>
</blockquote>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>openjourney</code> model was fine-tuned to create images in the style of <a href="https://mezha.media/en/2022/11/11/midjourney-v4-is-an-incredible-new-version-of-the-ai-image-generator/">Midjourney v4</a>.</p>
<p>To enable this fine-tuned style, we need to add the keyword <code>"mdjrny-v4"</code> at the start of the prompt.</p>
</div>
</div>
<div id="16ba06b2-a9bb-49da-8c77-657df665e651" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># text prompt for image generations</span></span>
<span id="cb11-2">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mdjrny-v4 style a photograph of an astronaut riding a horse"</span></span></code></pre></div>
</div>
<section id="image-parameters" class="level2">
<h2 class="anchored" data-anchor-id="image-parameters">Image parameters</h2>
<p>Images will be generated over <img src="https://latex.codecogs.com/png.latex?50"> diffusion steps. They will have a height and width of <code>512 x 512</code> pixels.</p>
<div id="bc597768-10db-4f64-a7ac-9839eab90833" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the number of diffusion steps</span></span>
<span id="cb12-2">num_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generated image dimensions</span></span>
<span id="cb12-5">width, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span></code></pre></div>
</div>
</section>
</section>
<section id="running-the-experiments" class="level1">
<h1>Running the experiments</h1>
<p>The <code>run</code> function below generates images for the given <code>prompt</code>.</p>
<p>It also stores the output images with a matching title for plotting and visualizations.</p>
<div id="f77a0848-0b0b-41e3-b250-127af7e69fbb" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run(prompt, schedules, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb13-2">        show_each<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, test_run<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb13-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Runs a dynamic Classifier-free Guidance experiment. </span></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Generates an image for the text `prompt` given all the values in `schedules`.</span></span>
<span id="cb13-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Uses a Guidance Transformation class from the `cf_guidance` library.  </span></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Stores the output images with a matching title for plotting. </span></span>
<span id="cb13-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Optionally shows each image as its generated.</span></span>
<span id="cb13-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    If `test_run` is true, it runs a single schedule for testing. </span></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb13-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># store generated images and their title (the experiment name)</span></span>
<span id="cb13-12">    images, titles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb13-13">    </span>
<span id="cb13-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make sure we have a valid guidance transform</span></span>
<span id="cb13-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> guide_tfm</span>
<span id="cb13-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Using Guidance Transform: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>guide_tfm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb13-17">    </span>
<span id="cb13-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># optionally run a single test schedule</span></span>
<span id="cb13-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> test_run:</span>
<span id="cb13-20">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Running a single schedule for testing.'</span>)</span>
<span id="cb13-21">        schedules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> schedules[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb13-22">        </span>
<span id="cb13-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run all schedule experiments</span></span>
<span id="cb13-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(schedules):</span>
<span id="cb13-25">        </span>
<span id="cb13-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parse out the title for the current run</span></span>
<span id="cb13-27">        cur_title  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>]</span>
<span id="cb13-28">        titles.append(cur_title)</span>
<span id="cb13-29">        </span>
<span id="cb13-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the guidance transformation </span></span>
<span id="cb13-31">        cur_sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>]</span>
<span id="cb13-32">        gtfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> guide_tfm({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'g'</span>: cur_sched})</span>
<span id="cb13-33">        </span>
<span id="cb13-34">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Running experiment [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(schedules)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">]: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cur_title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">...'</span>)</span>
<span id="cb13-35">        img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline.generate(prompt, gtfm, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generator)</span>
<span id="cb13-36">        images.append(img)</span>
<span id="cb13-37">        </span>
<span id="cb13-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># optionally plot the image</span></span>
<span id="cb13-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> show_each:</span>
<span id="cb13-40">            show_image(img, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb13-41"></span>
<span id="cb13-42">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Done.'</span>)</span>
<span id="cb13-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images'</span>: images,</span>
<span id="cb13-44">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'titles'</span>: titles}</span></code></pre></div>
</div>
</section>
<section id="sweeping-the-g_textsmall-values" class="level1">
<h1>Sweeping the <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D"> values</h1>
<p>Now we generate images for the range of constant <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D"> values. Then we will check the outputs to see what a good, default value might be.</p>
<section id="t-normalization-with-g_textsmall-sweep" class="level2">
<h2 class="anchored" data-anchor-id="t-normalization-with-g_textsmall-sweep"><code>T-Normalization</code> with <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D"> sweep</h2>
<div id="cd54e431-273a-455b-9363-3a494bfb1ef6" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Running the k-Sweep experiments...'</span>)</span>
<span id="cb14-2">t_norm_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(prompt, const_expts, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TNormGuidance)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running the k-Sweep experiments...
Using Guidance Transform: &lt;class 'cf_guidance.transforms.TNormGuidance'&gt;
Running experiment [1 of 10]: Param: "max_val", val=0.01...
Running experiment [2 of 10]: Param: "max_val", val=0.03...
Running experiment [3 of 10]: Param: "max_val", val=0.05...
Running experiment [4 of 10]: Param: "max_val", val=0.08...
Running experiment [5 of 10]: Param: "max_val", val=0.1...
Running experiment [6 of 10]: Param: "max_val", val=0.15...
Running experiment [7 of 10]: Param: "max_val", val=0.2...
Running experiment [8 of 10]: Param: "max_val", val=0.22...
Running experiment [9 of 10]: Param: "max_val", val=0.25...
Running experiment [10 of 10]: Param: "max_val", val=0.3...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"7aaa31a8ca3e4d74b68c85a5048930c7","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"745cf26e52b241739b29f65854f6cf61","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"733b2ed09b494b11a2eb0031575cd862","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"826085513b7549aebbea3545cbbe3033","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f2851f72a4154e26bf8fd51ad5cb9ffc","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"cbbb7e05f0e94e4cbffe084e4173a630","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e47d0a268b9c4b7aaa3c47ef115932ec","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"45680c77af124e618981f9d966b90c24","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"952b103193784896bad2ed90f8b1e1a0","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ffa8575776a74eee8453ed2632f30a38","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
</section>
<section id="full-normalization-with-g_textsmall-sweep" class="level2">
<h2 class="anchored" data-anchor-id="full-normalization-with-g_textsmall-sweep"><code>Full Normalization</code> with <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D"> sweep</h2>
<div id="93df326b-3c77-40a1-959b-6f871e57a7b4" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Running the k-Sweep experiments...'</span>)</span>
<span id="cb16-2">full_norm_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(prompt, const_expts, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>FullNormGuidance)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running the k-Sweep experiments...
Using Guidance Transform: &lt;class 'cf_guidance.transforms.FullNormGuidance'&gt;
Running experiment [1 of 10]: Param: "max_val", val=0.01...
Running experiment [2 of 10]: Param: "max_val", val=0.03...
Running experiment [3 of 10]: Param: "max_val", val=0.05...
Running experiment [4 of 10]: Param: "max_val", val=0.08...
Running experiment [5 of 10]: Param: "max_val", val=0.1...
Running experiment [6 of 10]: Param: "max_val", val=0.15...
Running experiment [7 of 10]: Param: "max_val", val=0.2...
Running experiment [8 of 10]: Param: "max_val", val=0.22...
Running experiment [9 of 10]: Param: "max_val", val=0.25...
Running experiment [10 of 10]: Param: "max_val", val=0.3...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b2d07e82a84d42fdb43350bb2b2f6402","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f5fd1f1af7bc4561ba8f2429a7ab255d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f2834901df14412ba1d95bcefb97c463","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"2f7d1f54bf6145bd99a211e892eb6cfe","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e3e9b13f8436413d9853c0990e0f6adb","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f9d6d09d3abb467f970ae49af23d07cb","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4259db4c31e54010be9b163dd6f315df","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ccefd891bf69426982aaf7ae98941170","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ba962f66fdc24503b64dc60f5b1681dd","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"2f487df6ed8b46b8b6a9b5b6ef7c6af7","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
</section>
</section>
<section id="results" class="level1">
<h1>Results</h1>
<section id="t-normalization-g_textsmall-results" class="level2">
<h2 class="anchored" data-anchor-id="t-normalization-g_textsmall-results"><code>T-Normalization</code> <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D"> results</h2>
<div id="3c3cf50b-147d-450e-b77f-e0d063de354f" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-24-guidance-expts-6/index_files/figure-html/cell-16-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="full-normalization-g_textsmall-results" class="level2">
<h2 class="anchored" data-anchor-id="full-normalization-g_textsmall-results"><code>Full Normalization</code> <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D"> results</h2>
<div id="a48ff53f-60fe-4101-9c02-447c7379e411" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-24-guidance-expts-6/index_files/figure-html/cell-17-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="analysis" class="level1">
<h1>Analysis</h1>
<p>The sweet spot for <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D"> seems to be between 0.08 and 0.2. But, there are some massive changes between the values. Much more than was expected.</p>
<p>It seems that values below 0.08 are too small. The images never form or are too abstract. Likewise, values above 0.2 start to smear the image with weird colors. Both of these results could be ok for artistic generations, but in this case we are trying to improve the realism and quality of the images.</p>
<section id="phase-change-in-the-image" class="level2">
<h2 class="anchored" data-anchor-id="phase-change-in-the-image">Phase change in the image</h2>
<p>Most interesting, there is a “phase change” between the values of 0.08 and 0.1. The image completely changes style and pose from the previous results we’ve seen so far in the series. This phase change on its own deserves more exploration! What happens around these values of <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D">?</p>
<p>Let’s re-run experiments focused on this range. We will pick 10 points uniformly spread between 0.08 and 0.1 to see if we can catch where the phase changes.</p>
</section>
</section>
<section id="re-runs-to-find-the-phase-change" class="level1">
<h1>Re-runs to find the phase change</h1>
<div id="7b2457c2-422d-43e7-aadc-e0ffe9ddca56" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">low_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.08</span></span>
<span id="cb18-2">hi_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.102</span></span>
<span id="cb18-3">npoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span></span>
<span id="cb18-4"></span>
<span id="cb18-5">points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(low_bound, hi_bound, npoints<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> points</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([0.08 , 0.082, 0.084, 0.086, 0.088, 0.09 , 0.092, 0.094, 0.096,
       0.098, 0.1  , 0.102])</code></pre>
</div>
</div>
<div id="25c3f6ad-1fd0-47cc-a4c3-17cf22d21451" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the constant G_small cosine experiments</span></span>
<span id="cb20-2">phase_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(points)}</span>
<span id="cb20-3">phase_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> val: [val <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_steps)]</span>
<span id="cb20-4">phase_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_expts(phase_params, phase_func)</span></code></pre></div>
</div>
<div id="796f65b7-1b61-44f6-9121-cb773b783dbd" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Running the phase change k-Sweep experiments...'</span>)</span>
<span id="cb21-2">phase_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(prompt, phase_expts, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TNormGuidance)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running the phase change k-Sweep experiments...
Using Guidance Transform: &lt;class 'cf_guidance.transforms.TNormGuidance'&gt;
Running experiment [1 of 12]: Param: "max_val", val=0.08...
Running experiment [2 of 12]: Param: "max_val", val=0.082...
Running experiment [3 of 12]: Param: "max_val", val=0.084...
Running experiment [4 of 12]: Param: "max_val", val=0.086...
Running experiment [5 of 12]: Param: "max_val", val=0.088...
Running experiment [6 of 12]: Param: "max_val", val=0.09...
Running experiment [7 of 12]: Param: "max_val", val=0.092...
Running experiment [8 of 12]: Param: "max_val", val=0.094...
Running experiment [9 of 12]: Param: "max_val", val=0.096...
Running experiment [10 of 12]: Param: "max_val", val=0.09799999999999999...
Running experiment [11 of 12]: Param: "max_val", val=0.09999999999999999...
Running experiment [12 of 12]: Param: "max_val", val=0.102...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4548f35e9803418b95a429525613d79f","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"61f0a29ab9444da6b002781a95f57182","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"89490647f2b44f4696f6a3e1b85f07e6","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c10d19e8cde84ee2968d81768ed0759c","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"fb06ed41d28247b091aff5eedeff6010","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4835c391f40240b3b31577f458f6c83f","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b2e6736de1714388bb394382a2e32005","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b965e3f1e1d14d76b9545002a078d994","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"8924e63e79184dee94db9310c84384ea","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"67907e6646b64c24a05cdae36f288c68","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"372d26ee09204e7bab94d51b31f8e445","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"9bd3fcf2443747b8ad604c0ea0844a68","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<section id="t-normalization-with-g_textsmall-phase-change" class="level2">
<h2 class="anchored" data-anchor-id="t-normalization-with-g_textsmall-phase-change"><code>T-Normalization</code> with <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D"> phase change</h2>
<div id="1b7808b7-42f1-464b-a7ed-e6d5755df7c8" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-24-guidance-expts-6/index_files/figure-html/cell-21-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>It seems the phase change happens between 0.088 and 0.09. Let’s check if this is also true for <code>Full Normalization</code>.</p>
</section>
<section id="full-normalization-with-g_textsmall-phase-change" class="level2">
<h2 class="anchored" data-anchor-id="full-normalization-with-g_textsmall-phase-change"><code>Full Normalization</code> with <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D"> phase change</h2>
<div id="6119f465-e4da-445d-866f-c1fca3098212" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Running the phase change k-Sweep experiments...'</span>)</span>
<span id="cb23-2">full_phase_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(prompt, phase_expts, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>FullNormGuidance)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running the phase change k-Sweep experiments...
Using Guidance Transform: &lt;class 'cf_guidance.transforms.FullNormGuidance'&gt;
Running experiment [1 of 12]: Param: "max_val", val=0.08...
Running experiment [2 of 12]: Param: "max_val", val=0.082...
Running experiment [3 of 12]: Param: "max_val", val=0.084...
Running experiment [4 of 12]: Param: "max_val", val=0.086...
Running experiment [5 of 12]: Param: "max_val", val=0.088...
Running experiment [6 of 12]: Param: "max_val", val=0.09...
Running experiment [7 of 12]: Param: "max_val", val=0.092...
Running experiment [8 of 12]: Param: "max_val", val=0.094...
Running experiment [9 of 12]: Param: "max_val", val=0.096...
Running experiment [10 of 12]: Param: "max_val", val=0.09799999999999999...
Running experiment [11 of 12]: Param: "max_val", val=0.09999999999999999...
Running experiment [12 of 12]: Param: "max_val", val=0.102...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4f00af8030f0419182d3e06d3b18b9b8","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4820bbcb582047799b59e36e80b81f97","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4a9e7dafbaee423dbf83fd08077b7159","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"7d8937635c0d4181832fbf6d568d04fd","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"627b82a266f441799e1817c8f0375a52","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"2799bd3a76a04ff8a856b5c12da03c2b","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"547080a551b84382934b6460714c1a58","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4ab8a2a9413241d1a855d5d1077b602c","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"9514a943917c40fb8b041e3fd40a79c4","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"33d0b1f1b4a64e78a2131e447276595d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e6b85c5c3d2448baa3ff4a86c04d4f46","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"d7b09c18a1df430bb155caa63325d66c","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="ec67553b-422e-4bfd-9d85-9e03c3f04542" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-24-guidance-expts-6/index_files/figure-html/cell-23-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The phase change happens in the same place! In fact the change is more pronounced, there is definitely something strange with the horse’s head as we hit the phase transition around <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D%20=%200.09">.</p>
<p>However, it seems that the image grows darker and less clear as we move away from the phase change. The horse’s body is less illuminated and is even hard to see.</p>
<p>One last check, what if the images before the phase change are better? We already saw that 0.05 was a bit too low, but what about values between 0.06 and 0.08?</p>
</section>
</section>
<section id="re-runs-to-find-earlier-potentially-better-values" class="level1">
<h1>Re-runs to find earlier, potentially better values</h1>
<div id="ecb21527-d127-4d15-80e7-775f82df8269" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">low_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.06</span></span>
<span id="cb25-2">hi_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.082</span></span>
<span id="cb25-3">npoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span></span>
<span id="cb25-4"></span>
<span id="cb25-5">points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(low_bound, hi_bound, npoints<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> points</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([0.06 , 0.062, 0.064, 0.066, 0.068, 0.07 , 0.072, 0.074, 0.076,
       0.078, 0.08 , 0.082])</code></pre>
</div>
</div>
<div id="e9e60d73-b19f-441e-ad16-3757ae160017" class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the constant G_small cosine experiments</span></span>
<span id="cb27-2">early_phase_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(points)}</span>
<span id="cb27-3">early_phase_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> val: [val <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_steps)]</span>
<span id="cb27-4">early_phase_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_expts(early_phase_params, early_phase_func)</span></code></pre></div>
</div>
<div id="e29c6149-0d0f-4d0e-b08d-7fc837fefc9c" class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Running the phase change k-Sweep experiments...'</span>)</span>
<span id="cb28-2">early_phase_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(prompt, early_phase_expts, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TNormGuidance)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running the phase change k-Sweep experiments...
Using Guidance Transform: &lt;class 'cf_guidance.transforms.TNormGuidance'&gt;
Running experiment [1 of 12]: Param: "max_val", val=0.06...
Running experiment [2 of 12]: Param: "max_val", val=0.062...
Running experiment [3 of 12]: Param: "max_val", val=0.064...
Running experiment [4 of 12]: Param: "max_val", val=0.066...
Running experiment [5 of 12]: Param: "max_val", val=0.068...
Running experiment [6 of 12]: Param: "max_val", val=0.07...
Running experiment [7 of 12]: Param: "max_val", val=0.07200000000000001...
Running experiment [8 of 12]: Param: "max_val", val=0.074...
Running experiment [9 of 12]: Param: "max_val", val=0.076...
Running experiment [10 of 12]: Param: "max_val", val=0.078...
Running experiment [11 of 12]: Param: "max_val", val=0.08...
Running experiment [12 of 12]: Param: "max_val", val=0.082...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"fa5e8b637c884371811dddb54cd10299","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"0ec09cac708b4aa98d17d62dff12f874","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"6dc2f510c4a0469888dc96de1b047a62","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"398e1a873cbc42a597f4d6b6d0cf97b0","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"cf2c222a69a844faa9622b7999b3cdd3","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e97e6c1afd97469f9a719a9f23b27d68","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"368cc726b846432b9438ba4f080527ec","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"0177e23af524449bb20a44e7b74b5ca5","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"70fd81a643614284bdc31788b31a8dda","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"9c9d910bca2e4eaaa1aee6a514e11e6a","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"8ac2be282d38437eaf378e604f0b5c75","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"778ef491004943e696ae1cb95371ced0","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="ca7a501c-a2bb-446a-9263-070e4d6613d8" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-24-guidance-expts-6/index_files/figure-html/cell-27-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>This is a mixed bag. The anatomy of the horse’s face is better at lower values, but the rest of the image gains some strange artifacts. For example the horse’s leg starts fraying, and the astronaut merges with horse’s body. It is safe to say we are in “too small” territory for <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D."></p>
</section>
<section id="the-final-check-g-from-0.1-to-0.2" class="level1">
<h1>The final check: <img src="https://latex.codecogs.com/png.latex?G%5C%20"> from <img src="https://latex.codecogs.com/png.latex?0.1"> to <img src="https://latex.codecogs.com/png.latex?0.2"></h1>
<p>There is a noticeable change in the image somewhere between 0.1 and 0.2. Let’s do a small sweep in this range to see what happens.</p>
<div id="62ffb382-1906-4b8d-b308-43a61faa03f9" class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">low_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb30-2">hi_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.202</span></span>
<span id="cb30-3">npoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span></span>
<span id="cb30-4"></span>
<span id="cb30-5">points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(low_bound, hi_bound, npoints<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> points</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([0.1       , 0.10927273, 0.11854545, 0.12781818, 0.13709091,
       0.14636364, 0.15563636, 0.16490909, 0.17418182, 0.18345455,
       0.19272727, 0.202     ])</code></pre>
</div>
</div>
<div id="26bd20fa-009a-47e5-9878-b4f18fc6b2a8" class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the constant G_small cosine experiments</span></span>
<span id="cb32-2">late_phase_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(points)}</span>
<span id="cb32-3">late_phase_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> val: [val <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_steps)]</span>
<span id="cb32-4">late_phase_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_expts(late_phase_params, late_phase_func)</span></code></pre></div>
</div>
<div id="63cc493d-cad8-4c57-a4c7-9b5bbd9520cb" class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Running the phase change k-Sweep experiments...'</span>)</span>
<span id="cb33-2">late_phase_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(prompt, late_phase_expts, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TNormGuidance)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running the phase change k-Sweep experiments...
Using Guidance Transform: &lt;class 'cf_guidance.transforms.TNormGuidance'&gt;
Running experiment [1 of 12]: Param: "max_val", val=0.1...
Running experiment [2 of 12]: Param: "max_val", val=0.10927272727272727...
Running experiment [3 of 12]: Param: "max_val", val=0.11854545454545455...
Running experiment [4 of 12]: Param: "max_val", val=0.12781818181818183...
Running experiment [5 of 12]: Param: "max_val", val=0.1370909090909091...
Running experiment [6 of 12]: Param: "max_val", val=0.14636363636363636...
Running experiment [7 of 12]: Param: "max_val", val=0.15563636363636363...
Running experiment [8 of 12]: Param: "max_val", val=0.16490909090909092...
Running experiment [9 of 12]: Param: "max_val", val=0.1741818181818182...
Running experiment [10 of 12]: Param: "max_val", val=0.18345454545454545...
Running experiment [11 of 12]: Param: "max_val", val=0.19272727272727275...
Running experiment [12 of 12]: Param: "max_val", val=0.202...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"02cf60c7691a4b2d854c83354884ac5e","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"823754a07b6f48c2ab057f764e7820c1","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4093a9d3fb4b4222a0da26e679229494","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4e482b8aabb04d778ae8020ba1e04b4e","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"91a77b8506e54c8484b2003f88a15a4e","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"163a0471b5914ae1bb2afc45161e35d8","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"35bf8a60b71d47ac80f090a23d8112d9","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"252dcf1904fb4e39972eb434571c6998","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"3605133591214da784b953485520548e","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"d5280609098f41b19b7f4b3c6eedfe48","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"0297bb58b4ac4c78a03362ba0d276f3e","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"2da8d0080c3e4a92a201a50e327263ba","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="f9941c15-53c9-4e91-afc4-e431776deb0d" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-24-guidance-expts-6/index_files/figure-html/cell-31-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Another phase change! Almost exactly at twice the <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D"> from the previous phase change. And, after this second phase change, we re-gain some illumination on the horse’s body.</p>
<section id="checking-for-phase-change-multiples" class="level2">
<h2 class="anchored" data-anchor-id="checking-for-phase-change-multiples">Checking for phase change multiples</h2>
<p>Will we find another phase change around three times from the first one? Let’s find out.</p>
<div id="1ff185c4-7383-4a35-9a2b-f2a1611e70e0" class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">low_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span></span>
<span id="cb35-2">hi_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.29</span></span>
<span id="cb35-3">npoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span></span>
<span id="cb35-4"></span>
<span id="cb35-5">points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(low_bound, hi_bound, npoints<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> points</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([0.25      , 0.25363636, 0.25727273, 0.26090909, 0.26454545,
       0.26818182, 0.27181818, 0.27545455, 0.27909091, 0.28272727,
       0.28636364, 0.29      ])</code></pre>
</div>
</div>
<div id="f28dd5c4-cbc9-480e-840b-4560e0cb14d3" class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the constant G_small cosine experiments</span></span>
<span id="cb37-2">later_phase_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(points)}</span>
<span id="cb37-3">later_phase_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> val: [val <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_steps)]</span>
<span id="cb37-4">later_phase_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_expts(later_phase_params, later_phase_func)</span></code></pre></div>
</div>
<div id="abde53bd-c4cf-4037-a6ed-c019142937b8" class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Running the phase change k-Sweep experiments...'</span>)</span>
<span id="cb38-2">later_phase_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(prompt, later_phase_expts, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TNormGuidance)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running the phase change k-Sweep experiments...
Using Guidance Transform: &lt;class 'cf_guidance.transforms.TNormGuidance'&gt;
Running experiment [1 of 12]: Param: "max_val", val=0.25...
Running experiment [2 of 12]: Param: "max_val", val=0.25363636363636366...
Running experiment [3 of 12]: Param: "max_val", val=0.25727272727272726...
Running experiment [4 of 12]: Param: "max_val", val=0.2609090909090909...
Running experiment [5 of 12]: Param: "max_val", val=0.26454545454545453...
Running experiment [6 of 12]: Param: "max_val", val=0.2681818181818182...
Running experiment [7 of 12]: Param: "max_val", val=0.2718181818181818...
Running experiment [8 of 12]: Param: "max_val", val=0.27545454545454545...
Running experiment [9 of 12]: Param: "max_val", val=0.27909090909090906...
Running experiment [10 of 12]: Param: "max_val", val=0.2827272727272727...
Running experiment [11 of 12]: Param: "max_val", val=0.2863636363636364...
Running experiment [12 of 12]: Param: "max_val", val=0.29...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"a1cd4f973df44da98eb52aa801fc7a2a","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"43ca061400c0470882fd1a0248a3b922","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4cd0f63f6c964c2fa2c2d58d05a92302","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1a92681a4ba146f7aa85fe7932cdb9fc","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e815ba8a555b44f9bc70cbdce72ec242","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4f5b22ee75184e0b9aa8d94136a700f7","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ed54fd99ca5141b3957b5dff3b95d179","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"0aeecdcfcbcc4e48b3774cc5a5690d9f","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"395d15aefe3f4bd788d43c46a49b32bf","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f1485478a6bf446d83548120d0286b26","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"88f5332a7fbb48cba2cd5c3fa7c80fd5","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"5de84e9844bd4480b6859ba7693805a1","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="529d743e-caa3-444d-9422-30cba77c2e8d" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-24-guidance-expts-6/index_files/figure-html/cell-35-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>There is no clear phase change, but the image is starting to fall apart. It is safe to say we are in territory where <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D"> is too large.</p>
<p><img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D%20=%200.25"> is the last image where we have a fully correct, non-smeared astronaut.</p>
</section>
</section>
<section id="cosines-for-the-best-g_textsmall" class="level1">
<h1>Cosines for the best <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D"></h1>
<p>We saw that that <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D"> should be between 0.08 and 0.25. What happens if we try cosine schedules around these values?</p>
<div id="282cb148-9353-48d1-a0e9-099c1576ff95" class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_cos_expts(params: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>, schedule_func) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>:</span>
<span id="cb40-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Creates a list of experiments.</span></span>
<span id="cb40-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb40-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Each element is a dictionary with the name, value, and schedule for a given parameter.</span></span>
<span id="cb40-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A `title` field is also added for easy plotting.</span></span>
<span id="cb40-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb40-7">    names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(params)</span>
<span id="cb40-8">    expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb40-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step through parameter names and their values</span></span>
<span id="cb40-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(names):</span>
<span id="cb40-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j,val <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(params[name]):</span>
<span id="cb40-12">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the experiment</span></span>
<span id="cb40-13">            expt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'param_name'</span>: name,</span>
<span id="cb40-14">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>: val,</span>
<span id="cb40-15">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>: schedule_func({name: val})}</span>
<span id="cb40-16">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'schedule': schedule_func({name: val})}</span></span>
<span id="cb40-17">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># name for plotting</span></span>
<span id="cb40-18">            expt[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Param: "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">", val=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>val<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb40-19">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add it to the experiment list</span></span>
<span id="cb40-20">            expts.append(expt)</span>
<span id="cb40-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> expts</span></code></pre></div>
</div>
<p>Let’s sweep a few cosine schedules between the ideal <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D"> range.</p>
<div id="d3d4de3a-da29-4f4d-8179-848f2dba078f" class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">low_cos_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.08</span></span>
<span id="cb41-2">hi_cos_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span></span>
<span id="cb41-3">npoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span></span>
<span id="cb41-4">cos_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(low_cos_bound, hi_cos_bound, npoints<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> cos_points</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([0.08      , 0.09545455, 0.11090909, 0.12636364, 0.14181818,
       0.15727273, 0.17272727, 0.18818182, 0.20363636, 0.21909091,
       0.23454545, 0.25      ])</code></pre>
</div>
</div>
<div id="d5964986-2503-4f35-8829-27306fec5e36" class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the constant G_small cosine experiments</span></span>
<span id="cb43-2">cos_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(cos_points)}</span>
<span id="cb43-3">cos_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(cos_harness, default_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DEFAULT_COS_PARAMS)</span>
<span id="cb43-4">cos_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_cos_expts(cos_params, cos_func)</span></code></pre></div>
</div>
<div id="d4623918-809a-452b-b5a9-58167730a957" class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Running the phase change k-Sweep experiments...'</span>)</span>
<span id="cb44-2">cos_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(prompt, cos_expts, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TNormGuidance)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running the phase change k-Sweep experiments...
Using Guidance Transform: &lt;class 'cf_guidance.transforms.TNormGuidance'&gt;
Running experiment [1 of 12]: Param: "max_val", val=0.08...
Running experiment [2 of 12]: Param: "max_val", val=0.09545454545454546...
Running experiment [3 of 12]: Param: "max_val", val=0.1109090909090909...
Running experiment [4 of 12]: Param: "max_val", val=0.12636363636363634...
Running experiment [5 of 12]: Param: "max_val", val=0.14181818181818182...
Running experiment [6 of 12]: Param: "max_val", val=0.1572727272727273...
Running experiment [7 of 12]: Param: "max_val", val=0.17272727272727273...
Running experiment [8 of 12]: Param: "max_val", val=0.18818181818181817...
Running experiment [9 of 12]: Param: "max_val", val=0.20363636363636362...
Running experiment [10 of 12]: Param: "max_val", val=0.21909090909090906...
Running experiment [11 of 12]: Param: "max_val", val=0.23454545454545456...
Running experiment [12 of 12]: Param: "max_val", val=0.25...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"d8ed64a5413943f085be254c8dd23b29","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"7261bd31f18a451fbc097f788df6b8f4","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"496422598ad94dcb8cf9e99ae5c27ec8","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"de2a811e88e744299495df557d18f7f1","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"23cac14673f2431c84722921eddb27eb","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c0c1208b3763483d96349c1c3b9dfeb4","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"59a4fdfd2ab5427ab15075052aa31d7d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"10deef9af6ce4b36808f91bc94a9a9c3","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4f4d1962483f41d4bc55fa55b885adb4","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"042cc10e18ef4e0c91fde48c5717816f","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e649d6ca67e44c03b111480d5c1c8dfb","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"32346b2fb55245f2b9bf85deba5e58ea","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="b7b2099b-d794-46b3-8e7a-96917cb327b8" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-24-guidance-expts-6/index_files/figure-html/cell-40-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>For completion, let’s try the Cosine sweep on <code>Full Normalization</code></p>
<div id="3cd01569-6e68-4d1f-ab5b-562d02da4e84" class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Running the phase change k-Sweep experiments...'</span>)</span>
<span id="cb46-2">full_norm_cos_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(prompt, cos_expts, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>FullNormGuidance)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running the phase change k-Sweep experiments...
Using Guidance Transform: &lt;class 'cf_guidance.transforms.FullNormGuidance'&gt;
Running experiment [1 of 12]: Param: "max_val", val=0.08...
Running experiment [2 of 12]: Param: "max_val", val=0.09545454545454546...
Running experiment [3 of 12]: Param: "max_val", val=0.1109090909090909...
Running experiment [4 of 12]: Param: "max_val", val=0.12636363636363634...
Running experiment [5 of 12]: Param: "max_val", val=0.14181818181818182...
Running experiment [6 of 12]: Param: "max_val", val=0.1572727272727273...
Running experiment [7 of 12]: Param: "max_val", val=0.17272727272727273...
Running experiment [8 of 12]: Param: "max_val", val=0.18818181818181817...
Running experiment [9 of 12]: Param: "max_val", val=0.20363636363636362...
Running experiment [10 of 12]: Param: "max_val", val=0.21909090909090906...
Running experiment [11 of 12]: Param: "max_val", val=0.23454545454545456...
Running experiment [12 of 12]: Param: "max_val", val=0.25...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1e07f0f9e60946f8a4c66061eb149588","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f7889191cafb4105875d078b570eeee2","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"d2dcbf92232043e280e2c1e119cce071","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b5b96cbfc7fb4650a1ff8af3419514bc","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"3e70b224a2b641f7bd72be495fabd535","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"57f9753973624a5abd6a471a420dc2ed","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"99233bd974c54d3d900123355ac5f1c0","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"d092dfbefb5446d18de5af52959b2acb","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e81de69f64f24663bd25e2ca08a288e6","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"3d0019d84f7b443388ae053f52373ded","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f0809fd0dac34f8ba1b911f76959f22d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"3125e087d5e84722a23e865ff4f2a51b","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="74675c54-37e5-426c-8222-4d6a8472f2de" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-24-guidance-expts-6/index_files/figure-html/cell-42-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>This was Part 5 in our series on dynamic Classifier-free Guidance.</p>
<p>We found a good range of <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D"> for both <code>T</code> and <code>Full</code> Normalizations. We also tried some basic Cosine Schedules around this ideal range.</p>
<p>In Part 6, we will explore the best schedules for each type of normalization:<br>
- <code>Prediction Normalization</code><br>
- <code>T-Normalization</code><br>
- <code>Full Normalization</code></p>
<p>Specifically, we will plug in the best <code>kDecay</code> Cosine Schedules so far. At that point, we should be able to see a measure and consistent improvement from the original, constant Guidance.</p>


</section>

 ]]></description>
  <category>diffusion</category>
  <category>classifier-free guidance</category>
  <category>deep learning</category>
  <guid>https://enzokro.dev/blog/posts/2022-11-24-guidance-expts-6/</guid>
  <pubDate>Fri, 25 Nov 2022 05:00:00 GMT</pubDate>
  <media:content url="https://enzokro.dev/blog/posts/2022-11-24-guidance-expts-6/better_horse_5.png" medium="image" type="image/png" height="145" width="144"/>
</item>
<item>
  <title>Classifier-free Guidance with Cosine Schedules Pt. 4</title>
  <dc:creator>enzokro </dc:creator>
  <link>https://enzokro.dev/blog/posts/2022-11-24-guidance-expts-5/</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>Exploring the effect of k-decay on Cosine Schedules.</p>
</blockquote>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This notebook is Part 4 in a <a href="https://enzokro.dev/blog/posts/2022-11-15-guidance-expts-4/">series</a> on dynamic Classifier-free Guidance. It explores more advanced schedules for the guidance parameter <img src="https://latex.codecogs.com/png.latex?G">.</p>
<section id="recap-of-parts-1-3" class="level2">
<h2 class="anchored" data-anchor-id="recap-of-parts-1-3">Recap of Parts 1-3</h2>
<p>The first three parts explored how to turn Classifier-free Guidance into a dynamic process. We found an initial set of schedules and normalizers that seem to improve the quality of Diffusion images.</p>
</section>
<section id="part-4-alternative-warmups-for-cosine-schedules" class="level2">
<h2 class="anchored" data-anchor-id="part-4-alternative-warmups-for-cosine-schedules">Part 4: Alternative warmups for cosine schedules</h2>
<p>Part 4 is an exploration of <a href="https://arxiv.org/pdf/2004.05909.pdf">kDecay</a> applied to Cosine Schedules.</p>
<p>The <code>kDecay</code> paper introduces a hyperparameter <img src="https://latex.codecogs.com/png.latex?k"> for scheduled learning rates. This parameter empirically improves the performance of models across many learning rate schedules.</p>
<p>Here we explore two aspects of <img src="https://latex.codecogs.com/png.latex?k"> for the guidance parameter <img src="https://latex.codecogs.com/png.latex?G">:</p>
<ol type="1">
<li>The effect of <img src="https://latex.codecogs.com/png.latex?(%5C%20k%5C%20%3C%5C%201%5C%20)"> and <img src="https://latex.codecogs.com/png.latex?(%5C%20k%5C%20%3E%5C%201%5C%20)"> on the guidance parameter.<br>
</li>
<li>How an inverse <code>kDecay</code> schedule can be used as a type of warm up.</li>
</ol>
</section>
</section>
<section id="python-imports" class="level1">
<h1>Python imports</h1>
<p>We start with a few basic python imports.</p>
<div id="ea1e75a0-0d64-436f-b9d8-d641393dca3a" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.colors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mcolors</span></code></pre></div>
</div>
<section id="seed-for-reproducibility" class="level2">
<h2 class="anchored" data-anchor-id="seed-for-reproducibility">Seed for reproducibility</h2>
<p><code>seed_everything</code> makes sure that the results are reproducible across notebooks.</p>
<div id="58d6c482-17da-41df-9605-4759b3281944" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set the seed and pseudo random number generator</span></span>
<span id="cb2-2">SEED <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> seed_everything(seed):</span>
<span id="cb2-4">    random.seed(seed)</span>
<span id="cb2-5">    os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PYTHONHASHSEED'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(seed)</span>
<span id="cb2-6">    np.random.seed(seed)</span>
<span id="cb2-7">    generator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.manual_seed(seed)</span>
<span id="cb2-8">    torch.backends.cudnn.deterministic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb2-9">    torch.backends.cudnn.benchmark <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb2-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> generator</span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for sampling the initial, noisy latents</span></span>
<span id="cb2-13">generator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seed_everything(SEED)</span></code></pre></div>
</div>
</section>
</section>
<section id="generating-cosines-with-k-decay" class="level1">
<h1>Generating cosines with k-decay</h1>
<p>We can easily create different <img src="https://latex.codecogs.com/png.latex?k"> values with the <code>cf_guidance</code> library.</p>
<div id="1b0cacb1-b98f-47b2-965f-71c71d03b043" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># helpers to create cosine schedules</span></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cf_guidance.schedules  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_cos_sched</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># normalizations for classifier-free guidance</span></span>
<span id="cb3-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cf_guidance.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GuidanceTfm, BaseNormGuidance</span></code></pre></div>
</div>
<p>For the other schedule parameters, we will use the <a href="https://enzokro.dev/blog/posts/2022-11-20-guidance-expts-2/#default-schedule-parameters">same values</a> from the running series.</p>
<p>The rest of the functions below are also brought in from previous notebooks. They are used to create the different schedule values.</p>
<div id="c4d2d542-01de-4ca8-bb1f-de35ff167744" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Default schedule parameters from the blog post</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">######################################</span></span>
<span id="cb4-3">max_val           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># guidance scaling value</span></span>
<span id="cb4-4">min_val           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minimum guidance scaling</span></span>
<span id="cb4-5">num_steps         <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of diffusion steps</span></span>
<span id="cb4-6">num_warmup_steps  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of warmup steps</span></span>
<span id="cb4-7">warmup_init_val   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the intial warmup value</span></span>
<span id="cb4-8">num_cycles        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of cosine cycles</span></span>
<span id="cb4-9">k_decay           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># k-decay for cosine curve scaling </span></span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># smaller values for T-Norm and FullNorm</span></span>
<span id="cb4-12">max_T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span></span>
<span id="cb4-13">min_T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">######################################</span></span>
<span id="cb4-15"></span>
<span id="cb4-16">DEFAULT_COS_PARAMS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb4-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>:           max_val,</span>
<span id="cb4-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_steps'</span>:         num_steps,</span>
<span id="cb4-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_val'</span>:           min_val,</span>
<span id="cb4-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_cycles'</span>:        num_cycles,</span>
<span id="cb4-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k_decay'</span>:           k_decay,</span>
<span id="cb4-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_warmup_steps'</span>:  num_warmup_steps,</span>
<span id="cb4-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warmup_init_val'</span>:   warmup_init_val,</span>
<span id="cb4-24">}</span>
<span id="cb4-25"></span>
<span id="cb4-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> cos_harness(new_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{}, default_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{}):</span>
<span id="cb4-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Creates cosine schedules with updated parameters in `new_params`</span></span>
<span id="cb4-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb4-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start from the given baseline `cos_params`</span></span>
<span id="cb4-30">    cos_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(default_params)</span>
<span id="cb4-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the schedule with any new parameters</span></span>
<span id="cb4-32">    cos_params.update(new_params)</span>
<span id="cb4-33">    </span>
<span id="cb4-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return the new cosine schedule</span></span>
<span id="cb4-35">    sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_cos_sched(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>cos_params)</span>
<span id="cb4-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sched</span>
<span id="cb4-37"></span>
<span id="cb4-38"></span>
<span id="cb4-39"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_expts(params: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>, schedule_func) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>:</span>
<span id="cb4-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Creates a list of experiments.</span></span>
<span id="cb4-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb4-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Each element is a dictionary with the name, value, and schedule for a given parameter.</span></span>
<span id="cb4-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A `title` field is also added for easy plotting.</span></span>
<span id="cb4-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb4-45">    names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(params)</span>
<span id="cb4-46">    expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-47">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step through parameter names and their values</span></span>
<span id="cb4-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(names):</span>
<span id="cb4-49">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j,val <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(params[name]):</span>
<span id="cb4-50">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the experiment</span></span>
<span id="cb4-51">            expt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'param_name'</span>: name,</span>
<span id="cb4-52">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>: val,</span>
<span id="cb4-53">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>: schedule_func({name: val})}</span>
<span id="cb4-54">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># name for plotting</span></span>
<span id="cb4-55">            expt[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Param: "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">", val=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>val<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb4-56">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add it to the experiment list</span></span>
<span id="cb4-57">            expts.append(expt)</span>
<span id="cb4-58">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> expts</span></code></pre></div>
</div>
<p>Next we use the functions above to create the k-decay cosine values.</p>
<div id="9fe94d2d-47e6-490d-a491-affa4c1920c3" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the k-decay cosine experiments</span></span>
<span id="cb5-2">cos_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k_decay'</span>: [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]}</span>
<span id="cb5-3">cos_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(cos_harness, default_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DEFAULT_COS_PARAMS)</span>
<span id="cb5-4">cos_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_expts(cos_params, cos_func)</span></code></pre></div>
</div>
</section>
<section id="plotting-the-different-k-values" class="level1">
<h1>Plotting the different <img src="https://latex.codecogs.com/png.latex?k"> values</h1>
<p>Let’s plot the sweep of <img src="https://latex.codecogs.com/png.latex?k"> values to see how they change the cosine schedule. For reference, the value of <img src="https://latex.codecogs.com/png.latex?k%20=%201"> is the default.</p>
<div id="b4e24a44-23d9-486f-9030-91e8d85fb199" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-24-guidance-expts-5/index_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The curves to the left of the default <img src="https://latex.codecogs.com/png.latex?k%20=%201"> are “squished” by smaller <img src="https://latex.codecogs.com/png.latex?k"> values. While the curves to its right are expanded out.</p>
<p>We see that <img src="https://latex.codecogs.com/png.latex?k"> affects how quickly the guidance parameter decreases. What does this decrease mean for Diffusion images?</p>
<p>Consider that at the start of a diffusion process, the image is pure, random noise. It makes sense to strongly guide the image toward the given input prompt, else the model will freely hallucinate and ignore the prompt. This is the main idea behind Classifier-free Guidance.</p>
<p>What we are trying to find is a different, more gradual increase in <img src="https://latex.codecogs.com/png.latex?G"> that might improve the quality of generated images.</p>
</section>
<section id="inverting-the-kdecay-schedules" class="level1">
<h1>Inverting the <code>kDecay</code> schedules</h1>
<p>An interesting thing happens when we “invert” the <img src="https://latex.codecogs.com/png.latex?k"> schedules. Here, inverting means that we mirror the schedule along it’s y-axis midpoint.</p>
<div id="50786d20-d293-4aa0-940f-92f62eb57308" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stores the inverted schedules</span></span>
<span id="cb6-2">inv_cos_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># flip the schedules</span></span>
<span id="cb6-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cos_expts:</span>
<span id="cb6-6">    new_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(s)</span>
<span id="cb6-7">    inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [max_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> min_val <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> g <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> s[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>]]</span>
<span id="cb6-8">    new_vals[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inv</span>
<span id="cb6-9">    inv_cos_expts.append(new_vals)</span></code></pre></div>
</div>
<div id="63dc5f50-bab1-4946-8d40-734dd4703e03" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-24-guidance-expts-5/index_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Notice how, after inversion, the smallest <img src="https://latex.codecogs.com/png.latex?k"> values become steep warmups that quickly saturate toward the max. By contrast, the largest <img src="https://latex.codecogs.com/png.latex?k"> values now act like extremely slow warmups.</p>
<p>We expect that <img src="https://latex.codecogs.com/png.latex?k"> schedules that quickly reach a high guidance value will generate better images. Likewise, <img src="https://latex.codecogs.com/png.latex?k"> schedules that remain at higher guidance values for longer will do the same.</p>
<p>The open question is whether the smooth, inverse k-decay is a better warmup than a simple linear increase. This question is inspired by the slower, more gradual diffusion variance schedules in recent efforts.</p>
<p>With this full suite of <code>kDecay</code> schedules to explore, we are ready to generate some images.</p>
</section>
<section id="loading-the-openjourney-model-from-prompt-hero" class="level1">
<h1>Loading the <code>openjourney</code> model from Prompt Hero</h1>
<p>The <code>min_diffusion</code> library loads a Stable Diffusion model from the HuggingFace hub.</p>
<div id="af74809b-8a67-49e9-b435-15556a3fcea0" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to load Stable Diffusion pipelines</span></span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> min_diffusion.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MinimalDiffusion</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to plot generated images</span></span>
<span id="cb7-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> min_diffusion.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> show_image, image_grid, plot_grid</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>2022-11-24 17:24:16.457198: I tensorflow/stream_executor/platform/default/dso_loader.cc:53] Successfully opened dynamic library libcudart.so.11.0</code></pre>
</div>
</div>
<p>The following code loads the <code>openjourney</code> model on the GPU, with <code>torch.float16</code> precision.</p>
<div id="aaa29896-dbf1-46ce-8226-559c10203090" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">model_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prompthero/openjourney'</span></span>
<span id="cb9-2">device     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span></span>
<span id="cb9-3">dtype      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.float16</span></code></pre></div>
</div>
<div id="74f9e74c-e0ee-43a7-b8c3-1853f3de6372" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MinimalDiffusion(model_name, device, dtype, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generator)</span></code></pre></div>
</div>
<div id="8e276d19-564d-403c-bad7-2dd1d4aebe4b" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">pipeline.load(unet_attn_slice<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</div>
</section>
<section id="text-prompt-for-image-generations" class="level1">
<h1>Text prompt for image generations</h1>
<p>We use the familiar, running prompt in our series to generate an image:</p>
<blockquote class="blockquote">
<p>“a photograph of an astronaut riding a horse”</p>
</blockquote>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>openjourney</code> model was fine-tuned to create images in the style of <a href="https://mezha.media/en/2022/11/11/midjourney-v4-is-an-incredible-new-version-of-the-ai-image-generator/">Midjourney v4</a>.</p>
<p>To enable this fine-tuned style, we need to add the keyword <code>"mdjrny-v4"</code> at the start of the prompt.</p>
</div>
</div>
<div id="f1a10cc5-1463-4d96-bba7-b84e8d0e6089" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># text prompt for image generations</span></span>
<span id="cb12-2">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mdjrny-v4 style a photograph of an astronaut riding a horse"</span></span></code></pre></div>
</div>
<section id="image-parameters" class="level2">
<h2 class="anchored" data-anchor-id="image-parameters">Image parameters</h2>
<p>Images will be generated over <img src="https://latex.codecogs.com/png.latex?50"> diffusion steps. They will have a height and width of <code>512 x 512</code> pixels.</p>
<div id="cb50e210-14ed-43a9-a44e-53bff5858db2" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the number of diffusion steps</span></span>
<span id="cb13-2">num_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generated image dimensions</span></span>
<span id="cb13-5">width, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span></code></pre></div>
</div>
</section>
</section>
<section id="running-the-experiments" class="level1">
<h1>Running the experiments</h1>
<p>The <code>run</code> function below generates images for the given <code>prompt</code>.</p>
<p>It also stores the output images with a matching title for plotting and visualizations.</p>
<div id="bc74e1c7" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run(prompt, schedules, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb14-2">        show_each<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, test_run<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb14-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Runs a dynamic Classifier-free Guidance experiment. </span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Generates an image for the text `prompt` given all the values in `schedules`.</span></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Uses a Guidance Transformation class from the `cf_guidance` library.  </span></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Stores the output images with a matching title for plotting. </span></span>
<span id="cb14-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Optionally shows each image as its generated.</span></span>
<span id="cb14-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    If `test_run` is true, it runs a single schedule for testing. </span></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb14-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># store generated images and their title (the experiment name)</span></span>
<span id="cb14-12">    images, titles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb14-13">    </span>
<span id="cb14-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make sure we have a valid guidance transform</span></span>
<span id="cb14-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> guide_tfm</span>
<span id="cb14-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Using Guidance Transform: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>guide_tfm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb14-17">    </span>
<span id="cb14-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># optionally run a single test schedule</span></span>
<span id="cb14-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> test_run:</span>
<span id="cb14-20">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Running a single schedule for testing.'</span>)</span>
<span id="cb14-21">        schedules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> schedules[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb14-22">        </span>
<span id="cb14-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run all schedule experiments</span></span>
<span id="cb14-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(schedules):</span>
<span id="cb14-25">        </span>
<span id="cb14-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parse out the title for the current run</span></span>
<span id="cb14-27">        cur_title  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>]</span>
<span id="cb14-28">        titles.append(cur_title)</span>
<span id="cb14-29">        </span>
<span id="cb14-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the guidance transformation </span></span>
<span id="cb14-31">        cur_sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>]</span>
<span id="cb14-32">        gtfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> guide_tfm({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'g'</span>: cur_sched})</span>
<span id="cb14-33">        </span>
<span id="cb14-34">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Running experiment [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(schedules)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">]: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cur_title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">...'</span>)</span>
<span id="cb14-35">        img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline.generate(prompt, gtfm, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generator)</span>
<span id="cb14-36">        images.append(img)</span>
<span id="cb14-37">        </span>
<span id="cb14-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># optionally plot the image</span></span>
<span id="cb14-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> show_each:</span>
<span id="cb14-40">            show_image(img, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-41"></span>
<span id="cb14-42">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Done.'</span>)</span>
<span id="cb14-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images'</span>: images,</span>
<span id="cb14-44">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'titles'</span>: titles}</span></code></pre></div>
</div>
<section id="setting-the-baseline-with-g-7.5" class="level2">
<h2 class="anchored" data-anchor-id="setting-the-baseline-with-g-7.5">Setting the baseline with <img src="https://latex.codecogs.com/png.latex?G%20=%207.5"></h2>
<p>First we create and display the baseline imagine using a constant Classifier-free Guidance with <img src="https://latex.codecogs.com/png.latex?G%20=%207.5">. Since this is a constant schedule, <img src="https://latex.codecogs.com/png.latex?k"> does not come into play.</p>
<div id="4993e135-cf67-4059-821d-203410fc925c" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the baseline schedule with the new function</span></span>
<span id="cb15-2">baseline_g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span></span>
<span id="cb15-3">baseline_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>: [baseline_g]}</span>
<span id="cb15-4">baseline_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> params: [baseline_g <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_steps)]</span>
<span id="cb15-5">baseline_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_expts(baseline_params, baseline_func)</span></code></pre></div>
</div>
<div id="e04b1b19-7786-4cd5-8189-d3247b3b1c9f" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">baseline_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(prompt, baseline_expts, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>GuidanceTfm)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Using Guidance Transform: &lt;class 'cf_guidance.transforms.GuidanceTfm'&gt;
Running experiment [1 of 1]: Param: "max_val", val=7.5...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"3803b3c695a045d7b3868edf7e61349c","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="204bafb8-f2ba-4bca-96cf-320f29ee5cf6" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># view the baseline image</span></span>
<span id="cb18-2">baseline_res[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-24-guidance-expts-5/index_files/figure-html/cell-19-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="improving-the-baseline-with-k-schedules" class="level2">
<h2 class="anchored" data-anchor-id="improving-the-baseline-with-k-schedules">Improving the baseline with <img src="https://latex.codecogs.com/png.latex?k"> schedules</h2>
<p>Now we sweep the Cosine Schedules with different <img src="https://latex.codecogs.com/png.latex?k"> values. Then we will check the output images and compare them to the baseline.</p>
</section>
<section id="k-sweep-runs" class="level2">
<h2 class="anchored" data-anchor-id="k-sweep-runs"><code>k-Sweep</code> runs</h2>
<div id="78095eb2-bedf-46ca-9f4f-083fb220495f" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Running the k-Sweep experiments...'</span>)</span>
<span id="cb19-2">cos_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(prompt, cos_expts, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>GuidanceTfm)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running the k-Sweep experiments...
Using Guidance Transform: &lt;class 'cf_guidance.transforms.GuidanceTfm'&gt;
Running experiment [1 of 10]: Param: "k_decay", val=0.1...
Running experiment [2 of 10]: Param: "k_decay", val=0.2...
Running experiment [3 of 10]: Param: "k_decay", val=0.3...
Running experiment [4 of 10]: Param: "k_decay", val=0.5...
Running experiment [5 of 10]: Param: "k_decay", val=0.7...
Running experiment [6 of 10]: Param: "k_decay", val=1.0...
Running experiment [7 of 10]: Param: "k_decay", val=1.5...
Running experiment [8 of 10]: Param: "k_decay", val=2...
Running experiment [9 of 10]: Param: "k_decay", val=3...
Running experiment [10 of 10]: Param: "k_decay", val=5...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"daa7651f2b794bd59f7ed33239ea8462","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e483d9651c4645a0918bdb466bda607e","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1ea18eb9562e4848a584e0eabafb42e6","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c6e6610389af43f0baf08a0e27032da7","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"108f224d774a42df9a2e9392e05e88cd","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"acf21f5072f5470f8ae32d82106dd255","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e560488a869f47228bced9343fe0bced","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ac4712a1601643e18d81003f402fec69","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"a24823ab0bda4d58a6c5b0dc420bf8d4","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"a8a76b03828a4c5780cf5d75e0097dd8","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
</section>
<section id="inverse-k-sweep-runs" class="level2">
<h2 class="anchored" data-anchor-id="inverse-k-sweep-runs"><code>Inverse k-Sweep</code> runs</h2>
<div id="92b70090-5f37-4172-b81f-fe01604ac940" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Running the Inverse-k-Sweep experiments...'</span>)</span>
<span id="cb21-2">inv_cos_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(prompt, inv_cos_expts, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>GuidanceTfm)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running the Inverse-k-Sweep experiments...
Using Guidance Transform: &lt;class 'cf_guidance.transforms.GuidanceTfm'&gt;
Running experiment [1 of 10]: Param: "k_decay", val=0.1...
Running experiment [2 of 10]: Param: "k_decay", val=0.2...
Running experiment [3 of 10]: Param: "k_decay", val=0.3...
Running experiment [4 of 10]: Param: "k_decay", val=0.5...
Running experiment [5 of 10]: Param: "k_decay", val=0.7...
Running experiment [6 of 10]: Param: "k_decay", val=1.0...
Running experiment [7 of 10]: Param: "k_decay", val=1.5...
Running experiment [8 of 10]: Param: "k_decay", val=2...
Running experiment [9 of 10]: Param: "k_decay", val=3...
Running experiment [10 of 10]: Param: "k_decay", val=5...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"073278d9f1004805801a456e05a08ab1","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"32d1f4acafe946ee9e7c5e435563ef5e","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"84f8e5dc1b904ca1a2172bb943fe41c3","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c73d220b4b3f413f9e525ec78b294119","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c228e74a414f4699a5043bcdb4d8d3a0","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"bac45c76d02c44d3bebb96b5aab93134","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"49602f88896b48888911815a2dfbd52e","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"d46a7de1aa90413cacc39360a4d82a5f","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"cb3977e0b0d84d9e8646eb418600e457","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"2882f7a323ce4476b3bb99cd2029a855","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
</section>
</section>
<section id="results" class="level1">
<h1>Results</h1>
<section id="k-sweep-results" class="level2">
<h2 class="anchored" data-anchor-id="k-sweep-results"><code>k-Sweep</code> results</h2>
<div id="4acfd44f-b586-4d7b-b128-592c92b44847" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-24-guidance-expts-5/index_files/figure-html/cell-22-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="inverse-k-sweep-results" class="level2">
<h2 class="anchored" data-anchor-id="inverse-k-sweep-results"><code>Inverse k-Sweep</code> results</h2>
<div id="4d2cd389-7805-4245-9568-0c209f9337e1" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-24-guidance-expts-5/index_files/figure-html/cell-23-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="analysis" class="level1">
<h1>Analysis</h1>
<p>A few patterns are clear.</p>
<p>The <img src="https://latex.codecogs.com/png.latex?k"> schedules that take too long to reach a high guidance value <img src="https://latex.codecogs.com/png.latex?G"> suffer. This makes sense: it means we allowed the model to hallucinate for too long before guiding it towards the intended prompt.</p>
<p>In the <code>k-Sweep</code> experiments we see a simiar effect with <img src="https://latex.codecogs.com/png.latex?k"> values below <img src="https://latex.codecogs.com/png.latex?1">. It seems that the guidance parameter falls off too quickly and the images became too abstract.</p>
<p>There seems to be a sweet spot where <img src="https://latex.codecogs.com/png.latex?k"> increases quickly and smoothly enough. Or, where it stays high for long enough before smoothly decreasing. The pattern is clear: guidance needs to be both high enough and early enough for good image generations.</p>
<p>Let’s compare the baseline to some of the best <img src="https://latex.codecogs.com/png.latex?k"> generations.</p>
<section id="k-sweep-comparison" class="level2">
<h2 class="anchored" data-anchor-id="k-sweep-comparison"><code>k-Sweep</code> comparison</h2>
<div id="78af2113-e805-482b-9319-b721116b252f" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-24-guidance-expts-5/index_files/figure-html/cell-24-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="inverse-k-sweep-comparison" class="level2">
<h2 class="anchored" data-anchor-id="inverse-k-sweep-comparison"><code>Inverse k-Sweep</code> comparison</h2>
<div id="db985c17-820d-4e2b-848e-7a447ae5b01f" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-24-guidance-expts-5/index_files/figure-html/cell-25-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>In both cases, with a high and smooth value of <img src="https://latex.codecogs.com/png.latex?G">, the output image improved. We gained more details in the background, on the horse’s body, and on the astronaut’s gear.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>This post explored a range of <code>kDecay</code> schedules for dynamic Classifier-free Guidance. We empirically confirmed some of our intuitions about what makes for a good guidance.</p>
<p>Now, thanks to Parts 1-4 in this series, we have a solid understanding of how schedules and normalizations affect the quality of Diffusion images.</p>
<p>In Part 5, we will explore good good starting values for <img src="https://latex.codecogs.com/png.latex?G"> for our other kinds of normalizations. After that, we should have all the pieces of the puzzle to start putting together some powerful dynamic Classifier-free Guidances.</p>
<div id="bb3343f2-b58a-4264-bb13-9777604dfe9d" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"></span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># #| echo: false</span></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># #| include: false</span></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import torch</span></span>
<span id="cb23-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import math</span></span>
<span id="cb23-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import matplotlib.pyplot as plt</span></span>
<span id="cb23-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># num_steps = 50</span></span>
<span id="cb23-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># def log(t, eps = 1e-20):</span></span>
<span id="cb23-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     return torch.log10(t.clamp(min = eps))</span></span>
<span id="cb23-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># t = torch.linspace(0, 1, num_steps)</span></span>
<span id="cb23-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># def alpha_cosine_log_snr(t, s = 0.008):</span></span>
<span id="cb23-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     return -log((torch.cos((t + s) / (1 + s) * math.pi * 0.5) ** -2) - 1, eps = 1e-5)</span></span>
<span id="cb23-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># s = alpha_cosine_log_snr(t)</span></span>
<span id="cb23-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.plot(s)</span></span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>diffusion</category>
  <category>classifier-free guidance</category>
  <category>deep learning</category>
  <guid>https://enzokro.dev/blog/posts/2022-11-24-guidance-expts-5/</guid>
  <pubDate>Thu, 24 Nov 2022 05:00:00 GMT</pubDate>
  <media:content url="https://enzokro.dev/blog/posts/2022-11-24-guidance-expts-5/log_cos_sweep.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>Classifier-free Guidance with Cosine Schedules Pt. 3</title>
  <dc:creator>enzokro </dc:creator>
  <link>https://enzokro.dev/blog/posts/2022-11-23-guidance-expts-4/</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>Experiments with cosine schedules and normalizations for Classifier-free Guidance.</p>
</blockquote>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This notebook is Part 3 in a <a href="https://enzokro.dev/blog/posts/2022-11-15-guidance-expts-3/">series</a> on dynamic Classifier-free Guidance. It combines normalizations and schedules for the guidance parameter <img src="https://latex.codecogs.com/png.latex?G">.</p>
<section id="quick-recap-of-parts-1-and-2" class="level2">
<h2 class="anchored" data-anchor-id="quick-recap-of-parts-1-and-2">Quick recap of Parts 1 and 2</h2>
<p>In Part 1, we generated a baseline image using a constant Classifier-free Guidance. Attempting to improve on the baseline, we swept the guidance parameter <img src="https://latex.codecogs.com/png.latex?G"> over a set of Cosine Schedules.</p>
<p>In Part 2, we introduced normalizations for Classifier-free Guidance. There was one kind of normalization, <code>Prediction Normalization</code>, that seems to improve the overall quality of generated images.</p>
</section>
<section id="part-3-combining-schedules-and-normalizations" class="level2">
<h2 class="anchored" data-anchor-id="part-3-combining-schedules-and-normalizations">Part 3: Combining schedules and normalizations</h2>
<p>In Part 3, we build on the previous results by now combining guidance normalizations <em>and</em> schedules.</p>
<p>The goal is to find a combo of normalized schedules that universally improve the outputs of Diffusion image models.</p>
</section>
<section id="leveraging-a-few-helper-libraries" class="level2">
<h2 class="anchored" data-anchor-id="leveraging-a-few-helper-libraries">Leveraging a few helper libraries</h2>
<p>We reuse our helper libraries to more efficiently run guidance experiments. The two libraries are:</p>
<ul>
<li><code>min_diffusion</code></li>
<li><code>cf_guidance</code></li>
</ul>
<p>They were introduced in <a href="https://enzokro.dev/blog/posts/2022-11-20-minimal-diffusion/">this separate post</a>.</p>
</section>
</section>
<section id="experiment-setup" class="level1">
<h1>Experiment Setup</h1>
<section id="python-imports" class="level2">
<h2 class="anchored" data-anchor-id="python-imports">Python Imports</h2>
<p>First we import the needed python modules.</p>
<div id="cee5cee6" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> List</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> types <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SimpleNamespace</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> L</span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># imports for diffusion models</span></span>
<span id="cb1-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for clean outputs</span></span>
<span id="cb1-19">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ignore"</span>)</span>
<span id="cb1-20">logging.set_verbosity_error()</span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set the hardware device</span></span>
<span id="cb1-23">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mps"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.has_mps <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>2022-11-24 18:34:14.079096: I tensorflow/stream_executor/platform/default/dso_loader.cc:53] Successfully opened dynamic library libcudart.so.11.0</code></pre>
</div>
</div>
<section id="seed-for-reproducibility" class="level3">
<h3 class="anchored" data-anchor-id="seed-for-reproducibility">Seed for reproducibility</h3>
<p>We use the <code>seed_everything</code> function to make sure that the results are repeatable across notebooks.</p>
<div id="1d2b8920-1d71-4d66-8c5a-617b5f337d06" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set the seed and pseudo random number generator</span></span>
<span id="cb3-2">SEED <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> seed_everything(seed):</span>
<span id="cb3-4">    random.seed(seed)</span>
<span id="cb3-5">    os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PYTHONHASHSEED'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(seed)</span>
<span id="cb3-6">    np.random.seed(seed)</span>
<span id="cb3-7">    generator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.manual_seed(seed)</span>
<span id="cb3-8">    torch.backends.cudnn.deterministic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-9">    torch.backends.cudnn.benchmark <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> generator</span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for sampling the initial, noisy latents</span></span>
<span id="cb3-12">generator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seed_everything(SEED)</span></code></pre></div>
</div>
</section>
</section>
<section id="importing-the-helper-libraries" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-helper-libraries">Importing the helper libraries</h2>
<p>The <code>cf_guidance</code> library has the guidance schedules and normalizations.</p>
<div id="ff77c738" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># helpers to create cosine schedules</span></span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cf_guidance.schedules  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_cos_sched</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># normalizations for classifier-free guidance</span></span>
<span id="cb4-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cf_guidance.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GuidanceTfm, BaseNormGuidance, TNormGuidance, FullNormGuidance</span></code></pre></div>
</div>
<p>The <code>min_diffusion</code> library loads a Stable Diffusion model from the HuggingFace hub.</p>
<div id="af74809b-8a67-49e9-b435-15556a3fcea0" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to load Stable Diffusion pipelines</span></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> min_diffusion.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MinimalDiffusion</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to plot generated images</span></span>
<span id="cb5-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> min_diffusion.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> show_image, image_grid, plot_grid</span></code></pre></div>
</div>
</section>
</section>
<section id="loading-the-new-openjourney-model-from-prompt-hero" class="level1">
<h1>Loading the new <code>openjourney</code> model from Prompt Hero</h1>
<p>The following code loads the <code>openjourney</code> Stable Diffusion model on the GPU, with <code>torch.float16</code> precision.</p>
<div id="aaa29896-dbf1-46ce-8226-559c10203090" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">model_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prompthero/openjourney'</span></span>
<span id="cb6-2">device     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span></span>
<span id="cb6-3">dtype      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.float16</span></code></pre></div>
</div>
<div id="74f9e74c-e0ee-43a7-b8c3-1853f3de6372" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MinimalDiffusion(model_name, device, dtype, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generator)</span></code></pre></div>
</div>
<div id="8e276d19-564d-403c-bad7-2dd1d4aebe4b" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">pipeline.load()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Enabling default unet attention slicing.</code></pre>
</div>
</div>
</section>
<section id="text-prompt-for-image-generations" class="level1">
<h1>Text prompt for image generations</h1>
<p>We use the familiar, running prompt in our series to generate an image:</p>
<blockquote class="blockquote">
<p>“a photograph of an astronaut riding a horse”</p>
</blockquote>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>openjourney</code> model was fine-tuned to create images in the style of <a href="https://mezha.media/en/2022/11/11/midjourney-v4-is-an-incredible-new-version-of-the-ai-image-generator/">Midjourney v4</a>.</p>
<p>To enable this fine-tuned style, we need to add the keyword <code>"mdjrny-v4"</code> at the start of the prompt.</p>
</div>
</div>
<div id="f1a10cc5-1463-4d96-bba7-b84e8d0e6089" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># text prompt for image generations</span></span>
<span id="cb10-2">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mdjrny-v4 style a photograph of an astronaut riding a horse"</span></span></code></pre></div>
</div>
<section id="image-parameters" class="level2">
<h2 class="anchored" data-anchor-id="image-parameters">Image parameters</h2>
<p>The images will be generated over <img src="https://latex.codecogs.com/png.latex?50"> diffusion steps. They will have a height and width of <code>512 x 512</code> pixels.</p>
<div id="cb50e210-14ed-43a9-a44e-53bff5858db2" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the number of diffusion steps</span></span>
<span id="cb11-2">num_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generated image dimensions</span></span>
<span id="cb11-5">width, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span></code></pre></div>
</div>
</section>
</section>
<section id="function-to-run-the-experiments" class="level1">
<h1>Function to run the experiments</h1>
<p>The <code>run</code> function below generates images for the text <code>prompt</code>.</p>
<p>The function sweeps a given set of <code>schedules</code> using the guidance normalization <code>guide_tfm</code>. It also stores the output images with a matching title for plotting and visualizations.</p>
<div id="bc74e1c7" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run(prompt, schedules, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb12-2">        show_each<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, test_run<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb12-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Runs a dynamic Classifier-free Guidance experiment. </span></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Generates an image for the text `prompt` given all the values in `schedules`.</span></span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Uses a Guidance Transformation class from the `cf_guidance` library.  </span></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Stores the output images with a matching title for plotting. </span></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Optionally shows each image as its generated.</span></span>
<span id="cb12-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    If `test_run` is true, it runs a single schedule for testing. </span></span>
<span id="cb12-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb12-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># store generated images and their title (the experiment name)</span></span>
<span id="cb12-12">    images, titles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb12-13">    </span>
<span id="cb12-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make sure we have a valid guidance transform</span></span>
<span id="cb12-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> guide_tfm</span>
<span id="cb12-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Using Guidance Transform: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>guide_tfm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb12-17">    </span>
<span id="cb12-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># optionally run a single test schedule</span></span>
<span id="cb12-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> test_run:</span>
<span id="cb12-20">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Running a single schedule for testing.'</span>)</span>
<span id="cb12-21">        schedules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> schedules[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb12-22">        </span>
<span id="cb12-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run all schedule experiments</span></span>
<span id="cb12-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(schedules):</span>
<span id="cb12-25">        </span>
<span id="cb12-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parse out the title for the current run</span></span>
<span id="cb12-27">        cur_title  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>]</span>
<span id="cb12-28">        titles.append(cur_title)</span>
<span id="cb12-29">        </span>
<span id="cb12-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the guidance transformation </span></span>
<span id="cb12-31">        cur_sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>]</span>
<span id="cb12-32">        gtfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> guide_tfm({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'g'</span>: cur_sched})</span>
<span id="cb12-33">        </span>
<span id="cb12-34">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Running experiment [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(schedules)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">]: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cur_title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">...'</span>)</span>
<span id="cb12-35">        img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline.generate(prompt, gtfm, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generator)</span>
<span id="cb12-36">        images.append(img)</span>
<span id="cb12-37">        </span>
<span id="cb12-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># optionally plot the image</span></span>
<span id="cb12-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> show_each:</span>
<span id="cb12-40">            show_image(img, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-41"></span>
<span id="cb12-42">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Done.'</span>)</span>
<span id="cb12-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images'</span>: images,</span>
<span id="cb12-44">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'titles'</span>: titles,}</span></code></pre></div>
</div>
</section>
<section id="the-baseline-constant-guidance-with-g-7.5" class="level1">
<h1>The Baseline: Constant Guidance with <img src="https://latex.codecogs.com/png.latex?G%20=7.5"></h1>
<p>Here we create the baseline image. Then we check how the normalized, scheduled guidances change the output.</p>
<p>The baseline Classifier-free Guidance uses a constant update of <img src="https://latex.codecogs.com/png.latex?G%20=%207.5">.</p>
<div id="6c8258a7" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the baseline Classifier-free Guidance</span></span>
<span id="cb13-2">baseline_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>: [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>]}</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parameters we are sweeping</span></span>
<span id="cb13-5">baselines_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(baseline_params))</span>
<span id="cb13-6">baseline_scheds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L()</span>
<span id="cb13-7"></span>
<span id="cb13-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step through each parameter</span></span>
<span id="cb13-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idx,name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(baselines_names):</span>
<span id="cb13-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step through each of its values</span></span>
<span id="cb13-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idj,val <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(baseline_params[name]):</span>
<span id="cb13-12"></span>
<span id="cb13-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the baseline experimeent</span></span>
<span id="cb13-14">        expt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb13-15">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'param_name'</span>: name,</span>
<span id="cb13-16">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>: val,</span>
<span id="cb13-17">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>: [val <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_steps)]</span>
<span id="cb13-18">        }</span>
<span id="cb13-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for plotting</span></span>
<span id="cb13-20">        expt[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Param: "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">", val=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>val<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb13-21">        </span>
<span id="cb13-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add to the running list of experiments</span></span>
<span id="cb13-23">        baseline_scheds.append(expt)</span></code></pre></div>
</div>
<p>We will be creating a lot of experiments, so let’s put this code in a function.</p>
<div id="63c396a1-ac68-43f7-9485-9cca87fab4e1" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_expts(params: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>, schedule_func) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>:</span>
<span id="cb14-2">    names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(params)</span>
<span id="cb14-3">    expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb14-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step through parameter names and their values</span></span>
<span id="cb14-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(names):</span>
<span id="cb14-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j,val <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(params[name]):</span>
<span id="cb14-7">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the experiment</span></span>
<span id="cb14-8">            expt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'param_name'</span>: name,</span>
<span id="cb14-9">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>: val,</span>
<span id="cb14-10">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>: schedule_func({name: val}),}</span>
<span id="cb14-11">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># name for plotting</span></span>
<span id="cb14-12">            expt[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Param: "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">", val=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>val<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb14-13">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add it to the experiment list</span></span>
<span id="cb14-14">            expts.append(expt)</span>
<span id="cb14-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> expts</span></code></pre></div>
</div>
<div id="b9713950-78b1-4562-b328-e5e4d805671c" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the baseline schedule with the new function</span></span>
<span id="cb15-2">baseline_g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span></span>
<span id="cb15-3">baseline_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>: [baseline_g]}</span>
<span id="cb15-4">baseline_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> params: [baseline_g <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_steps)]</span>
<span id="cb15-5">baseline_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_expts(baseline_params, baseline_func)</span>
<span id="cb15-6">    </span></code></pre></div>
</div>
<p>Let’s create the baseline image. The hope is that our guidance changes will improve on it.</p>
<div id="a13b16b2" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">baseline_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(prompt, baseline_expts, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>GuidanceTfm)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Using Guidance Transform: &lt;class 'cf_guidance.transforms.GuidanceTfm'&gt;
Running experiment [1 of 1]: Param: "max_val", val=7.5...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"3b67d254e88d49a0b83ab1534355df74","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="94b893cb-b642-49af-9135-19043d885b20" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># view the baseline image</span></span>
<span id="cb18-2">baseline_res[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-23-guidance-expts-4/index_files/figure-html/cell-16-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="improving-the-baseline-with-schedules-and-normalizations" class="level1">
<h1>Improving the baseline with schedules and normalizations</h1>
<p>This part is similar to its matching sections in <a href="https://enzokro.dev/blog/posts/2022-11-20-guidance-expts-2/#trying-to-improve-the-baseline">Part 1</a> and <a href="https://enzokro.dev/blog/posts/2022-11-21-guidance-expts-3/#improving-the-baseline-with-normalizations">Part 2</a>.</p>
<p>Here we create the sweep of Cosine Schedules and the normalizations.</p>
<section id="setting-the-schedule-parameters" class="level2">
<h2 class="anchored" data-anchor-id="setting-the-schedule-parameters">Setting the schedule parameters</h2>
<p>Recall that there are three kinds of schedules:</p>
<ol type="1">
<li>A static schedule with a constant <img src="https://latex.codecogs.com/png.latex?G">.<br>
</li>
<li>A decreasing Cosine schedule.<br>
</li>
<li>A Cosine schedule with some initial warm up steps.</li>
</ol>
<p>We already created the static schedule <code>1.</code> in the baseline above. This section creates variations of schedules <code>2.</code> and <code>3.</code>.</p>
<p>:::: {.callout-note}.<br>
We need smaller guidance values for <code>T-Normalization</code> and <code>Full Normalization</code>.</p>
<p>These normalizations get their own, smaller value of <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D%20=%200.15">. This smaller value keeps the guidance update vector <img src="https://latex.codecogs.com/png.latex?%5Cleft(%20t%20-%20u%20%5Cright)"> from exploding in scale.<br>
::::</p>
<div id="03e9352b" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Default schedule parameters from the blog post</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">######################################</span></span>
<span id="cb19-3">max_val           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># guidance scaling value</span></span>
<span id="cb19-4">min_val           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minimum guidance scaling</span></span>
<span id="cb19-5">num_steps         <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of diffusion steps</span></span>
<span id="cb19-6">num_warmup_steps  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of warmup steps</span></span>
<span id="cb19-7">warmup_init_val   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the intial warmup value</span></span>
<span id="cb19-8">num_cycles        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of cosine cycles</span></span>
<span id="cb19-9">k_decay           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># k-decay for cosine curve scaling </span></span>
<span id="cb19-10"></span>
<span id="cb19-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># smaller values for T-Norm and FullNorm</span></span>
<span id="cb19-12">max_T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span></span>
<span id="cb19-13">min_T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span></span>
<span id="cb19-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">######################################</span></span></code></pre></div>
</div>
<p>To make sure our changes always reference this shared starting point, we can wrap these parameters in a dictionary.</p>
<p>We also create a matching dictionary for the <code>T-Norm</code> params.</p>
<div id="e26f3a91" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">DEFAULT_COS_PARAMS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb20-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>:           max_val,</span>
<span id="cb20-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_steps'</span>:         num_steps,</span>
<span id="cb20-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_val'</span>:           min_val,</span>
<span id="cb20-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_cycles'</span>:        num_cycles,</span>
<span id="cb20-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k_decay'</span>:           k_decay,</span>
<span id="cb20-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_warmup_steps'</span>:  num_warmup_steps,</span>
<span id="cb20-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warmup_init_val'</span>:   warmup_init_val,</span>
<span id="cb20-9">}</span>
<span id="cb20-10"></span>
<span id="cb20-11">DEFAULT_T_PARAMS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb20-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>:           max_T, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># max G_small value</span></span>
<span id="cb20-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_steps'</span>:         num_steps,</span>
<span id="cb20-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_val'</span>:           min_T, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># min G_small value</span></span>
<span id="cb20-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_cycles'</span>:        num_cycles,</span>
<span id="cb20-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k_decay'</span>:           k_decay,</span>
<span id="cb20-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_warmup_steps'</span>:  num_warmup_steps,</span>
<span id="cb20-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warmup_init_val'</span>:   warmup_init_val,</span>
<span id="cb20-19">}</span></code></pre></div>
</div>
<p>Every new, incremental schedule will start from these shared dictionaries. Then, a single parameter is changed at a time.</p>
<p>The <code>cos_harness</code> below gives us an easy way of making these minimum-pair changes.</p>
<div id="0bf829ed" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> cos_harness(new_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{}, default_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{}):</span>
<span id="cb21-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Creates cosine schedules with updated parameters in `new_params`</span></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb21-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start from the given baseline `cos_params`</span></span>
<span id="cb21-5">    cos_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(default_params)</span>
<span id="cb21-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the schedule with any new parameters</span></span>
<span id="cb21-7">    cos_params.update(new_params)</span>
<span id="cb21-8">    </span>
<span id="cb21-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return the new cosine schedule</span></span>
<span id="cb21-10">    sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_cos_sched(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>cos_params)</span>
<span id="cb21-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sched</span></code></pre></div>
</div>
</section>
<section id="plotting-the-cosine-schedules" class="level2">
<h2 class="anchored" data-anchor-id="plotting-the-cosine-schedules">Plotting the Cosine Schedules</h2>
<p>Now we create the different Cosine schedules that will be swept.</p>
<div id="330ea91c" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">cos_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb22-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_warmup_steps'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>],</span>
<span id="cb22-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_cycles'</span>:       [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb22-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k_decay'</span>:          [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb22-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>:          [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>],</span>
<span id="cb22-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_val'</span>:          [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],</span>
<span id="cb22-7">}</span>
<span id="cb22-8"></span>
<span id="cb22-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the cosine experiments</span></span>
<span id="cb22-10">cos_func  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(cos_harness, default_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DEFAULT_COS_PARAMS)</span>
<span id="cb22-11">cos_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_expts(cos_params, cos_func)</span></code></pre></div>
</div>
<div id="98ad55be" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">plot_grid([o[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cos_expts], rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, titles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[o[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cos_expts])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-23-guidance-expts-4/index_files/figure-html/cell-21-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We repeat the steps above to create the <code>T-Norm</code> experiments</p>
<div id="000fdc0a-bb6c-4a11-8511-8c8b248a91b9" class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">T_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb24-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_warmup_steps'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>],</span>
<span id="cb24-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_cycles'</span>:       [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb24-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k_decay'</span>:          [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb24-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>:          [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>],</span>
<span id="cb24-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_val'</span>:          [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>],</span>
<span id="cb24-7">}</span>
<span id="cb24-8"></span>
<span id="cb24-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the T-norm cosine experiments</span></span>
<span id="cb24-10">T_func  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(cos_harness, default_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DEFAULT_T_PARAMS)</span>
<span id="cb24-11">T_expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_expts(T_params, T_func)</span></code></pre></div>
</div>
<p>We also plot the <code>T-Norm</code> schedules below. Note that we are trying a few max and min values.</p>
<div id="32c37cb1-e771-4d7d-af8f-29ef38465909" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">plot_grid([o[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> T_expts], rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, titles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[o[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> T_expts])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-23-guidance-expts-4/index_files/figure-html/cell-23-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="running-the-normalized-cosine-experiments" class="level2">
<h2 class="anchored" data-anchor-id="running-the-normalized-cosine-experiments">Running the normalized cosine experiments</h2>
<p>Next we sweep the schedules for each type of normalization.</p>
</section>
<section id="basenorm-runs" class="level2">
<h2 class="anchored" data-anchor-id="basenorm-runs"><code>BaseNorm</code> runs</h2>
<div id="77808631-db65-48b7-aab9-9211d5b6432b" class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Running the BaseNorm experiments...'</span>)</span>
<span id="cb26-2">base_norm_cos_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(prompt, cos_expts, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BaseNormGuidance)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running the BaseNorm experiments...
Using Guidance Transform: &lt;class 'cf_guidance.transforms.BaseNormGuidance'&gt;
Running experiment [1 of 12]: Param: "k_decay", val=0.7...
Running experiment [2 of 12]: Param: "k_decay", val=2...
Running experiment [3 of 12]: Param: "max_val", val=8...
Running experiment [4 of 12]: Param: "max_val", val=10...
Running experiment [5 of 12]: Param: "max_val", val=12...
Running experiment [6 of 12]: Param: "min_val", val=2...
Running experiment [7 of 12]: Param: "min_val", val=3...
Running experiment [8 of 12]: Param: "num_cycles", val=1...
Running experiment [9 of 12]: Param: "num_cycles", val=1.5...
Running experiment [10 of 12]: Param: "num_cycles", val=2...
Running experiment [11 of 12]: Param: "num_warmup_steps", val=5...
Running experiment [12 of 12]: Param: "num_warmup_steps", val=10...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e5b3574a1f264f4cb9595c36ad383854","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"956746bc0a0c468fabf274312a5894dc","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"42277f32eab24b918cd34cc61933f6c2","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c9e861dbdefc4c5fa405eda1b166963b","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"95e161f75f4f4df68da1ed20cb2b926a","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1faa203cdef44bf3b9b71af608bbfa31","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"57da638442ac4058b385df0346a6d24e","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"964dc915a8c44e6cac1498b2b9e7efb7","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"73399e43795a49cd90ccb6b83e6c95f4","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1aabd0febae744f187bfd499606885d0","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"7d236ff24a534f83b4ac441a9b8328ad","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"6b80772c26464e088bc8d166912fd5eb","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
</section>
<section id="t-norm-runs" class="level2">
<h2 class="anchored" data-anchor-id="t-norm-runs"><code>T-Norm</code> runs</h2>
<div id="32cf0965-5156-4c43-9c44-d7cc57ed50ac" class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Running the T-Norm experiments...'</span>)</span>
<span id="cb28-2">t_norm_cos_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(prompt, T_expts, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TNormGuidance)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running the T-Norm experiments...
Using Guidance Transform: &lt;class 'cf_guidance.transforms.TNormGuidance'&gt;
Running experiment [1 of 12]: Param: "k_decay", val=0.7...
Running experiment [2 of 12]: Param: "k_decay", val=2...
Running experiment [3 of 12]: Param: "max_val", val=0.1...
Running experiment [4 of 12]: Param: "max_val", val=0.2...
Running experiment [5 of 12]: Param: "max_val", val=0.3...
Running experiment [6 of 12]: Param: "min_val", val=0.01...
Running experiment [7 of 12]: Param: "min_val", val=0.1...
Running experiment [8 of 12]: Param: "num_cycles", val=1...
Running experiment [9 of 12]: Param: "num_cycles", val=1.5...
Running experiment [10 of 12]: Param: "num_cycles", val=2...
Running experiment [11 of 12]: Param: "num_warmup_steps", val=5...
Running experiment [12 of 12]: Param: "num_warmup_steps", val=10...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"22757c8077f44bc8bd017fb754c9c793","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1da00e586f4542499f37fbcb896690c7","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"5367c8d637794b5e9224dc9d55d6f18d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"3e170f3b919b4e85a49c3a7320ee9335","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"28ce448298ab4db8b149d73de4396b3c","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ac622a8974244d1eade9bc0c931aa287","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1c4715488d7a42cba581b99e488e1f82","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"2c732500aeff4326b13d2bfa640f1e9b","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"96a20bf76b3a46c79adcbfdf93c5009a","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4d8789ae9f14442a8022d4391848b52b","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"20927024afb543099f50afccee32843a","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"7551fb8f96474bdbbdda57640fd5e31c","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
</section>
<section id="fullnorm-runs" class="level2">
<h2 class="anchored" data-anchor-id="fullnorm-runs"><code>FullNorm</code> runs</h2>
<div id="5e04d58b-45ea-4874-968b-32b803e81ff1" class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Running the FullNorm experiments...'</span>)</span>
<span id="cb30-2">full_norm_cos_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(prompt, T_expts, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>FullNormGuidance)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running the FullNorm experiments...
Using Guidance Transform: &lt;class 'cf_guidance.transforms.FullNormGuidance'&gt;
Running experiment [1 of 12]: Param: "k_decay", val=0.7...
Running experiment [2 of 12]: Param: "k_decay", val=2...
Running experiment [3 of 12]: Param: "max_val", val=0.1...
Running experiment [4 of 12]: Param: "max_val", val=0.2...
Running experiment [5 of 12]: Param: "max_val", val=0.3...
Running experiment [6 of 12]: Param: "min_val", val=0.01...
Running experiment [7 of 12]: Param: "min_val", val=0.1...
Running experiment [8 of 12]: Param: "num_cycles", val=1...
Running experiment [9 of 12]: Param: "num_cycles", val=1.5...
Running experiment [10 of 12]: Param: "num_cycles", val=2...
Running experiment [11 of 12]: Param: "num_warmup_steps", val=5...
Running experiment [12 of 12]: Param: "num_warmup_steps", val=10...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"787a15c0da154d45baff48e544fdb084","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"a5381a8e7ec541649d9c7863de42b5be","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"24e74b3f2f0340d393f65a041c30aeb4","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"d95cebf681db4fa48950edc15d285cc0","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"7cdec17deb634f7283eaaf2d80dc9d35","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"660d7a0a36834ffe97b0bafa7ee1b47c","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"20f0888e4d2a42f1a5dec0f3dc9d6d7a","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"42351bec358c458ea1109056bf418d47","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"467b9798d4ed4d45b4d13779737ce5d7","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b7367534fcd640fdbed65bf87a70f866","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b0dd33f489c44e04a54100245deff079","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f971e8685b934128b60d630dc184d338","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
</section>
</section>
<section id="results" class="level1">
<h1>Results</h1>
<section id="basenorm-results" class="level2">
<h2 class="anchored" data-anchor-id="basenorm-results"><code>BaseNorm</code> results</h2>
<div id="242c122a" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-23-guidance-expts-4/index_files/figure-html/cell-27-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="t-norm-results" class="level2">
<h2 class="anchored" data-anchor-id="t-norm-results"><code>T-Norm</code> results</h2>
<div id="fb35309a-a19c-43d3-b3f4-8ba6a1d7538f" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-23-guidance-expts-4/index_files/figure-html/cell-28-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="fullnorm-results" class="level2">
<h2 class="anchored" data-anchor-id="fullnorm-results"><code>FullNorm</code> results</h2>
<div id="92a5fc5a-02ae-4c39-a1b4-5fbe224ec68a" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-23-guidance-expts-4/index_files/figure-html/cell-29-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="analysis" class="level2">
<h2 class="anchored" data-anchor-id="analysis">Analysis</h2>
<p>There are many images and parameter changes going on.</p>
<p>Broadly speaking, across normalizations, the following schedules show the most promise:</p>
<ul>
<li>Changing <code>k-decay</code>.<br>
</li>
<li>Allowing for some warmup steps.<br>
</li>
<li>Increasing the maximum value of <img src="https://latex.codecogs.com/png.latex?G">.<br>
</li>
<li>Allow the cosine to go through more cycles.</li>
</ul>
<p>The other changes either have negligible gains or actively corrupted the image.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>This notebook was Part 3 in a series on dynamic Classifier-free Guidance.</p>
<p>It combined guidance normalizations and schedules to see if we could make even better images.</p>
<p>We found a promising set of changes that seem to improve on the static, constant baseline.</p>
<p>In Part 4, we will dig into some of the promising schedules to find more answers.</p>


</section>

 ]]></description>
  <category>diffusion</category>
  <category>classifier-free guidance</category>
  <category>deep learning</category>
  <guid>https://enzokro.dev/blog/posts/2022-11-23-guidance-expts-4/</guid>
  <pubDate>Wed, 23 Nov 2022 05:00:00 GMT</pubDate>
  <media:content url="https://enzokro.dev/blog/posts/2022-11-23-guidance-expts-4/better_horse_4.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Dynamic Classifier-free Guidance Pt. 2</title>
  <dc:creator>enzokro </dc:creator>
  <link>https://enzokro.dev/blog/posts/2022-11-21-guidance-expts-3/</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>Experiments with normalizations for Classifier-free Guidance.</p>
</blockquote>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This notebook is Part 2 in a <a href="https://enzokro.dev/blog/posts/2022-11-15-guidance-expts-2/">series</a> on dynamic Classifier-free Guidance.</p>
<section id="quick-recap-of-part-1" class="level2">
<h2 class="anchored" data-anchor-id="quick-recap-of-part-1">Quick recap of Part 1</h2>
<p>In Part 1, we generated a baseline image using the default, static Classifier-free Guidance. To see if we could improve on the baseline, we swept a range of Cosine Schedules on the guidance parameter <img src="https://latex.codecogs.com/png.latex?G">.</p>
<p>To recap the results of the sweep, there are a few promising guidance schedules to explore:</p>
<ul>
<li>Setting a higher guidance value.<br>
</li>
<li>Allowing the Cosine schedule to go through multiple cycles.<br>
</li>
<li>Warming up the guidance for a few steps.</li>
</ul>
</section>
<section id="part-2-bringing-in-normalizations" class="level2">
<h2 class="anchored" data-anchor-id="part-2-bringing-in-normalizations">Part 2: Bringing in Normalizations</h2>
<p>In Part 2, we bring in normalizations as another kind of dynamic guidance.</p>
<p>The idea is that normalizing the guidance might improve the updates in the Diffusion model’s latent image space. To test this we explore three kinds of guidance normalizations:</p>
<ol type="1">
<li>Normalizing the prediction by its overall norm.<br>
</li>
<li>Normalizing the guidance update vector, <img src="https://latex.codecogs.com/png.latex?%5Cleft(t%20-%20u%5Cright)">, by its norm.<br>
</li>
<li>Combining the Normalizations in <code>1.</code> and <code>2.</code></li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>More details about the normalizations can be found in <a href="https://enzokro.dev/blog/posts/2022-11-15-guidance-expts-1/#normalizing-the-guidance">this section</a> of the original post.</p>
</div>
</div>
<p>After these runs, we should have a good idea of both the schedules and normalizations that can improve Diffusion images. We will then combine the two approaches and explore other, more advanced schedules.</p>
</section>
<section id="leveraging-a-few-helper-libraries" class="level2">
<h2 class="anchored" data-anchor-id="leveraging-a-few-helper-libraries">Leveraging a few helper libraries</h2>
<p>We use two new libraries that make it easier to run dynamic Classifier-free Guidances.<br>
These two libraries are:</p>
<ul>
<li><code>min_diffusion</code></li>
<li><code>cf_guidance</code></li>
</ul>
<p>The helper libraries remove a lot of overhead and boilerplate code. They allow us to jump straight to the important parts: running the guidance experiments.</p>
<p>For more details, the libraries were introduced in <a href="https://enzokro.dev/blog/posts/2022-11-20-minimal-diffusion/">this earlier post</a>.</p>
</section>
</section>
<section id="experiment-setup" class="level1">
<h1>Experiment Setup</h1>
<section id="python-imports" class="level2">
<h2 class="anchored" data-anchor-id="python-imports">Python Imports</h2>
<p>To start we import the needed python modules.</p>
<p>We also handle random seeding to make sure that our results are reproducible across the series.</p>
<div id="cee5cee6" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> List</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> types <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SimpleNamespace</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> L</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># imports for diffusion models</span></span>
<span id="cb1-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for clean outputs</span></span>
<span id="cb1-18">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ignore"</span>)</span>
<span id="cb1-19">logging.set_verbosity_error()</span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># seed for reproducibility</span></span>
<span id="cb1-22">SEED <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span></span>
<span id="cb1-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> seed_everything(seed: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>):</span>
<span id="cb1-24">    random.seed(seed)</span>
<span id="cb1-25">    os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PYTHONHASHSEED'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(seed)</span>
<span id="cb1-26">    np.random.seed(seed)</span>
<span id="cb1-27">    generator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.manual_seed(seed)</span>
<span id="cb1-28">    torch.backends.cudnn.deterministic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-29">    torch.backends.cudnn.benchmark <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb1-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> generator</span>
<span id="cb1-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for sampling the initial, noisy latents</span></span>
<span id="cb1-32">generator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seed_everything(SEED)</span>
<span id="cb1-33"></span>
<span id="cb1-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set the hardware device</span></span>
<span id="cb1-35">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mps"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.has_mps <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>2022-11-23 14:58:50.779076: I tensorflow/stream_executor/platform/default/dso_loader.cc:53] Successfully opened dynamic library libcudart.so.11.0</code></pre>
</div>
</div>
</section>
<section id="the-min_diffusion-library" class="level2">
<h2 class="anchored" data-anchor-id="the-min_diffusion-library">The <code>min_diffusion</code> library</h2>
<p>We use the <code>min_diffusion</code> library to load a Stable Diffusion model from the HuggingFace hub.</p>
<div id="af74809b-8a67-49e9-b435-15556a3fcea0" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to load Stable Diffusion pipelines</span></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> min_diffusion.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MinimalDiffusion</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># helpers to plot the generated images</span></span>
<span id="cb3-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> min_diffusion.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> show_image, image_grid</span></code></pre></div>
</div>
<section id="loading-the-openjourney-model-from-prompt-hero" class="level3">
<h3 class="anchored" data-anchor-id="loading-the-openjourney-model-from-prompt-hero">Loading the <code>openjourney</code> model from Prompt Hero</h3>
<p>The following code loads the <code>openjourney</code> model in <code>torch.float16</code> precision and puts it on the GPU.</p>
<div id="aaa29896-dbf1-46ce-8226-559c10203090" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">model_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prompthero/openjourney'</span></span>
<span id="cb4-2">device     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span></span>
<span id="cb4-3">dtype      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.float16</span></code></pre></div>
</div>
<div id="74f9e74c-e0ee-43a7-b8c3-1853f3de6372" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MinimalDiffusion(model_name, device, dtype)</span></code></pre></div>
</div>
<div id="8e276d19-564d-403c-bad7-2dd1d4aebe4b" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">pipeline.load()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Enabling default unet attention slicing.</code></pre>
</div>
</div>
</section>
</section>
<section id="text-prompt-for-generations" class="level2">
<h2 class="anchored" data-anchor-id="text-prompt-for-generations">Text prompt for generations</h2>
<p>We use the familiar, running prompt in our series to generate an image:</p>
<blockquote class="blockquote">
<p>“a photograph of an astronaut riding a horse”</p>
</blockquote>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>openjourney</code> model was fine-tuned to create images in the style of <a href="https://mezha.media/en/2022/11/11/midjourney-v4-is-an-incredible-new-version-of-the-ai-image-generator/">Midjourney v4</a>.</p>
<p>To enable this fine-tuned style, we need to add the keyword <code>"mdjrny-v4"</code> at the start of the prompt.</p>
</div>
</div>
<div id="5850cdc4-a6fe-422b-b8a4-d5636671fbe7" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># text prompt for image generations</span></span>
<span id="cb8-2">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mdjrny-v4 style a photograph of an astronaut riding a horse"</span></span></code></pre></div>
</div>
</section>
<section id="image-parameters" class="level2">
<h2 class="anchored" data-anchor-id="image-parameters">Image parameters</h2>
<p>The images will be generated over <img src="https://latex.codecogs.com/png.latex?50"> diffusion steps. They will have a height and width of <code>512 x 512</code> pixels.</p>
<div id="9249e77a" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the number of diffusion steps</span></span>
<span id="cb9-2">num_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generated image dimensions</span></span>
<span id="cb9-5">width, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span></code></pre></div>
</div>
</section>
</section>
<section id="the-baseline-guidance-with-a-constant-g-7.5" class="level1">
<h1>The Baseline: Guidance with a constant <img src="https://latex.codecogs.com/png.latex?G%20=7.5"></h1>
<p>First we create the baseline. Then we will check how a normalized, dynamic guidance changes the output.</p>
<p>The baseline Classifier-free Guidance uses a static, constant update of <img src="https://latex.codecogs.com/png.latex?G%20=%207.5">.</p>
<div id="ac6b0c75-7791-45c5-9843-ced9e6aa3730" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cf_guidance.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GuidanceTfm, BaseNormGuidance, TNormGuidance, FullNormGuidance</span></code></pre></div>
</div>
<div id="6c8258a7" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the baseline Classifier-free Guidance</span></span>
<span id="cb11-2">baseline_run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>: [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>]}</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parameters we are sweeping</span></span>
<span id="cb11-5">baselines_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(baseline_run))</span>
<span id="cb11-6">baseline_scheds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L()</span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step through each parameter</span></span>
<span id="cb11-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idx,name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(baselines_names):</span>
<span id="cb11-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step through each of its values</span></span>
<span id="cb11-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idj,val <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(baseline_run[name]):</span>
<span id="cb11-12"></span>
<span id="cb11-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the baseline experimeent</span></span>
<span id="cb11-14">        expt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb11-15">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'param_name'</span>: name,</span>
<span id="cb11-16">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>: val,</span>
<span id="cb11-17">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>: [val <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_steps)]</span>
<span id="cb11-18">        }</span>
<span id="cb11-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for plotting</span></span>
<span id="cb11-20">        expt[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Param: "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">", val=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>val<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb11-21">        </span>
<span id="cb11-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add to the running list of experiments</span></span>
<span id="cb11-23">        baseline_scheds.append(expt)</span></code></pre></div>
</div>
<section id="wrapper-to-run-the-experiments" class="level2">
<h2 class="anchored" data-anchor-id="wrapper-to-run-the-experiments">Wrapper to run the experiments</h2>
<p>The <code>run</code> function below generates images from a given prompt.</p>
<p>It also takes an argument <code>guide_tfm</code> for the specific Guidance Transformation class that will guide the outputs. The <code>schedules</code> argument has the parameter values of <img src="https://latex.codecogs.com/png.latex?G"> at each diffusion timestep.</p>
<div id="bc74e1c7" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run(prompt, schedules, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb12-2">        show_each<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, test_run<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb12-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Runs a dynamic Classifier-free Guidance experiment. </span></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Generates an image for the text `prompt` given all the values in `schedules`.</span></span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Uses a Guidance Transformation class from the `cf_guidance` library.  </span></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Stores the output images with a matching title for plotting. </span></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Optionally shows each image as its generated.</span></span>
<span id="cb12-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    If `test_run` is true, it runs a single schedule for testing. </span></span>
<span id="cb12-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb12-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># store generated images and their title (the experiment name)</span></span>
<span id="cb12-12">    images, titles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb12-13">    </span>
<span id="cb12-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make sure we have a valid guidance transform</span></span>
<span id="cb12-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> guide_tfm</span>
<span id="cb12-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Using Guidance Transform: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>guide_tfm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb12-17">    </span>
<span id="cb12-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># optionally run a single test schedule</span></span>
<span id="cb12-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> test_run:</span>
<span id="cb12-20">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Running a single schedule for testing.'</span>)</span>
<span id="cb12-21">        schedules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> schedules[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb12-22">        </span>
<span id="cb12-23"></span>
<span id="cb12-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run all schedule experiments</span></span>
<span id="cb12-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(schedules):</span>
<span id="cb12-26">        </span>
<span id="cb12-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parse out the title for the current run</span></span>
<span id="cb12-28">        cur_title  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>]</span>
<span id="cb12-29">        titles.append(cur_title)</span>
<span id="cb12-30">        </span>
<span id="cb12-31">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the guidance transformation </span></span>
<span id="cb12-32">        cur_sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>]</span>
<span id="cb12-33">        gtfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> guide_tfm({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'g'</span>: cur_sched})</span>
<span id="cb12-34">        </span>
<span id="cb12-35">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Running experiment [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(schedules)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">]: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cur_title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">...'</span>)</span>
<span id="cb12-36">        img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline.generate(prompt, gtfm, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generator)</span>
<span id="cb12-37">        images.append(img)</span>
<span id="cb12-38">        </span>
<span id="cb12-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># optionally plot the image</span></span>
<span id="cb12-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> show_each:</span>
<span id="cb12-41">            show_image(img, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-42"></span>
<span id="cb12-43">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Done.'</span>)</span>
<span id="cb12-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images'</span>: images,</span>
<span id="cb12-45">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'titles'</span>: titles,}</span></code></pre></div>
</div>
<p>Let’s create the baseline image. The hope is that our guidance changes will then improve on it.</p>
<div id="a13b16b2" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">baseline_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(prompt, baseline_scheds, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>GuidanceTfm, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generator)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Using Guidance Transform: &lt;class 'cf_guidance.transforms.GuidanceTfm'&gt;
Running experiment [1 of 1]: Param: "max_val", val=7.5...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"7aa68e80fb914df4b934fc9f14547902","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="94b893cb-b642-49af-9135-19043d885b20" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># view the baseline image</span></span>
<span id="cb15-2">baseline_res[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-21-guidance-expts-3/index_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Not a bad starting point. Let’s see if we can do better.</p>
</section>
</section>
<section id="improving-the-baseline-with-normalizations" class="level1">
<h1>Improving the baseline with normalizations</h1>
<p>It seems that normalizations can improve both the syntax and details of Diffusion images.</p>
<p>We explore three kinds of normalizations:</p>
<ol type="1">
<li><code>Prediction Normalization</code><br>
</li>
<li><code>T-Normalization</code></li>
<li><code>Full Normalization</code></li>
</ol>
<section id="details-on-normalized-guidance-values" class="level2">
<h2 class="anchored" data-anchor-id="details-on-normalized-guidance-values">Details on normalized Guidance values</h2>
<p>For <code>Prediction Normalization</code> we can use the same static <img src="https://latex.codecogs.com/png.latex?G%20=%207.5"> from the baseline.</p>
<p>For both <code>T-Normalization</code> and <code>Full Normalization</code>, however, we need a much smaller guidance value. The reason is that these normalizations scale the update vector <img src="https://latex.codecogs.com/png.latex?%5Cleft(%20t%20-%20u%20%5Cright)"> itself. That means that a large value like <img src="https://latex.codecogs.com/png.latex?G%20=%207.5"> would de-scale the vectors even more! That is the exact situation we are trying to avoid with normalization in the first place.</p>
<p>To prevent this, we create a special <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D"> schedule for T and Full Normalizations with a smaller value of <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D%20=%200.15"></p>
<div id="66ef8634-0fcb-4430-a591-09042b482204" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the baseline Classifier-free Guidance</span></span>
<span id="cb16-2">T_run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>: [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>]}</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parameters we are sweeping</span></span>
<span id="cb16-5">T_scheds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L()</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step through each parameter</span></span>
<span id="cb16-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idx,name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(baselines_names):</span>
<span id="cb16-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step through each of its values</span></span>
<span id="cb16-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idj,val <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(T_run[name]):</span>
<span id="cb16-11"></span>
<span id="cb16-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the baseline experimeent</span></span>
<span id="cb16-13">        expt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb16-14">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'param_name'</span>: name,</span>
<span id="cb16-15">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>: val,</span>
<span id="cb16-16">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>: [val <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_steps)]</span>
<span id="cb16-17">        }</span>
<span id="cb16-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for plotting</span></span>
<span id="cb16-19">        expt[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Param: "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">", val=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>val<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb16-20">        </span>
<span id="cb16-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add to the running list of experiments</span></span>
<span id="cb16-22">        T_scheds.append(expt)</span></code></pre></div>
</div>
</section>
<section id="prediction-norm-runs" class="level2">
<h2 class="anchored" data-anchor-id="prediction-norm-runs"><code>Prediction Norm</code> runs</h2>
<div id="77808631-db65-48b7-aab9-9211d5b6432b" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Running the BaseNorm experiments...'</span>)</span>
<span id="cb17-2">base_norm_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(prompt, baseline_scheds, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BaseNormGuidance, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generator)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running the BaseNorm experiments...
Using Guidance Transform: &lt;class 'cf_guidance.transforms.BaseNormGuidance'&gt;
Running experiment [1 of 1]: Param: "max_val", val=7.5...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"00ea0b8029ea424cba0aef86cc74bd45","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
</section>
<section id="t-norm-runs" class="level2">
<h2 class="anchored" data-anchor-id="t-norm-runs"><code>T-Norm</code> runs</h2>
<div id="32cf0965-5156-4c43-9c44-d7cc57ed50ac" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Running the T-Norm experiments...'</span>)</span>
<span id="cb19-2">t_norm_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(prompt, T_scheds, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TNormGuidance, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generator)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running the T-Norm experiments...
Using Guidance Transform: &lt;class 'cf_guidance.transforms.TNormGuidance'&gt;
Running experiment [1 of 1]: Param: "max_val", val=0.15...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"49d8b9791466436897e08e23fe7b4c41","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
</section>
<section id="full-norm-runs" class="level2">
<h2 class="anchored" data-anchor-id="full-norm-runs"><code>Full Norm</code> runs</h2>
<div id="5e04d58b-45ea-4874-968b-32b803e81ff1" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Running the FullNorm experiments...'</span>)</span>
<span id="cb21-2">full_norm_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(prompt, T_scheds, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>FullNormGuidance, generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>generator)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running the FullNorm experiments...
Using Guidance Transform: &lt;class 'cf_guidance.transforms.FullNormGuidance'&gt;
Running experiment [1 of 1]: Param: "max_val", val=0.15...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b69d1346091f4f7cb362e38b7d001f91","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
</section>
</section>
<section id="results" class="level1">
<h1>Results</h1>
<p>Let’s compare each result to the baseline.</p>
<p>The baseline image is on the left, and the normalized version is on the right.</p>
<section id="prediction-norm-results" class="level2">
<h2 class="anchored" data-anchor-id="prediction-norm-results"><code>Prediction Norm</code> results</h2>
<div id="91284489-c6f4-487c-96f6-7a865c02269d" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-21-guidance-expts-3/index_files/figure-html/cell-20-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Comparing left to right, <code>Prediction Normalization</code> improves the overall image.</p>
<p>The horse’s body and hair are more defined. The clouds in the background have more texture. The lowest orb in the sky is much better defined. The shadows on the ground also have better coverage and a more natural transition. The ground itself has more details and texture, and is better separated from the background sky.</p>
<p>Even the reflection on the astronaut’s helmet has more depth and looks smoother.</p>
<p>Overall, it seems that <code>Prediction Normalization</code> is a global improvement on the baseline.</p>
</section>
<section id="t-norm-results" class="level2">
<h2 class="anchored" data-anchor-id="t-norm-results"><code>T-Norm</code> results</h2>
<div id="06d263fe-71c3-4aaf-8f5c-160319ee5ba3" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-21-guidance-expts-3/index_files/figure-html/cell-21-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>This one is much more interesting. <code>T-Normalization</code> completely changed the image! Even though they started from the exact same noisy latents.</p>
<p>Here the horse’s anatomy, especially its head, look more correct. Even though we lost overall illumination on the horse’s body.</p>
<p>The patches and details on the astronaut’s gear are also better defined. And maybe it’s subjective, but this one <em>feels</em> more like a photograph (thanks to helmet’s glare) while the baseline looks more like digital art.</p>
</section>
<section id="full-norm-results" class="level2">
<h2 class="anchored" data-anchor-id="full-norm-results"><code>Full Norm</code> results</h2>
<div id="9ec0a197-239a-4f7a-a773-e9a1fc9776fc" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-21-guidance-expts-3/index_files/figure-html/cell-22-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><code>Full Normalization</code> feels like a mix of the best from both worlds.</p>
<p>The horse’s anatomy and astronaut details are better, following the results from <code>T-Normalization</code>. And we regained some background vs.&nbsp;foreground separation from <code>Prediction Normalization</code>.</p>
<p>It seems this dual benefit came at the cost of some symmetry for the orbs in the sky, and a loss of resolution on the horse’s tail.</p>
</section>
<section id="analysis" class="level2">
<h2 class="anchored" data-anchor-id="analysis">Analysis</h2>
<p>Overall, at least for this example, it is fair to say that normalizations can improve Diffusion images.</p>
<p>Either the baseline image was improved overall (<code>Prediction Normalization</code>), or we gained better image syntax and details (<code>T-Normalization</code> and <code>Full Normalization</code>).</p>
<p>Given that <code>T-Normalization</code> and <code>Full Normalization</code> completely changed the style of the baseline image, there is a lot to explore here. To start, there is likely a much better set of <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D"> values. Consider the baseline’s value of <img src="https://latex.codecogs.com/png.latex?G%20=%207.5">. This value is the standard across many Diffusion models and empirically produces good results. Meanwhile, our <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bsmall%7D%20=%200.15"> is only a starting point that has not been thoroughly tested.</p>
<p>In summary, it seems that <code>Prediction Normalization</code> could be an easy way to improve all Diffusion images. As for the others, they definitely have potential that should be explored further.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>This notebook was Part 2 in a series on dynamic Classifier-free Guidance.</p>
<p>We showed that normalizing the guidance has a big impact on the generated images. We found that <code>Prediction Normalization</code> has the potential to improve any Diffusion image.</p>
<p>Now, after Parts 1 and 2, we have a good idea of the guidance schedules and normalizations that might improve generated images.</p>
<p>In Part 3, we will combine schedules with normalizations to see if their gains compound.</p>


</section>

 ]]></description>
  <category>diffusion</category>
  <category>classifier-free guidance</category>
  <category>deep learning</category>
  <guid>https://enzokro.dev/blog/posts/2022-11-21-guidance-expts-3/</guid>
  <pubDate>Tue, 22 Nov 2022 05:00:00 GMT</pubDate>
  <media:content url="https://enzokro.dev/blog/posts/2022-11-21-guidance-expts-3/better_horse_3.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Libraries for dynamic Classifier-free Guidance</title>
  <dc:creator>enzokro </dc:creator>
  <link>https://enzokro.dev/blog/posts/2022-11-20-minimal-diffusion/</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>Introducing two helper libraries to run dynamic Classifier-free Guidance.</p>
</blockquote>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This post is a quick overview of two libraries:</p>
<ul>
<li><code>cf_guidance</code></li>
<li><code>min_diffusion</code></li>
</ul>
<p>These libraries were developed as part of a <a href="https://enzokro.dev/blog/posts/2022-11-21-guidance-expts-2/">series</a> on dynamic Classifier-free Guidance (CFG).</p>
<p>Dynamic CFG means that the guidance parameters change during the diffusion process. Specifically:</p>
<ul>
<li>The predictions are normalized by their vector norms.<br>
</li>
<li>The guidance scalar <img src="https://latex.codecogs.com/png.latex?G">, also called <img src="https://latex.codecogs.com/png.latex?%5Cgamma">, follows a schedule.</li>
</ul>
<section id="motivation" class="level2">
<h2 class="anchored" data-anchor-id="motivation">Motivation</h2>
<p>The initial experiments had a lot of boilerplate and repeated code.</p>
<p>For example, the same code was used in multiple notebooks to load Stable Diffusion models. The code for guidance schedules and normalizations was also repeated across notebooks.</p>
<p>That meant that each notebook needed a lot of overhead before it got to the actual experiments.</p>
<p>To make life a bit easier, and because we hope that these ideas are broadly usable, this repeated code was moved to two libraries:</p>
<ul>
<li><code>min_diffusion</code></li>
<li><code>cf_guidance</code></li>
</ul>
<p>Now we can import these libraries and jump straight to the important part: running the guidance experiments.</p>
</section>
</section>
<section id="using-the-libraries" class="level1">
<h1>Using the libraries</h1>
<p>First we import a few setup libraries to plot the examples.</p>
<div id="f8f4e4cf-fa02-4ecb-b66e-2dd76ed1fd63" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span></code></pre></div>
</div>
<p>Next we show how to use the two new helper libraries.</p>
<section id="the-min_diffusion-library" class="level2">
<h2 class="anchored" data-anchor-id="the-min_diffusion-library">The <code>min_diffusion</code> library</h2>
<p>In this section we generate an image using <code>min_diffsion</code>.</p>
<div id="95fbbb9c-34a1-4283-817a-37e856d03bf2" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> min_diffusion.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MinimalDiffusion</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>2022-11-22 15:42:08.507717: I tensorflow/stream_executor/platform/default/dso_loader.cc:53] Successfully opened dynamic library libcudart.so.11.0</code></pre>
</div>
</div>
<section id="loading-the-openjourney-model-from-prompt-hero" class="level3">
<h3 class="anchored" data-anchor-id="loading-the-openjourney-model-from-prompt-hero">Loading the <code>openjourney</code> model from Prompt Hero</h3>
<p>The following code load the <code>openjourney</code> Stable Diffusion model on the GPU, in <code>torch.float16</code> precision.</p>
<div id="8d61a71b-669d-46f8-a826-9362eac18892" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">model_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prompthero/openjourney'</span></span>
<span id="cb4-2">device     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span></span>
<span id="cb4-3">dtype      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.float16</span></code></pre></div>
</div>
<div id="fa99e85f-dc85-4394-b555-a3abeb466b55" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MinimalDiffusion(model_name, device, dtype)</span></code></pre></div>
</div>
<div id="4270a74a-629e-4fdc-aac9-99067eae4c4b" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">pipeline.load()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Enabling default unet attention slicing.</code></pre>
</div>
</div>
</section>
<section id="generating-an-image" class="level3">
<h3 class="anchored" data-anchor-id="generating-an-image">Generating an image</h3>
<p>Next we use the familiar prompt to generate an image:</p>
<blockquote class="blockquote">
<p>“a photograph of an astronaut riding a horse”</p>
</blockquote>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>openjourney</code> model was fine-tuned to create images in the style of <a href="https://mezha.media/en/2022/11/11/midjourney-v4-is-an-incredible-new-version-of-the-ai-image-generator/">Midjourney v4</a>.</p>
<p>To enable this fine-tuned style, we have to add the keyword <code>"mdjrny-v4"</code> at the start of the prompt.</p>
</div>
</div>
<div id="4612a8d3-2619-4b67-a0ab-cefdc0ce48f8" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># text prompt for image generations</span></span>
<span id="cb8-2">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mdjrny-v4 style a photograph of an astronaut riding a horse"</span></span></code></pre></div>
</div>
<div id="cf986ab0-3afb-40b3-b069-bc9eb9735424" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set the seed for reproducibility</span></span>
<span id="cb9-2">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2147483647</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</div>
<div id="88a56067-fba2-427f-9459-6331ad502e73" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate the image</span></span>
<span id="cb10-2">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline.generate(prompt)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Using the default Classifier-free Guidance.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ff57196b6ecc4964b96df4196a2becf8","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="6ea73f2d-9d70-41c8-a2ad-83b1015cd560" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># display the generated image</span></span>
<span id="cb12-2">img</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-20-minimal-diffusion/index_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>That’s the entire process!</p>
<p>The main difference between <code>MinimalDiffusion</code> and the HuggingFace API is that now we can easily customize the image generation loop. This allows us to explore a wide range of dynamic Classifier-free Guidances.</p>
</section>
</section>
<section id="the-cf_guidance-library" class="level2">
<h2 class="anchored" data-anchor-id="the-cf_guidance-library">The <code>cf_guidance</code> library</h2>
<p>The sections below are based on the <a href="https://enzokro.github.io/guidance_transforms/"><code>cf_guidance</code> documentation</a>.</p>
<p>We create a few Cosine schedules and plug them into different Classifier-free Guidances.</p>
<p>The schedule parameter come from the <a href="https://enzokro.dev/blog/posts/2022-11-15-guidance-expts-1/">initial post</a> on dynamic Classifier-free Guidance.</p>
<div id="feaaa534-6456-4103-933a-214913c169a0" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cf_guidance.schedules <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_cos_sched</span></code></pre></div>
</div>
<div id="5cbf4321-552b-495a-bce5-2abce3a18ea8" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parameters from the blog post</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://enzokro.dev/blog/posts/2022-11-15-guidance-expts-1/</span></span>
<span id="cb14-3">max_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span></span>
<span id="cb14-4">min_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span></span>
<span id="cb14-5">num_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb14-6">num_warmup_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb14-7"></span>
<span id="cb14-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1) Baseline cosine schedule</span></span>
<span id="cb14-9">cos_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb14-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>:           max_val,</span>
<span id="cb14-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_steps'</span>:         num_steps,</span>
<span id="cb14-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_val'</span>:           min_val,</span>
<span id="cb14-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_warmup_steps'</span>:  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb14-14">}</span>
<span id="cb14-15"></span>
<span id="cb14-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2) Cosine schedule with warmup </span></span>
<span id="cb14-17">warmup_cos_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb14-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>:           max_val,</span>
<span id="cb14-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_steps'</span>:         num_steps,</span>
<span id="cb14-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_val'</span>:           min_val,</span>
<span id="cb14-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warmup_init_val'</span>:   min_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to show we can offset the warmup relative to min</span></span>
<span id="cb14-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_warmup_steps'</span>:  num_warmup_steps,</span>
<span id="cb14-23">}</span>
<span id="cb14-24"></span>
<span id="cb14-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the schedules</span></span>
<span id="cb14-26">cos_g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_cos_sched(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>cos_params)</span>
<span id="cb14-27">warmup_g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_cos_sched(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>warmup_cos_params)</span></code></pre></div>
</div>
<p>Let’s plot these cosine schedules to see what they look like.</p>
<div id="0742e0e9-eb9f-4638-b12d-6c20220ad815" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot the schedules</span></span>
<span id="cb15-2">plt.plot(cos_g)</span>
<span id="cb15-3">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Diffusion Timesteps'</span>)</span>
<span id="cb15-4">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$G$ Guidance Parameter'</span>)</span>
<span id="cb15-5">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cosine Schedule'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-20-minimal-diffusion/index_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="d1cfb518-7155-4d2b-a182-c650582329be" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">plt.plot(warmup_g)</span>
<span id="cb16-2">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Diffusion Timesteps'</span>)</span>
<span id="cb16-3">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$G$ Guidance Parameter'</span>)</span>
<span id="cb16-4">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Warmup Cosine Schedule'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-20-minimal-diffusion/index_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<section id="creating-guidance-normalizers" class="level3">
<h3 class="anchored" data-anchor-id="creating-guidance-normalizers">Creating Guidance Normalizers</h3>
<p>Now we can use these schedules during Classifier-free Guidance. The Guidance Transform class, <code>GuidanceTfm</code>, makes this possible.</p>
<p>Guidance transforms take one initialization parameter: <code>schedules</code>. This is a map from parameter names to an array-like, indexable sequence of values.<br>
For a given parameter <code>name</code> at diffusion timestep <code>idx</code>, the value of <code>schedules[name][idx]</code> should be the parameter’s scheduled value at the given timestep.</p>
<p>In this case we call the guidance parameter <img src="https://latex.codecogs.com/png.latex?G"> as a lowercase <img src="https://latex.codecogs.com/png.latex?g">.</p>
<div id="e0bfb290-e021-400c-83e8-6418816ae256" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cf_guidance.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GuidanceTfm, BaseNormGuidance</span></code></pre></div>
</div>
<div id="c8acdae7-add0-43ef-add3-828c4231e275" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the `schedules` parameter</span></span>
<span id="cb18-2">example_schedules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'g'</span>: cos_g}</span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a Guidance with cosine schedule.</span></span>
<span id="cb18-5">guidance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GuidanceTfm(example_schedules)</span>
<span id="cb18-6"></span>
<span id="cb18-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalized Guidance with a cosine schedule.</span></span>
<span id="cb18-8">norm_guidance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BaseNormGuidance(example_schedules)</span></code></pre></div>
</div>
</section>
<section id="using-the-transforms-in-a-diffusion-pipeline" class="level3">
<h3 class="anchored" data-anchor-id="using-the-transforms-in-a-diffusion-pipeline">Using the transforms in a Diffusion pipeline</h3>
<p>The following snippet shows where and how the Guidance Transforms are used in a diffusion loop.</p>
<p>We use the <code>norm_guidance</code> example class created above. Specifically, we call <code>norm_guidance</code> with the following arguments:</p>
<ul>
<li>The unconditioned noise predictions.<br>
</li>
<li>The conditional noise predictions.<br>
</li>
<li>The index of the current timestep.</li>
</ul>
<p>The code is borrowed from HuggingFace’s <a href="https://github.com/nateraw/stable-diffusion-videos/blob/main/stable_diffusion_videos/stable_diffusion_pipeline.py#L448">official <code>StableDiffusionPipeline</code></a> to show where <code>norm_guidance</code> should go.<br>
This seems like a good starting point, since many scripts and functions are based on this HuggingFace setup.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># inside of `StableDiffusionPipeline`</span></span>
<span id="cb19-2">    </span>
<span id="cb19-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.progress_bar(timesteps_tensor)):</span>
<span id="cb19-4">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># expand the latents if we are doing classifier free guidance</span></span>
<span id="cb19-5">        latent_model_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([latents] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> do_classifier_free_guidance <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> latents</span>
<span id="cb19-6">        latent_model_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.scheduler.scale_model_input(latent_model_input, t)</span>
<span id="cb19-7"></span>
<span id="cb19-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># predict the noise residual</span></span>
<span id="cb19-9">        noise_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.unet(latent_model_input, t, encoder_hidden_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>text_embeddings).sample</span>
<span id="cb19-10"></span>
<span id="cb19-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">NOTE</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: our transforms go here:</span></span>
<span id="cb19-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">###############################</span></span>
<span id="cb19-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> do_classifier_free_guidance:</span>
<span id="cb19-14">            noise_pred_uncond, noise_pred_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> noise_pred.chunk(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb19-15"></span>
<span id="cb19-16">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## OLD UPADTE</span></span>
<span id="cb19-17">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#noise_pred = noise_pred_uncond + guidance_scale * (noise_pred_text - noise_pred_uncond)</span></span>
<span id="cb19-18"></span>
<span id="cb19-19">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># NEW cf_guidance UPDATE</span></span>
<span id="cb19-20">            noise_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> norm_guidance(noise_pred_uncond, noise_pred_text, i)</span></code></pre></div>
</section>
<section id="creating-more-complex-schedules" class="level3">
<h3 class="anchored" data-anchor-id="creating-more-complex-schedules">Creating more complex schedules</h3>
<p>Our cosine scheduler is based on a combination of the schedulers in <a href="https://github.com/rwightman/pytorch-image-models/blob/main/timm/scheduler/cosine_lr.py">timm</a> and <a href="https://github.com/huggingface/transformers/blob/v4.24.0/src/transformers/optimization.py#L104">HuggingFace</a>.</p>
<p>It has a variety of parameters to support many schedule combinations as shown below.</p>
<div id="e36953d7-4f35-4888-b378-91d4e1c59e35" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cosine schedule with a full cycle</span></span>
<span id="cb20-2">full_cycle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb20-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>:           max_val,</span>
<span id="cb20-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_steps'</span>:         num_steps,</span>
<span id="cb20-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_val'</span>:           min_val,</span>
<span id="cb20-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_cycles'</span>:        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb20-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_warmup_steps'</span>:  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb20-8">}</span>
<span id="cb20-9"></span>
<span id="cb20-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cosine schedule with k-decay</span></span>
<span id="cb20-11">k_decay_cos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb20-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>:           max_val,</span>
<span id="cb20-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_steps'</span>:         num_steps,</span>
<span id="cb20-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_val'</span>:           min_val,</span>
<span id="cb20-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_cycles'</span>:        <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>,</span>
<span id="cb20-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k_decay'</span>:           <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>,</span>
<span id="cb20-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warmup_init_val'</span>:   min_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to show we can offset the warmup value</span></span>
<span id="cb20-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_warmup_steps'</span>:  num_warmup_steps,</span>
<span id="cb20-19">}</span>
<span id="cb20-20"></span>
<span id="cb20-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the schedules</span></span>
<span id="cb20-22">full_cycle_sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_cos_sched(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>full_cycle)</span>
<span id="cb20-23">k_decay_sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_cos_sched(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>k_decay_cos)</span></code></pre></div>
</div>
<div id="61c0e84a-953d-4acf-a25b-8374c6d438bb" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">plt.plot(full_cycle_sched)</span>
<span id="cb21-2">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Diffusion Timesteps'</span>)</span>
<span id="cb21-3">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$G$ Guidance Parameter'</span>)</span>
<span id="cb21-4">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cosine With a Full Cycle'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-20-minimal-diffusion/index_files/figure-html/cell-19-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="6d89130a-859b-48a5-ab3d-116af57d1b2c" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">plt.plot(k_decay_sched)</span>
<span id="cb22-2">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Diffusion Timesteps'</span>)</span>
<span id="cb22-3">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$G$ Guidance Parameter'</span>)</span>
<span id="cb22-4">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cosine with Offset-Warmup, 1.5 Cycles, and K-decay'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-20-minimal-diffusion/index_files/figure-html/cell-20-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>This notebook was a quick introduction to two libraries:</p>
<ul>
<li><code>min_diffusion</code><br>
</li>
<li><code>cf_guidance</code></li>
</ul>
<p><code>min_diffusion</code> makes it easier to load Stable Diffusion models.<br>
<code>cf_guidance</code> makes it easier to create schedules and normalizations for dynamic Classifier-free Guidance.</p>
<p>The next post in this series will use the libraries to keep exploring the effects of dynamically changing the Classifier-free Guidance.</p>


</section>

 ]]></description>
  <category>diffusion</category>
  <category>deep learning</category>
  <guid>https://enzokro.dev/blog/posts/2022-11-20-minimal-diffusion/</guid>
  <pubDate>Mon, 21 Nov 2022 05:00:00 GMT</pubDate>
  <media:content url="https://enzokro.dev/blog/posts/2022-11-20-minimal-diffusion/dynam_cfg.png" medium="image" type="image/png" height="160" width="144"/>
</item>
<item>
  <title>Dynamic Classifier-free Guidance Pt. 1</title>
  <dc:creator>enzokro </dc:creator>
  <link>https://enzokro.dev/blog/posts/2022-11-20-guidance-expts-2/</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>Experiments with cosine schedules for Classifier-free Guidance.</p>
</blockquote>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This notebook continues <a href="https://enzokro.dev/blog/posts/2022-11-15-guidance-expts-1/">previous experiments</a> on dynamically changing the Classifier-free Guidance parameter.</p>
<p>To recap the earlier results: changing the guidance parameter <img src="https://latex.codecogs.com/png.latex?G"> improved the quality of generated images. More specifically:</p>
<ul>
<li><strong>Normalizing</strong> the guidance helped the image’s syntax.<br>
</li>
<li><strong>Scheduling</strong> the guidance improved the image details.</li>
</ul>
<p>The combination of the two often makes for even better generations.</p>
<p>However, there is an open question about which dynamic changes are the best. The goal of this series is to, ideally, find changes that universally improve the quality of Diffusion images.</p>
</section>
<section id="the-cf_guidance-library" class="level1">
<h1>The <code>cf_guidance</code> library</h1>
<p>Guidance schedules and normalizers are now available in the <a href="https://pypi.org/project/cf-guidance/">cf_guidance</a> library!</p>
<p>We will use this library to generate images for a sweep of cosine schedules.</p>
<div id="ff77c738" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># helpers to create cosine schedules</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cf_guidance.schedules  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_cos_sched</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># normalizations for classifier-free guidance</span></span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cf_guidance.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GuidanceTfm, BaseNormGuidance, TNormGuidance</span></code></pre></div>
</div>
</section>
<section id="experiment-setup" class="level1">
<h1>Experiment Setup</h1>
<p>The following section setups up the imports and helpers we need for the runs.</p>
<p>First we import the needed python modules.</p>
<section id="imports" class="level2">
<h2 class="anchored" data-anchor-id="imports">Imports</h2>
<div id="cee5cee6" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> List</span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb2-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> types <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SimpleNamespace</span>
<span id="cb2-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> L</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> textwrap <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> wrap</span>
<span id="cb2-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm </span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># imports for diffusion models</span></span>
<span id="cb2-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb2-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb2-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> CLIPTextModel, CLIPTokenizer</span>
<span id="cb2-20"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> notebook_login</span>
<span id="cb2-21"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> diffusers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StableDiffusionPipeline</span>
<span id="cb2-22"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> diffusers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoencoderKL, UNet2DConditionModel</span>
<span id="cb2-23"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> diffusers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LMSDiscreteScheduler</span>
<span id="cb2-24"></span>
<span id="cb2-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for clean outputs</span></span>
<span id="cb2-26">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ignore"</span>)</span>
<span id="cb2-27">logging.set_verbosity_error()</span>
<span id="cb2-28"></span>
<span id="cb2-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set the hardware device</span></span>
<span id="cb2-30">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mps"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.has_mps <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>2022-11-21 19:06:22.967865: I tensorflow/stream_executor/platform/default/dso_loader.cc:53] Successfully opened dynamic library libcudart.so.11.0</code></pre>
</div>
</div>
</section>
<section id="helper-functions" class="level2">
<h2 class="anchored" data-anchor-id="helper-functions">Helper functions</h2>
<p>The functions below help with:</p>
<ol type="1">
<li>Generating text embeddings from a given prompt.<br>
</li>
<li>Converting Diffusion latents to a PIL image.<br>
</li>
<li>Plotting the images to visualize results.</li>
</ol>
<div id="b37b206f" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> text_embeddings(prompts, maxlen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb4-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Extracts text embeddings from the given `prompts`."</span></span>
<span id="cb4-3">    maxlen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> maxlen <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> tokenizer.model_max_length</span>
<span id="cb4-4">    inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(prompts, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_length"</span>, max_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>maxlen, truncation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>)</span>
<span id="cb4-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> text_encoder(inp.input_ids.to(device))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-6"></span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> image_from_latents(latents):</span>
<span id="cb4-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Scales diffusion `latents` and turns them into a PIL Image."</span></span>
<span id="cb4-10">    </span>
<span id="cb4-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># scale and decode the latents</span></span>
<span id="cb4-12">    latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.18215</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> latents</span>
<span id="cb4-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb4-14">        data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vae.decode(latents).sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-15"></span>
<span id="cb4-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create PIL image</span></span>
<span id="cb4-17">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>).clamp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-18">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.cpu().permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>().numpy()</span>
<span id="cb4-19">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>().astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uint8"</span>)</span>
<span id="cb4-20">    image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.fromarray(data)</span>
<span id="cb4-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image</span>
<span id="cb4-22">    </span>
<span id="cb4-23">    </span>
<span id="cb4-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> show_image(image, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>):</span>
<span id="cb4-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Displays the given `image` resized based on `scale`."</span></span>
<span id="cb4-26">    img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.resize(((<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)(image.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scale), (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)(image.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scale)))</span>
<span id="cb4-27">    display(img)</span>
<span id="cb4-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> img</span>
<span id="cb4-29"></span>
<span id="cb4-30"></span>
<span id="cb4-31"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> image_grid(images, rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb4-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Display an array of images in a grid with the given number of `rows`"</span></span>
<span id="cb4-33">    count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(images)</span>
<span id="cb4-34">    cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> rows)</span>
<span id="cb4-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> count:</span>
<span id="cb4-36">        rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate fig size based on individual image sizes    </span></span>
<span id="cb4-38">    px <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'figure.dpi'</span>]</span>
<span id="cb4-39">    w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> px</span>
<span id="cb4-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add some extra space for the caption/title since that can wrap</span></span>
<span id="cb4-41">    h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> px) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> px)</span>
<span id="cb4-42">    fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(rows, cols, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(w, h))</span>
<span id="cb4-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> y <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(rows):</span>
<span id="cb4-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(cols):</span>
<span id="cb4-45">            index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x</span>
<span id="cb4-46">            ref <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes[x] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> axes[y] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> axes[y, x]</span>
<span id="cb4-47">            ref.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb4-48">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb4-49">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb4-50">            img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> images[index]</span>
<span id="cb4-51">            txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Frame: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>index<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb4-52">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> title <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb4-53">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(title, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb4-54">                    txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>index<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb4-55">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(title, List):</span>
<span id="cb4-56">                    txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> title[index]</span>
<span id="cb4-57">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># small change for bigger, more visible titles</span></span>
<span id="cb4-58">            txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.join(wrap(txt, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>))</span>
<span id="cb4-59">            ref.set_title(txt, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-large'</span>)</span>
<span id="cb4-60">            ref.imshow(img)</span>
<span id="cb4-61">            ref.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb4-62">            </span></code></pre></div>
</div>
</section>
<section id="loading-a-diffusion-pipeline" class="level2">
<h2 class="anchored" data-anchor-id="loading-a-diffusion-pipeline">Loading a Diffusion pipeline</h2>
<p>We need to dynamically change the diffusion guidance parameter <img src="https://latex.codecogs.com/png.latex?G">.</p>
<p>That means we need more control than what is available in the high-level HuggingFace APIs. To achieve this control, we load each piece of a Diffusion pipeline separately. Then, we can write our own image generation loop with full control over <img src="https://latex.codecogs.com/png.latex?G">.</p>
<p>The <code>get_sd_pieces</code> function loads and returns the separate components of a Stable Diffusion pipeline.</p>
<div id="660e4391" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_sd_pieces(model_name, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float32, better_vae<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ema'</span>):</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Loads and returns the individual pieces in a Diffusion pipeline."</span></span>
<span id="cb5-3">    </span>
<span id="cb5-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the tokenizer and text encoder</span></span>
<span id="cb5-5">    tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CLIPTokenizer.from_pretrained(</span>
<span id="cb5-6">        model_name,</span>
<span id="cb5-7">        subfolder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tokenizer"</span>,</span>
<span id="cb5-8">        torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dtype)</span>
<span id="cb5-9">    text_encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CLIPTextModel.from_pretrained(</span>
<span id="cb5-10">        model_name,</span>
<span id="cb5-11">        subfolder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text_encoder"</span>,</span>
<span id="cb5-12">        torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dtype).to(device)</span>
<span id="cb5-13"></span>
<span id="cb5-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we are using a VAE from stability that was trained for longer than the baseline </span></span>
<span id="cb5-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> better_vae:</span>
<span id="cb5-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> better_vae <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ema'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mse'</span>)</span>
<span id="cb5-17">        vae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoencoderKL.from_pretrained(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"stabilityai/sd-vae-ft-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>better_vae<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dtype).to(device)</span>
<span id="cb5-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb5-19">        vae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoencoderKL.from_pretrained(model_name, subfolder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vae'</span>, torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dtype).to(device)</span>
<span id="cb5-20">    </span>
<span id="cb5-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># build the unet</span></span>
<span id="cb5-22">    unet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> UNet2DConditionModel.from_pretrained(</span>
<span id="cb5-23">        model_name,</span>
<span id="cb5-24">        subfolder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unet"</span>,</span>
<span id="cb5-25">        torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dtype).to(device)</span>
<span id="cb5-26">    </span>
<span id="cb5-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># enable unet attention slicing</span></span>
<span id="cb5-28">    slice_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unet.config.attention_head_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb5-29">    unet.set_attention_slice(slice_size)</span>
<span id="cb5-30">        </span>
<span id="cb5-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># build the scheduler</span></span>
<span id="cb5-32">    scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LMSDiscreteScheduler.from_config(model_name, subfolder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scheduler"</span>)</span>
<span id="cb5-33">    </span>
<span id="cb5-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (</span>
<span id="cb5-35">        tokenizer,</span>
<span id="cb5-36">        text_encoder,</span>
<span id="cb5-37">        vae,</span>
<span id="cb5-38">        unet,</span>
<span id="cb5-39">        scheduler,</span>
<span id="cb5-40">    )</span></code></pre></div>
</div>
<section id="picking-a-model" class="level3">
<h3 class="anchored" data-anchor-id="picking-a-model">Picking a model</h3>
<p>These runs use the <code>openjourney</code> model from <a href="https://huggingface.co/prompthero/openjourney">Prompt Hero</a>.</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p><code>openjourney</code> was fine-tuned to create images in the style of <a href="https://mezha.media/en/2022/11/11/midjourney-v4-is-an-incredible-new-version-of-the-ai-image-generator/">Midjourney v4</a>.</p>
<p>To trigger this style, we need to add the special keyword <code>"mdjrny-v4"</code> at the front of an input text prompt.</p>
</div>
</div>
<div id="d257b2c3" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set the diffusion model</span></span>
<span id="cb6-2">model_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prompthero/openjourney"</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># other possible models</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># model_name = "CompVis/stable-diffusion-v1-4"</span></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># model_name = "runwayml/stable-diffusion-v1-5"</span></span></code></pre></div>
</div>
<p>Next we use the function <code>get_sd_pieces</code> to load this model. The pieces are loaded in <code>float16</code> precision.</p>
<div id="1555e2f9" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set the data type for the pipeline</span></span>
<span id="cb7-2">dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.float16</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load the individual diffusion pieces</span></span>
<span id="cb7-5">pieces <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_sd_pieces(model_name, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dtype)</span>
<span id="cb7-6">(tokenizer, text_encoder, vae, unet, scheduler) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pieces</span></code></pre></div>
</div>
</section>
</section>
<section id="text-prompt-for-generations" class="level2">
<h2 class="anchored" data-anchor-id="text-prompt-for-generations">Text prompt for generations</h2>
<p>We use the same input text prompt from the previous notebook:</p>
<blockquote class="blockquote">
<p>“<em>a photograph of an astronaut riding a horse</em>”</p>
</blockquote>
<p>But, we add the special prefix keyword <code>"mdjrny-v4"</code> to create Midjourney-style images.</p>
<div id="3ac8ad1d" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># input text prompt for diffusion models</span></span>
<span id="cb8-2">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mdjrny-v4 style a photograph of an astronaut riding a horse"</span></span></code></pre></div>
</div>
</section>
<section id="generating-images" class="level2">
<h2 class="anchored" data-anchor-id="generating-images">Generating images</h2>
<p>The images will be generated over <img src="https://latex.codecogs.com/png.latex?50"> diffusion steps. They will have a height and width size of <code>512 x 512</code> pixels.</p>
<div id="9249e77a" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the number of diffusion steps</span></span>
<span id="cb9-2">num_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generated image dimensions</span></span>
<span id="cb9-5">width, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span></code></pre></div>
</div>
<section id="creating-a-fixed-starting-point-for-diffusion" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-fixed-starting-point-for-diffusion">Creating a fixed starting point for diffusion</h3>
<p>The code below creates an initial set of latent noise.</p>
<p>The idea is for every generation to start from this shared, fixed noise. That way we can be sure that only our guidance changes are having an effect on the output image.</p>
<div id="075c580a" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the shared, initial latents</span></span>
<span id="cb10-2">seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span></span>
<span id="cb10-3">torch.manual_seed(seed)</span>
<span id="cb10-4">init_latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, unet.in_channels, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>unet.dtype, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span></code></pre></div>
</div>
</section>
<section id="image-generation-function" class="level3">
<h3 class="anchored" data-anchor-id="image-generation-function">Image generation function</h3>
<p>Below is the main image generation function: <code>generate</code>. It uses the Stable Diffusion components we loaded earlier.</p>
<p>Note that this function is almost identical to the <code>StableDiffusionPipeline</code> from HuggingFace. The main difference is plugging in our Guidance Transform instead of doing the default Classifier-free Guidance update.</p>
<div id="c1e0a7f9" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> generate(prompt, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>width, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>height, steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_steps, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb11-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make sure we have a guidance transformation</span></span>
<span id="cb11-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> guide_tfm</span>
<span id="cb11-4">    </span>
<span id="cb11-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prepare the text embeddings</span></span>
<span id="cb11-6">    text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_embeddings(prompt)</span>
<span id="cb11-7">    uncond <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_embeddings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span>
<span id="cb11-8">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([uncond, text]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(unet.dtype)</span>
<span id="cb11-9">    </span>
<span id="cb11-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start from the shared, initial latents</span></span>
<span id="cb11-11">    latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.clone(init_latents)</span>
<span id="cb11-12">    scheduler.set_timesteps(steps)</span>
<span id="cb11-13">    latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scheduler.init_noise_sigma</span>
<span id="cb11-14">    </span>
<span id="cb11-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run the diffusion process</span></span>
<span id="cb11-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,ts <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(tqdm(scheduler.timesteps)):</span>
<span id="cb11-17">        inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scheduler.scale_model_input(torch.cat([latents] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), ts)</span>
<span id="cb11-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad(): </span>
<span id="cb11-19">            tf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ts</span>
<span id="cb11-20">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.has_mps:</span>
<span id="cb11-21">                tf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ts.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(torch.float32)</span>
<span id="cb11-22">            u,t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unet(inp, tf, encoder_hidden_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>emb).sample.chunk(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb11-23">        </span>
<span id="cb11-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># call the guidance transform</span></span>
<span id="cb11-25">        pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> guide_tfm(u, t, idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i)</span>
<span id="cb11-26">        </span>
<span id="cb11-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the latents</span></span>
<span id="cb11-28">        latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scheduler.step(pred, ts, latents).prev_sample</span>
<span id="cb11-29">        </span>
<span id="cb11-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># decode and return the final latents</span></span>
<span id="cb11-31">    image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_from_latents(latents)</span>
<span id="cb11-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image    </span></code></pre></div>
</div>
</section>
</section>
</section>
<section id="function-to-run-the-experiments" class="level1">
<h1>Function to run the experiments</h1>
<p>The <code>run</code> function below generates images for a given prompt.</p>
<p>It takes an argument <code>guide_tfm</code> for the specific <code>GuidanceTfm</code> class that will guide the outputs.<br>
The <code>schedules</code> argument has the set of schedules to sweep for <img src="https://latex.codecogs.com/png.latex?G">.</p>
<div id="bc74e1c7" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run(prompt, schedules, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, show_each<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, test_run<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb12-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># store generated images and their title (the experiment name)</span></span>
<span id="cb12-3">    images, titles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb12-4">    </span>
<span id="cb12-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> guide_tfm</span>
<span id="cb12-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Using Guidance Transform: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>guide_tfm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb12-7">    </span>
<span id="cb12-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> test_run:</span>
<span id="cb12-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Running a single schedule for testing.'</span>)</span>
<span id="cb12-10">        schedules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> schedules[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb12-11">        </span>
<span id="cb12-12">    ns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(schedules)</span>
<span id="cb12-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run all schedule experiments</span></span>
<span id="cb12-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(schedules):</span>
<span id="cb12-15">        </span>
<span id="cb12-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parse out the title for the current run</span></span>
<span id="cb12-17">        cur_title  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>]</span>
<span id="cb12-18">        titles.append(cur_title)</span>
<span id="cb12-19">        </span>
<span id="cb12-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the guidance transformation </span></span>
<span id="cb12-21">        cur_sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>]</span>
<span id="cb12-22">        gtfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> guide_tfm({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'g'</span>: cur_sched})</span>
<span id="cb12-23">        </span>
<span id="cb12-24">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Running experiment [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ns<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">]: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cur_title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">...'</span>)</span>
<span id="cb12-25">        img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate(prompt, gtfm)</span>
<span id="cb12-26">        images.append(img)</span>
<span id="cb12-27">        </span>
<span id="cb12-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># optionally plot the image</span></span>
<span id="cb12-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> show_each:</span>
<span id="cb12-30">            show_image(img, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-31"></span>
<span id="cb12-32">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Done.'</span>)</span>
<span id="cb12-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {</span>
<span id="cb12-34">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images'</span>: images,</span>
<span id="cb12-35">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'titles'</span>: titles,</span>
<span id="cb12-36">    }</span></code></pre></div>
</div>
</section>
<section id="the-baseline-guidance-with-a-constant-g-7.5" class="level1">
<h1>The Baseline: Guidance with a constant <img src="https://latex.codecogs.com/png.latex?G%20=7.5"></h1>
<p>We need a good baseline to find out exactly how dynamic guidances affect the output images.</p>
<p>Below we create the baseline Classifier-free Guidance with a static, constant update of <img src="https://latex.codecogs.com/png.latex?G%20=%207.5">.</p>
<p>The code below seems like a lot of overhead, but it will be very helpful to sweep a variety of cosine schedules later on.</p>
<div id="6c8258a7" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the baseline Classifier-free Guidance</span></span>
<span id="cb13-2">baseline_run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb13-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>: [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>],</span>
<span id="cb13-4">}</span>
<span id="cb13-5"></span>
<span id="cb13-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parameters we are sweeping</span></span>
<span id="cb13-7">baselines_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(baseline_run))</span>
<span id="cb13-8">baseline_scheds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L()</span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step through each parameter</span></span>
<span id="cb13-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idx,name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(baselines_names):</span>
<span id="cb13-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step through each of its values</span></span>
<span id="cb13-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idj,val <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(baseline_run[name]):</span>
<span id="cb13-14"></span>
<span id="cb13-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the baseline experimeent</span></span>
<span id="cb13-16">        expt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb13-17">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'param_name'</span>: name,</span>
<span id="cb13-18">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>: val,</span>
<span id="cb13-19">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>: [val <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_steps)]</span>
<span id="cb13-20">        }</span>
<span id="cb13-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for plotting</span></span>
<span id="cb13-22">        expt[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Param: "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">", val=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>val<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb13-23">        </span>
<span id="cb13-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add to the running list of experiments</span></span>
<span id="cb13-25">        baseline_scheds.append(expt)</span></code></pre></div>
</div>
<p>Let’s create the baseline image. The hope is that our guidance changes can then improve on it.</p>
<div id="a13b16b2" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">basline_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(prompt, baseline_scheds, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>GuidanceTfm, show_each<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Using Guidance Transform: &lt;class 'cf_guidance.transforms.GuidanceTfm'&gt;
Running experiment [1 of 1]: Param: "max_val", val=7.5...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ba08c40877914d98861104423086dee4","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-20-guidance-expts-2/index_files/figure-html/cell-15-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Not bad for a starting point. Let’s see if we can do better.</p>
</section>
<section id="trying-to-improve-the-baseline" class="level1">
<h1>Trying to improve the baseline</h1>
<p>We now use the <a href="https://github.com/enzokro/guidance_transforms">cf_guidance</a> library to create a variety of Cosine schedules.</p>
<p>From the previous notebook, we know that a regular Cosine schedule can improve image generations. The goal now is to figure out exactly what makes for a good Cosine schedule.</p>
<p>This is a hard question to answer. We can start by trying incremental, minimum-pair changes to a baseline schedule. Then we check what effects, if any, our dynamic guidances have on the generated images.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The recent trend in Diffusion variance schedules is to add noise in a slower, more gradual way. This change seems to improve both model training and inference generations.</p>
<p>We will keep this in mind in future notebooks as we explore more schedules.</p>
</div>
</div>
<p>Once we have a sense of which schedules work (and which don’t), we can explore the scheduling space in a better, more principled way.</p>
<section id="default-schedule-parameters" class="level2">
<h2 class="anchored" data-anchor-id="default-schedule-parameters">Default schedule parameters</h2>
<p>We start from the guidance schedule value from the previous notebook.</p>
<p>Recall that there were three kinds of schedules:</p>
<ol type="1">
<li>A static schedule with a constant <img src="https://latex.codecogs.com/png.latex?G">.<br>
</li>
<li>A decreasing Cosine schedule.<br>
</li>
<li>A Cosine schedule with some initial warm up steps.</li>
</ol>
<div id="03e9352b" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Default schedule parameters from the blog post</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">######################################</span></span>
<span id="cb16-3">max_val           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># guidance scaling value</span></span>
<span id="cb16-4">min_val           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># minimum guidance scaling</span></span>
<span id="cb16-5">num_steps         <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of diffusion steps</span></span>
<span id="cb16-6">num_warmup_steps  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of warmup steps</span></span>
<span id="cb16-7">warmup_init_val   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the intial warmup value</span></span>
<span id="cb16-8">num_cycles        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of cosine cycles</span></span>
<span id="cb16-9">k_decay           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># k-decay for cosine curve scaling </span></span>
<span id="cb16-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">######################################</span></span></code></pre></div>
</div>
<p>To make sure our changes always reference this shared starting point, we can wrap these parameters in a dictionary.</p>
<div id="e26f3a91" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">DEFAULT_COS_PARAMS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb17-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>:           max_val,</span>
<span id="cb17-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_steps'</span>:         num_steps,</span>
<span id="cb17-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_val'</span>:           min_val,</span>
<span id="cb17-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_cycles'</span>:        num_cycles,</span>
<span id="cb17-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k_decay'</span>:           k_decay,</span>
<span id="cb17-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_warmup_steps'</span>:  num_warmup_steps,</span>
<span id="cb17-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warmup_init_val'</span>:   warmup_init_val,</span>
<span id="cb17-9">}</span></code></pre></div>
</div>
<p>Then, every minimum-pair change will start from this shared dictionary and update a single parameter. The <code>cos_harness</code> below gives us an easy way of making these minimum-pair changes.</p>
<div id="0bf829ed" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> cos_harness(new_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{}, cos_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DEFAULT_COS_PARAMS):</span>
<span id="cb18-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Creates cosine schedules with updated parameters in `new_params`'''</span></span>
<span id="cb18-3">    </span>
<span id="cb18-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start from the given baseline `cos_params`</span></span>
<span id="cb18-5">    cos_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(cos_params)</span>
<span id="cb18-6">    </span>
<span id="cb18-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the schedule with any new parameters</span></span>
<span id="cb18-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> new_params: cos_params.update(new_params)</span>
<span id="cb18-9">    </span>
<span id="cb18-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return the new cosine schedule</span></span>
<span id="cb18-11">    sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_cos_sched(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>cos_params)</span>
<span id="cb18-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sched</span></code></pre></div>
</div>
<p>Let’s use the cosine harness to plot three test schedules, just to make sure things are working:</p>
<ul>
<li>The baseline with no warmup.<br>
</li>
<li>Warmup for 5 steps.<br>
</li>
<li>Warmup for 10 steps.</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The schedule plotting function <code>plot_schedules</code> is available in the post’s notebook.</p>
</div>
</div>
<div id="cf3710f8" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot cosine schedules with different number of warmup steps</span></span>
<span id="cb19-2">warmup_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb19-3">warm_g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L( </span>
<span id="cb19-4">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sched'</span>: cos_harness({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_warmup_steps'</span>: w}), </span>
<span id="cb19-5">     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Warmup Steps: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>w<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>}</span>
<span id="cb19-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> warmup_steps</span>
<span id="cb19-7">)</span>
<span id="cb19-8"></span>
<span id="cb19-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot the schedules</span></span>
<span id="cb19-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Plotting sample cosine schedules...'</span>)</span>
<span id="cb19-11">plot_schedules(warm_g.itemgot(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sched'</span>), rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, titles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>warm_g.itemgot(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Plotting sample cosine schedules...</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-20-guidance-expts-2/index_files/figure-html/cell-20-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="creating-the-cosine-experiments" class="level2">
<h2 class="anchored" data-anchor-id="creating-the-cosine-experiments">Creating the Cosine experiments</h2>
<p>Now we can create the different Cosine schedules that will be swept.</p>
<div id="330ea91c" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">cos_param_sweep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb21-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_warmup_steps'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>],</span>
<span id="cb21-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_cycles'</span>:       [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>],</span>
<span id="cb21-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k_decay'</span>:          [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>],</span>
<span id="cb21-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>:          [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>],</span>
<span id="cb21-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_val'</span>:          [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],</span>
<span id="cb21-7">}</span>
<span id="cb21-8"></span>
<span id="cb21-9">param_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(cos_param_sweep))</span>
<span id="cb21-10"></span>
<span id="cb21-11">cos_scheds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L()</span>
<span id="cb21-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idx,name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(param_names):</span>
<span id="cb21-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idj,val <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(cos_param_sweep[name]):</span>
<span id="cb21-14"></span>
<span id="cb21-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the cosine experimeent</span></span>
<span id="cb21-16">        expt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb21-17">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'param_name'</span>: name,</span>
<span id="cb21-18">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>: val,</span>
<span id="cb21-19">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>: cos_harness({name: val})</span>
<span id="cb21-20">        }</span>
<span id="cb21-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for plotting</span></span>
<span id="cb21-22">        expt[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Param: "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">", val=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>val<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb21-23">        </span>
<span id="cb21-24">        cos_scheds.append(expt)</span>
<span id="cb21-25">    </span></code></pre></div>
</div>
<div id="98ad55be" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">plot_schedules(cos_scheds.itemgot(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'schedule'</span>), rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, titles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cos_scheds.itemgot(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-20-guidance-expts-2/index_files/figure-html/cell-22-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="running-the-cosine-experiments" class="level2">
<h2 class="anchored" data-anchor-id="running-the-cosine-experiments">Running the cosine experiments</h2>
<p>We use the <code>run</code> function from before to run all of the cosine experiments.</p>
<div id="b6bf6d54" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">cos_res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run(prompt, cos_scheds, guide_tfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>GuidanceTfm, show_each<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Using Guidance Transform: &lt;class 'cf_guidance.transforms.GuidanceTfm'&gt;
Running experiment [1 of 9]: Param: "k_decay", val=0.8...
Running experiment [2 of 9]: Param: "k_decay", val=0.6...
Running experiment [3 of 9]: Param: "max_val", val=10...
Running experiment [4 of 9]: Param: "min_val", val=3...
Running experiment [5 of 9]: Param: "num_cycles", val=1...
Running experiment [6 of 9]: Param: "num_cycles", val=1.5...
Running experiment [7 of 9]: Param: "num_warmup_steps", val=5...
Running experiment [8 of 9]: Param: "num_warmup_steps", val=10...
Running experiment [9 of 9]: Param: "num_warmup_steps", val=15...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"273f3cc220f44aa2bc25af8f8791753e","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"9db6048fe5ff410188bdc445b08b73c7","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"0721592ec860420bbf5fcbe20208af6b","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"47f49745744f444da072ac7c0a78c57c","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"02d202d2eb194ff39707038b18702aba","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"37e213349cf64aaa81e94490f2e82e33","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"497570d656b341e5bb8186ccefb4ad82","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"2700c6f7046645b49e70fa054083b1df","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"dbe6459024084500a01b81462dfb574d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="242c122a" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-20-guidance-expts-2/index_files/figure-html/cell-24-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="results" class="level1">
<h1>Results</h1>
<p>Going through the images, we can spot a few patterns.</p>
<p>Changing the minimum value of <img src="https://latex.codecogs.com/png.latex?G"> does not have a huge effect. However, changing the max value of <img src="https://latex.codecogs.com/png.latex?G"> to <img src="https://latex.codecogs.com/png.latex?10"> actively hurt the image.</p>
<p>It seems that going through more cosine cycles improved the horse’s anatomy. It now has two hind legs and its body looks more proportional.</p>
<p>The number of warmup steps has a mixed effect. The lower value of <img src="https://latex.codecogs.com/png.latex?5"> and <img src="https://latex.codecogs.com/png.latex?10"> produce… interesting outputs with morphed horses. If it weren’t for the floating horse head at 10 warmup steps, it would be a solid improvement. At <img src="https://latex.codecogs.com/png.latex?15"> warmup steps we get a lovely image with a nice, detailed background..</p>
<section id="analysis" class="level2">
<h2 class="anchored" data-anchor-id="analysis">Analysis</h2>
<p>Certain Cosine schedules seem promising. They either increase the details of the astronaut or background, or they create more anatomically correct horses.</p>
<p>In the rest of the series, we will explore the promising Cosine changes:</p>
<ul>
<li>Setting a higher Guidance ceiling.<br>
</li>
<li>Allowing the Cosine to go through multiple cycles.<br>
</li>
<li>Warming up for a few steps.</li>
</ul>
</section>
<section id="bringing-in-normalizations" class="level2">
<h2 class="anchored" data-anchor-id="bringing-in-normalizations">Bringing in Normalizations</h2>
<p>In the previous notebooks, we found that normalization can have a huge improvement on generated images. The next logical step is to add normalizations to our schedules to see if the gains compound.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>This notebook used the <code>cf_guidance</code> library to run a set of Guidance experiments. We swept a variety of Cosine schedules and compared the results to a baseline generation.</p>
<p>We showed that the guidance schedule has a big impact on the quality and syntax of generated images. We also found a set of Cosine schedules with the potential to improve generated images.</p>
<p>In the next part of this series, we will combine cosine schedules with normalizations.</p>


</section>

 ]]></description>
  <category>diffusion</category>
  <category>classifier-free guidance</category>
  <category>deep learning</category>
  <guid>https://enzokro.dev/blog/posts/2022-11-20-guidance-expts-2/</guid>
  <pubDate>Sun, 20 Nov 2022 05:00:00 GMT</pubDate>
  <media:content url="https://enzokro.dev/blog/posts/2022-11-20-guidance-expts-2/better-gen-horse.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>A PyTorch SLERP implementation</title>
  <dc:creator>enzokro </dc:creator>
  <link>https://enzokro.dev/blog/posts/2022-11-16-pytorch-slerp/</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>SLERP implemented in PyTorch with proper thresholding.</p>
</blockquote>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This notebook introduces a native PyTorch implementation of <a href="https://en.wikipedia.org/wiki/Slerp">SLERP</a>.</p>
<p>SLERP stands for “Spherical Linear Interpolation”. It is an extension of linear interpolation that preserves the length of the input vectors. We go over why preserving length is important in the Background section below.</p>
<p>In future posts, we will use SLERP to combine the latent vectors of Diffusion models.</p>
</section>
<section id="background" class="level1">
<h1>Background</h1>
<section id="why-do-we-need-slerp" class="level2">
<h2 class="anchored" data-anchor-id="why-do-we-need-slerp">Why do we need SLERP?</h2>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you don’t need the theory, you can skip straight to the code.</p>
</div>
</div>
<p>SLERP interpolates two vectors while keeping their magnitudes intact. Why would this be important for Diffusion models?</p>
<p>The reason has to do with how Gaussian distributions behave in higher dimensions. This <a href="https://www.inference.vc/high-dimensional-gaussian-distributions-are-soap-bubble/">blog post</a> by Ferenc Huszár has an excellent description of how exactly our intuitions fall apart in high dimensions. The post also has many good visualizations to drive the point home.</p>
<section id="gaussians-in-high-dimensions" class="level3">
<h3 class="anchored" data-anchor-id="gaussians-in-high-dimensions">Gaussians in high dimensions</h3>
<p>To summarize Ferenc’s blog post: a Gaussian in high dimensions is fundamentally different than its 1-D “Bell curve” version.</p>
<p>As we climb to higher dimensions the Gaussian distribution becomes a thin, hollow shell. Its probability density spreads out around this thin shell. Think about how different that is to a 1-D Gaussian. In the 1-D case, most of the density falls within a few standard deviations of the mean.</p>
<p>Before long, the inside of this high-dimensional Gaussian is empty. Only its thin shell has any probability at all. Borrowing Ferenc’s excellent analogy: the distribution turns into a “soap bubble”.</p>
<p>Recall that most Diffusion models are based on high-dimensional Gaussians. That means that, in Diffusion, we are actually dealing with many high-dimensional soap bubbles. If we treat them like regular 2-D or 3-D vectors, our intuitions will fail us.</p>
</section>
<section id="ok-so-where-does-slerp-come-in" class="level3">
<h3 class="anchored" data-anchor-id="ok-so-where-does-slerp-come-in">Ok, so where does SLERP come in?</h3>
<p>If we linearly interpolate two high-dimensional Gaussians, the result can easily fly away from the soap bubble’s surface. The section below has an example of what this looks like in 2-D space.</p>
<p>SLERP makes it possible to properly interpolate Diffusion vectors by keeping us firmly grounded on the surface of the soap bubble.</p>
</section>
</section>
<section id="what-about-linear-interpolation" class="level2">
<h2 class="anchored" data-anchor-id="what-about-linear-interpolation">What about linear interpolation?</h2>
<p>Regular linear interpolation (sometimes called LERP) is a powerful tool. It is a cornerstone in modern computer graphics to move an object between two points.</p>
<p>LERP has a loose analogy with gravity: the shortest distance between two points is a straight line.</p>
<p>For example, imagine you are drinking a cup of coffee. The mug is currently on the table. As you go to take a sip, you pick up the mug and bring it directly to your lips. You wouldn’t swing your arm around in a weird way. That would only be more work <em>and</em> delay the sip of coffee.</p>
<p>In other words, when moving objects in our 3-D world we want to do the least amount of work possible. That is what LERP does in 2-D and 3-D space. In a manner of speaking, you used LERP to bring the coffee mug to your lips and take a sip.</p>
<p>This coffee example brings us back to why we need SLERP in the first place. Our notions of 3-D paths break down in higher dimensions, and LERP does not work as intended. Here we are much better served by SLERP.</p>
<section id="a-concrete-lerp-example" class="level3">
<h3 class="anchored" data-anchor-id="a-concrete-lerp-example">A concrete LERP example</h3>
<p>Let’s show how linear interpolation works on vectors.</p>
<p>For this example we will use the familiar <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y"> basis vectors. We also draw the Unit Circle for reference.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The plotting function <code>plot_vectors</code> is available in the <a href="https://github.com/enzokro/chaski/blob/main/nbs/blog/posts/2022-11-16-pytorch-slerp/index.ipynb">post’s notebook</a>. It is omitted here for space.</p>
</div>
</div>
<div id="a45e7e42" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use the X and Y unit vectors as an example</span></span>
<span id="cb1-4">xhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb1-5">yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span></code></pre></div>
</div>
<div id="9d7299b0" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot the basis vectors, with a unit circle outline</span></span>
<span id="cb2-2">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_vectors(xhat, yhat, labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$\hat</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{x}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">$'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$\hat</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{y}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">$'</span>], draw_unit_circle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X Axis'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-large'</span>)</span>
<span id="cb2-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y Axis'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-large'</span>)</span>
<span id="cb2-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Basis Vectors on the Unit Circle'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xx-large'</span>, pad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-16-pytorch-slerp/index_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>What happens if we linearly interpolate (LERP) these vectors to their midpoint?</p>
<div id="fe7d6b5a" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use linear interpolation to find the midpoint</span></span>
<span id="cb3-2">p_lerp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (xhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> yhat) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
</div>
<div id="e03835a2" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plotting the LERP of basis vectors x and y</span></span>
<span id="cb4-2">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_vectors(xhat, yhat, p_lerp, labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$\hat</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{x}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">$'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$\hat</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{y}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">$'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P_lerp'</span>])</span>
<span id="cb4-3"></span>
<span id="cb4-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X Axis'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-large'</span>)</span>
<span id="cb4-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y Axis'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-large'</span>)</span>
<span id="cb4-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Linear Interpolation of Unit Vectors'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xx-large'</span>, pad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-16-pytorch-slerp/index_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>If we only cared about getting from <img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D"> to <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bx%7D"> then we are on the right track. LERP is following the shortest possible path.</p>
<p>But imagine if the Unit Circle was like a slice of a high-dimensional Gaussian. In that case, linear interpolation has moved us away from the surface of the soap bubble!</p>
<p>If we were dealing with a 1-D Gaussian, it’s as if we have moved very far from the mean. Imagine going out <img src="https://latex.codecogs.com/png.latex?+10"> <img src="https://latex.codecogs.com/png.latex?%5Csigma"> away. That would obviously be an incredibly unlikely sample. And that is exactly where the <img src="https://latex.codecogs.com/png.latex?P_%5Ctext%7BLERP%7D"> vector ends up.</p>
<p>With SLERP, we can still interpolate the vectors while also staying firmly anchored to the soap bubble.</p>
</section>
</section>
</section>
<section id="slerp-implementation" class="level1">
<h1>SLERP Implementation</h1>
<p>The code below is a refactor of a great numpy implementation by <a href="https://twitter.com/xsteenbrugge"><span class="citation" data-cites="xsteenbrugge">@xsteenbrugge</span></a>. There is an example of it in Andrej Karpathy’s <a href="https://gist.github.com/karpathy/00103b0037c5aaea32fe1da1af553355">Diffusion video script</a>.<br>
We also compare our SLERP to a short PyTorch implementation from <a href="https://twitter.com/ptrblck_de"><span class="citation" data-cites="ptrblck_de">@ptrblck_de</span></a> in the <a href="https://discuss.pytorch.org/t/help-regarding-slerp-function-for-generative-model-sampling/32475/4">pytorch forums</a>.</p>
<p>This version of SLERP is in pure pytorch. It doesn’t cast tensors to and from numpy. But, if GPU memory is at a premium, there is a flag <code>to_cpu</code> to compute SLERP on the CPU instead.</p>
<p>Our SLERP implementation has a threshold on the dot product to avoid <code>nans</code> if the vectors are too close to parallel. Finally, this SLERP also has a <code>zdim</code> argument to handle sequences of vectors.</p>
<div id="9d0ac7fd" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch </span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> slerp(v1, v2, t, DOT_THR<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9995</span>, to_cpu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, zdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb5-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""SLERP for pytorch tensors interpolating `v1` to `v2` with scale of `t`.</span></span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `DOT_THR` determines when the vectors are too close to parallel.</span></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        If they are too close, then a regular linear interpolation is used.</span></span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `to_cpu` is a flag that optionally computes SLERP on the CPU.</span></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        If the input tensors were on a GPU, it moves them back after the computation.  </span></span>
<span id="cb5-11"></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `zdim` is the feature dimension over which to compute norms and find angles.</span></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        For example: if a sequence of 5 vectors is input with shape [5, 768]</span></span>
<span id="cb5-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Then `zdim = 1` or `zdim = -1` computes SLERP along the feature dim of 768.</span></span>
<span id="cb5-15"></span>
<span id="cb5-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Theory Reference:</span></span>
<span id="cb5-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    https://splines.readthedocs.io/en/latest/rotation/slerp.html</span></span>
<span id="cb5-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    PyTorch reference:</span></span>
<span id="cb5-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    https://discuss.pytorch.org/t/help-regarding-slerp-function-for-generative-model-sampling/32475/3</span></span>
<span id="cb5-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Numpy reference: </span></span>
<span id="cb5-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    https://gist.github.com/dvschultz/3af50c40df002da3b751efab1daddf2c</span></span>
<span id="cb5-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb5-23"></span>
<span id="cb5-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check if we need to move to the cpu</span></span>
<span id="cb5-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> to_cpu:</span>
<span id="cb5-26">        orig_device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v1.device</span>
<span id="cb5-27">        v1, v2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v1.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>), v2.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>)</span>
<span id="cb5-28"></span>
<span id="cb5-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># take the dot product between normalized vectors</span></span>
<span id="cb5-30">    v1_norm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> torch.norm(v1, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>zdim, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-31">    v2_norm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> torch.norm(v2, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>zdim, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-32">    dot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (v1_norm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> v2_norm).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(zdim)</span>
<span id="cb5-33"></span>
<span id="cb5-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if the vectors are too close, return a simple linear interpolation</span></span>
<span id="cb5-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(dot) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> DOT_THR).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>():</span>
<span id="cb5-36">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'warning: v1 and v2 close to parallel, using linear interpolation instead.'</span>)</span>
<span id="cb5-37">        res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> t) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> v1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> v2    </span>
<span id="cb5-38"></span>
<span id="cb5-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else apply SLERP</span></span>
<span id="cb5-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb5-41">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute the angle terms we need</span></span>
<span id="cb5-42">        theta   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.acos(dot)</span>
<span id="cb5-43">        theta_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> theta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> t</span>
<span id="cb5-44">        sin_theta   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.sin(theta)</span>
<span id="cb5-45">        sin_theta_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.sin(theta_t)</span>
<span id="cb5-46"></span>
<span id="cb5-47">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute the sine scaling terms for the vectors</span></span>
<span id="cb5-48">        s1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.sin(theta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> theta_t) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sin_theta</span>
<span id="cb5-49">        s2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sin_theta_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sin_theta</span>
<span id="cb5-50"></span>
<span id="cb5-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># interpolate the vectors</span></span>
<span id="cb5-52">        res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (s1.unsqueeze(zdim) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> v1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (s2.unsqueeze(zdim) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> v2)</span>
<span id="cb5-53"></span>
<span id="cb5-54">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check if we need to move them back to the original device</span></span>
<span id="cb5-55">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> to_cpu:</span>
<span id="cb5-56">            res.to(orig_device)</span>
<span id="cb5-57"></span>
<span id="cb5-58">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> res</span></code></pre></div>
</div>
<section id="slerp-interpolation-of-the-unit-vectors" class="level2">
<h2 class="anchored" data-anchor-id="slerp-interpolation-of-the-unit-vectors">SLERP interpolation of the unit vectors</h2>
<p>What happens if we instead use SLERP to interpolate the unit vectors?</p>
<div id="ca636015" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SLERP the unit vectors to their midpoint</span></span>
<span id="cb6-2">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> slerp(xhat, yhat, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span></code></pre></div>
</div>
<div id="1d1d19dc" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot the SLERP iterpolated vector</span></span>
<span id="cb7-2">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_vectors(xhat, yhat, p, labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$\hat</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{x}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">$'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$\hat</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{y}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">$'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P_slerp"</span>])</span>
<span id="cb7-3">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X Axis'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-large'</span>)</span>
<span id="cb7-4">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y Axis'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-large'</span>)</span>
<span id="cb7-5">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SLERP on Unit Vectors to their midpoint P'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xx-large'</span>, pad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-16-pytorch-slerp/index_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>That looks much better!</p>
<p>If the Unit Circle was like a Gaussian soap bubble, then we’ve properly moved along its film.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>This notebook described SLERP and its advantages over regular linear interpolation.</p>
<p>We also presented a PyTorch version of SLERP. This version handles vectors that are too close together, optionally moves computations to the CPU, and handles batched vectors.</p>
<p>Lastly, we drew some examples to make it clear why SLERP is better at interpolating high-dimensional vectors.</p>


</section>

 ]]></description>
  <category>diffusion</category>
  <category>latent interpolation</category>
  <category>SLERP</category>
  <guid>https://enzokro.dev/blog/posts/2022-11-16-pytorch-slerp/</guid>
  <pubDate>Wed, 16 Nov 2022 05:00:00 GMT</pubDate>
  <media:content url="https://enzokro.dev/blog/posts/2022-11-16-pytorch-slerp/slerp.png" medium="image" type="image/png" height="102" width="144"/>
</item>
<item>
  <title>Intro to normalizing and scheduling Classifier-free Guidance</title>
  <dc:creator>enzokro </dc:creator>
  <link>https://enzokro.dev/blog/posts/2022-11-15-guidance-expts-1/</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>Changing the Classifier-Free Guidance parameter during diffusion.</p>
</blockquote>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This notebook covers the results of dynamically changing the guidance parameter during Classifier-Free Guidance (CFG). Most notably, we create a <code>GuidanceTfm</code> class so that others may easily import these ideas and start experimenting.</p>
</section>
<section id="background" class="level1">
<h1>Background</h1>
<p>We build on a great series of discussions on the <a href="https://forums.fast.ai/">fast.ai forums</a> about Classifier-Free Guidance. Some of the users involved were: (please let me know if I missed anyone):</p>
<ul>
<li><a href="https://twitter.com/FahimFarook">FahimF</a><br>
</li>
<li><a href="https://twitter.com/sebderhy">Seb</a><br>
</li>
<li><a href="https://twitter.com/rekil_prashanth">Rekil</a><br>
</li>
<li><a href="https://twitter.com/namrata_kamath">Namrata</a><br>
</li>
<li><a href="https://twitter.com/jeremyphoward">Jeremy</a></li>
</ul>
<p>In these talks, two two ideas came up for better Guidance:</p>
<ul>
<li>Normalizing the latents.<br>
</li>
<li>Scheduling the guidance scalar value.</li>
</ul>
<p>To see why these are good ideas, let’s quickly recap how Classifier-free Guidance works.</p>
<section id="classifier-free-guidance-overview" class="level2">
<h2 class="anchored" data-anchor-id="classifier-free-guidance-overview">Classifier-free Guidance overview</h2>
<p><a href="https://arxiv.org/abs/2207.12598">Classifier-free Guidance</a> is a way of steering the outputs of Diffusion models to better align with a given input. It is a key aspect of how we are able to type in a text prompt and get back a relevant, generated image.</p>
<p>CFG was needed because, by default, a Diffusion model starts from pure noise and randomly “walks” to unearth an image. Classifier-free Guidance can instead align the output according to a known, specific input. This known input is usually a meaningful piece of context like a sentence, or a segment of speech, or even another image.</p>
<p>In summary: Instead of randomly walking to generate random images, CFG allows Diffusion models to create targeted outputs.</p>
<section id="cfg-formula" class="level3">
<h3 class="anchored" data-anchor-id="cfg-formula">CFG Formula</h3>
<p>CFG updates the unconditioned latents to better match the conditional inputs as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Cepsilon%7D(x%20%5C%20%7C%5C%20%20y)%20=%20%5Cepsilon(x)%20+%20G%5Cleft(%5C%20%5Cepsilon(x%5C%20%20%7C%5C%20%20y)%20-%20%5Cepsilon(x)%5C%20%5Cright)"></p>
<p>We can think of this equation as a type of moving average. To be more specific, the terms are:</p>
<table class="table">
<thead>
<tr class="header">
<th><strong>Equation Term</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?%5Cepsilon(x)"></td>
<td>Unconditioned noise prediction</td>
</tr>
<tr class="even">
<td><img src="https://latex.codecogs.com/png.latex?%5Cepsilon(x%5C%20%7C%5C%20y)"></td>
<td>Conditional noise prediction</td>
</tr>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?G"></td>
<td>Guidance scaling factor</td>
</tr>
<tr class="even">
<td><img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Cepsilon%7D(x%5C%20%7C%5C%20y)"></td>
<td>The final, guided prediction.</td>
</tr>
</tbody>
</table>
<p>As several people have noticed, this update is not balanced. The reason for the unbalance is that <img src="https://latex.codecogs.com/png.latex?G"> is usually a large, fixed scalar. For example the default <img src="https://latex.codecogs.com/png.latex?G"> in Stable Diffusion pipelines is <img src="https://latex.codecogs.com/png.latex?G%20=%207.5">.</p>
<p>This brings up two questions:</p>
<ul>
<li>Does a large <img src="https://latex.codecogs.com/png.latex?G"> make the vectors too different?<br>
</li>
<li>Should <img src="https://latex.codecogs.com/png.latex?G"> be a fixed constant throughout the entire diffusion process?</li>
</ul>
<p>Fahim compiled the forum’s answers to these questions in <a href="https://github.com/FahimF/fai-exp/blob/main/guidance_variations.ipynb">this notebook</a>. His work compares both different normalizations and schedules for the Guidance parameter.</p>
<p>At first glance, it seems that both normalizing and scheduling the diffusion parameter improves the generated images. These better images are achieved for “free”, in the sense that we didn’t need any fine-tuning or new data.</p>
<p>Let’s take a look at some of the details and benefits of a dynamic guidance parameter.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>As <a href="https://twitter.com/poolio/status/1584699239342694402?s=20&amp;t=DxGXG7GsU6uLFqUN55tHWw">Ben Poole</a> points out in Jeremy’s twitter thread, these ideas are not new on their own.</p>
<p>One of the scalings was described in <a href="https://arxiv.org/pdf/2205.15370.pdf">Guided-TTS</a> for Speech diffusion. The normalizations are also related to the ones in <a href="https://arxiv.org/pdf/2205.12952.pdf">Pretraining is All You Need for Image-to-Image Translation</a> by Wang et. al.&nbsp;</p>
<p>Our normalizations are similar in spirit to the <code>Dynamic Thresholding</code> in the <a href="https://arxiv.org/abs/2205.11487">Imagen paper</a>.</p>
</div>
</div>
</section>
</section>
<section id="normalizing-the-guidance" class="level2">
<h2 class="anchored" data-anchor-id="normalizing-the-guidance">Normalizing the guidance</h2>
<p>This notebook explores two types of normalization we call <code>BaseNorm</code> and <code>T-Norm</code>:</p>
<ul>
<li><p><code>BaseNorm</code>: Normalize the entire prediction by the ratio of the conditioned and unconditioned norms.<br>
<img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Cepsilon%7D(x%20%5C%20%7C%5C%20%20y)_%5Ctext%7BBaseNorm%7D%20=%20%5Chat%7B%5Cepsilon%7D(x%20%5C%20%7C%5C%20%20y)%5Ccdot%20%5Cfrac%7B%5C%7C%5Cepsilon(x)%5C%7C%7D%7B%5C%7C%5Cepsilon(x%20%5C%20%7C%5C%20%20y)%5C%7C%7D"></p></li>
<li><p><code>T-Norm</code>: Normalize the difference of the conditioned and unconditioned predictions. <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Cepsilon%7D(x%20%5C%20%7C%5C%20%20y)_%5Ctext%7BTNorm%7D%20=%20%5Cepsilon(x)%20+%20G%5C%20%5Cfrac%7B%5Cepsilon(x%20%5C%20%7C%5C%20%20y)%20-%20%5Cepsilon(x)%7D%7B%5C%7C%5Cepsilon(x%20%5C%20%7C%5C%20%20y)%20-%20%5Cepsilon(x)%5C%7C%5Ccdot%20%5C%7C%5Cepsilon(x)%5C%7C%7D"></p></li>
</ul>
</section>
<section id="scheduling-the-guidance" class="level2">
<h2 class="anchored" data-anchor-id="scheduling-the-guidance">Scheduling the guidance</h2>
<p>In standard CFG the guidance scaling value is fixed. But since the final and initial images are so different, should we expect that the same value is optimal for the entire time?</p>
<p>To explore this question we can borrow from Neural Network optimizers. Specifically, our idea of a “guidance schedule” is based on the popular schedules for learning rates.</p>
<p>This notebook explores two new schedules for the CFG parameter <img src="https://latex.codecogs.com/png.latex?G">:</p>
<ul>
<li>Cosine<br>
</li>
<li>Cosine with Warmup.</li>
</ul>
</section>
<section id="combining-the-changes" class="level2">
<h2 class="anchored" data-anchor-id="combining-the-changes">Combining the changes</h2>
<p>The natural idea is to combine these approaches: we should both normalize <em>and</em> schedule <img src="https://latex.codecogs.com/png.latex?G">.</p>
<p>After exploring each change in isolation we combine them to see their joint effects.</p>
</section>
</section>
<section id="coding-setup" class="level1">
<h1>Coding Setup</h1>
<section id="python-imports" class="level2">
<h2 class="anchored" data-anchor-id="python-imports">Python imports</h2>
<p>First we import the python, PyTorch, and HuggingFace modules that we need. We also use the <code>timm</code> library for its built-in Cosine schedules.</p>
<div id="0cc30037" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> List</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> types <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SimpleNamespace</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> textwrap <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> wrap</span>
<span id="cb1-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm </span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># imports for diffusion models</span></span>
<span id="cb1-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb1-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> CLIPTextModel, CLIPTokenizer</span>
<span id="cb1-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> notebook_login</span>
<span id="cb1-20"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> diffusers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StableDiffusionPipeline</span>
<span id="cb1-21"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> diffusers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoencoderKL, UNet2DConditionModel</span>
<span id="cb1-22"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> diffusers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LMSDiscreteScheduler</span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use cosine scheduler from timm</span></span>
<span id="cb1-25"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> timm.scheduler.cosine_lr <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> CosineLRScheduler</span>
<span id="cb1-26"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> timm.optim <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> create_optimizer</span>
<span id="cb1-27"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> timm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> create_model</span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for clean outputs</span></span>
<span id="cb1-30">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ignore"</span>)</span>
<span id="cb1-31">logging.set_verbosity_error()</span>
<span id="cb1-32"></span>
<span id="cb1-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set the hardware device</span></span>
<span id="cb1-34">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mps"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.has_mps <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>2022-11-20 19:51:47.940762: I tensorflow/stream_executor/platform/default/dso_loader.cc:53] Successfully opened dynamic library libcudart.so.11.0</code></pre>
</div>
</div>
</section>
<section id="prompt-for-image-generations" class="level2">
<h2 class="anchored" data-anchor-id="prompt-for-image-generations">Prompt for image generations</h2>
<p>We use the following prompt to test our guidance changes:</p>
<blockquote class="blockquote">
<p>“a photograph of an astronaut riding a horse”</p>
</blockquote>
<p>This is the same prompt folks used in the forums. It seems like a good, simple starting point for future runs.</p>
<div id="fed4132f" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the input prompt for diffusion</span></span>
<span id="cb3-2">prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a photograph of an astronaut riding a horse"</span></span></code></pre></div>
</div>
</section>
<section id="picking-a-diffusion-model" class="level2">
<h2 class="anchored" data-anchor-id="picking-a-diffusion-model">Picking a Diffusion model</h2>
<p>We also have to pick a Diffusion model. Some possible options are:</p>
<ul>
<li><code>stable-Diffusion-v1-4</code> from CompVis.<br>
</li>
<li><code>stable-Diffusion v1-5</code> from Runway.ml.</li>
</ul>
<p>Here we use the Stable Diffusion <code>v1-4</code> model from CompVis.</p>
<p>But it is worth mentioning that this code will work with any Diffusion model name on the HuggingFace hub.</p>
<div id="d144135e" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set the diffusion model</span></span>
<span id="cb4-2">model_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CompVis/stable-diffusion-v1-4"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "runwayml/stable-diffusion-v1-5"</span></span></code></pre></div>
</div>
</section>
<section id="utility-functions." class="level2">
<h2 class="anchored" data-anchor-id="utility-functions.">Utility functions.</h2>
<p>Next we define some helper functions.</p>
<p>These helpers create the text embeddings, convert latent features into images, and plot the decoded images. All of these functions are directly from Fahim’s notebook.</p>
<div id="cbde9284" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> text_embeddings(prompts, maxlen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Extracts text embeddings from the given `prompts`."</span></span>
<span id="cb5-3">    maxlen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> maxlen <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> tokenizer.model_max_length</span>
<span id="cb5-4">    inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(prompts, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_length"</span>, max_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>maxlen, truncation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>)</span>
<span id="cb5-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> text_encoder(inp.input_ids.to(device))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-6"></span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> image_from_latents(latents):</span>
<span id="cb5-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Scales the diffusion `latents` and turns them into a PIL Image."</span></span>
<span id="cb5-10">    </span>
<span id="cb5-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># scale and decode the latents</span></span>
<span id="cb5-12">    latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.18215</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> latents</span>
<span id="cb5-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb5-14">        data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vae.decode(latents).sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-15"></span>
<span id="cb5-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create PIL image</span></span>
<span id="cb5-17">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>).clamp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-18">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.cpu().permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>().numpy()</span>
<span id="cb5-19">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>().astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uint8"</span>)</span>
<span id="cb5-20">    image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.fromarray(data)</span>
<span id="cb5-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image</span>
<span id="cb5-22">    </span>
<span id="cb5-23">    </span>
<span id="cb5-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> show_image(image, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>):</span>
<span id="cb5-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Displays the given `image` resized based on `scale`."</span></span>
<span id="cb5-26">    img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.resize(((<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)(image.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scale), (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)(image.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scale)))</span>
<span id="cb5-27">    display(img)</span>
<span id="cb5-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> img</span>
<span id="cb5-29"></span>
<span id="cb5-30"></span>
<span id="cb5-31"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> image_grid(images, rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb5-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Display an array of images in a nice grid, or single row"</span></span>
<span id="cb5-33">    count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(images)</span>
<span id="cb5-34">    cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> rows)</span>
<span id="cb5-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> count:</span>
<span id="cb5-36">        rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate fig size based on individual image sizes    </span></span>
<span id="cb5-38">    px <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'figure.dpi'</span>]</span>
<span id="cb5-39">    w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> px</span>
<span id="cb5-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add some extra space for the caption/title since that can wrap</span></span>
<span id="cb5-41">    h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> px) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> px)</span>
<span id="cb5-42">    fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(rows, cols, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(w, h))</span>
<span id="cb5-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> y <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(rows):</span>
<span id="cb5-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(cols):</span>
<span id="cb5-45">            index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x</span>
<span id="cb5-46">            ref <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes[x] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> axes[y] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> axes[y, x]</span>
<span id="cb5-47">            ref.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb5-48">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb5-49">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb5-50">            img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> images[index]</span>
<span id="cb5-51">            txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Frame: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>index<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb5-52">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> title <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb5-53">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(title, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb5-54">                    txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>index<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb5-55">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(title, List):</span>
<span id="cb5-56">                    txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> title[index]</span>
<span id="cb5-57">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># small change for bigger, more visible titles</span></span>
<span id="cb5-58">            txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.join(wrap(txt, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>))</span>
<span id="cb5-59">            ref.set_title(txt, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-large'</span>)</span>
<span id="cb5-60">            ref.imshow(img)</span>
<span id="cb5-61">            ref.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb5-62">            </span></code></pre></div>
</div>
</section>
</section>
<section id="splitting-the-diffusion-pipeline." class="level1">
<h1>Splitting the Diffusion pipeline.</h1>
<p>To test our hypotheses we need to change the parameter <img src="https://latex.codecogs.com/png.latex?G"> during diffusion.</p>
<p>That means we need more control than what is available via HuggingFace’s <code>pipeline</code> API.</p>
<p>We can achieve this finer control by separately loading each piece of the Stable Diffusion pipeline. Then, we can use these pieces to write our own image generation loop.</p>
<p>The function <code>get_sd_pieces()</code> returns the following pieces for a given Diffusion model:</p>
<ul>
<li>Tokenizer.</li>
<li>Text Encoder.<br>
</li>
<li>Variational Auto-Encoder (VAE).<br>
</li>
<li>U-Net.<br>
</li>
<li>Sampler.</li>
</ul>
<blockquote class="blockquote">
<p>Note: We are using a different <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BVAE%7D"> from <code>stability.ai</code> that was fine-tuned for more steps.</p>
</blockquote>
<div id="f74c403d" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_sd_pieces(model_name, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float32):</span>
<span id="cb6-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Loads and returns the individual pieces in a Diffusion pipeline."</span></span>
<span id="cb6-3">    </span>
<span id="cb6-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the tokenizer and text encoder</span></span>
<span id="cb6-5">    tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CLIPTokenizer.from_pretrained(</span>
<span id="cb6-6">        model_name,</span>
<span id="cb6-7">        subfolder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tokenizer"</span>,</span>
<span id="cb6-8">        torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dtype)</span>
<span id="cb6-9">    text_encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CLIPTextModel.from_pretrained(</span>
<span id="cb6-10">        model_name,</span>
<span id="cb6-11">        subfolder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text_encoder"</span>,</span>
<span id="cb6-12">        torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dtype).to(device)</span>
<span id="cb6-13"></span>
<span id="cb6-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we are using a VAE from stability that was trained for longer than the baseline </span></span>
<span id="cb6-15">    vae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoencoderKL.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stabilityai/sd-vae-ft-ema"</span>, torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dtype).to(device)</span>
<span id="cb6-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">NOTE</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: we can also use these vae from Stability that were trained for even longer</span></span>
<span id="cb6-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#vae = AutoencoderKL.from_pretrained("stabilityai/sd-vae-ft-mse", torch_dtype=dtype).to(device)</span></span>
<span id="cb6-18">    </span>
<span id="cb6-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># build the unet</span></span>
<span id="cb6-20">    unet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> UNet2DConditionModel.from_pretrained(</span>
<span id="cb6-21">        model_name,</span>
<span id="cb6-22">        subfolder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unet"</span>,</span>
<span id="cb6-23">        torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dtype).to(device)</span>
<span id="cb6-24">    </span>
<span id="cb6-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># enable unet attention slicing</span></span>
<span id="cb6-26">    slice_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unet.config.attention_head_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-27">    unet.set_attention_slice(slice_size)</span>
<span id="cb6-28">        </span>
<span id="cb6-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># build the scheduler</span></span>
<span id="cb6-30">    scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LMSDiscreteScheduler.from_config(model_name, subfolder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scheduler"</span>)</span>
<span id="cb6-31">    </span>
<span id="cb6-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (</span>
<span id="cb6-33">        tokenizer,</span>
<span id="cb6-34">        text_encoder,</span>
<span id="cb6-35">        vae,</span>
<span id="cb6-36">        unet,</span>
<span id="cb6-37">        scheduler,</span>
<span id="cb6-38">    )</span>
<span id="cb6-39"></span>
<span id="cb6-40"></span>
<span id="cb6-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load the individual diffusion pieces</span></span>
<span id="cb6-42">pieces <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_sd_pieces(model_name, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float16)</span>
<span id="cb6-43">(tokenizer, text_encoder, vae, unet, scheduler) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pieces</span></code></pre></div>
</div>
</section>
<section id="cosine-schedules-from-timm" class="level1">
<h1>Cosine schedules from <code>timm</code></h1>
<p>We test two different schedules for <img src="https://latex.codecogs.com/png.latex?G">:</p>
<ul>
<li>Cosine schedule.<br>
</li>
<li>Cosine with Warmup.</li>
</ul>
<p>The HuggingFace <code>pipeline</code> uses 50 diffusion timesteps by default. To keep things comparable, we also use 50 steps.</p>
<p>The Cosine schedule starts from the default <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bmax%7D%20=%207.5">. It then slowly works down to a minimum of <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bmin%7D%20=%200.15">.</p>
<p>We also make a schedule with Warmup. Warmup means that <img src="https://latex.codecogs.com/png.latex?G"> first starts low, then linearly works its way up to <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bmax%7D">. Only then does it start decreasing back down to <img src="https://latex.codecogs.com/png.latex?G_%5Ctext%7Bmin%7D">. As a starting point, we warmup during the first 10% of the Diffusion process (aka during the first 5 steps).</p>
<p>For T-Norm, we use a slightly different Cosine schedule with smaller values. We need this because a large <img src="https://latex.codecogs.com/png.latex?G"> with T-Norm makes the problem we are trying to solve (<img src="https://latex.codecogs.com/png.latex?G"> too large) even worse. The smaller T-Norm values also align much better with how we typically think about mixing or moving averages.</p>
<div id="cef93f6a" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parameters for CFG cosine schedules</span></span>
<span id="cb7-2">max_g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span></span>
<span id="cb7-3">min_g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span></span>
<span id="cb7-4">num_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># warmup from the minimum over 10% of the process</span></span>
<span id="cb7-7">warmup_ratio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.10</span>  </span>
<span id="cb7-8">warmup_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> min_g</span>
<span id="cb7-9"></span>
<span id="cb7-10"></span>
<span id="cb7-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cosine schedule parameters</span></span>
<span id="cb7-12">cos_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb7-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>:         max_g,</span>
<span id="cb7-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_steps'</span>:       num_steps,</span>
<span id="cb7-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_val'</span>:         warmup_start,</span>
<span id="cb7-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warmup_fact'</span>:     <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-17">}</span>
<span id="cb7-18"></span>
<span id="cb7-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># warmup-cosine parameters</span></span>
<span id="cb7-20">warmup_cos_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb7-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>:         max_g,</span>
<span id="cb7-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warmup_start'</span>:    warmup_start,</span>
<span id="cb7-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_steps'</span>:       num_steps,</span>
<span id="cb7-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_val'</span>:         warmup_start,</span>
<span id="cb7-25">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warmup_init_val'</span>: warmup_start,</span>
<span id="cb7-26">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warmup_fact'</span>:     warmup_ratio,</span>
<span id="cb7-27">}</span>
<span id="cb7-28"></span>
<span id="cb7-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cosine schedule for T-Norm guidance</span></span>
<span id="cb7-30">t_scale_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb7-31">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>:         <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>,</span>
<span id="cb7-32">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_steps'</span>:       num_steps,</span>
<span id="cb7-33">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_val'</span>:         <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>,</span>
<span id="cb7-34">}</span></code></pre></div>
</div>
<p>We use the Cosine scheduler in <code>timm</code> for convenience.</p>
<p>That means we need a bit of overhead code. Mainly, we need a dummy PyTorch optimizer and module.</p>
<div id="27150ed4" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create dummy model</span></span>
<span id="cb8-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># arguments for the dummy optimizer</span></span>
<span id="cb8-5">default_opt_args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb8-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'opt'</span>:           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adam'</span>,</span>
<span id="cb8-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'momentum'</span>:      <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>,</span>
<span id="cb8-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weight_decay'</span>:  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb8-9">}</span>
<span id="cb8-10"></span>
<span id="cb8-11"></span>
<span id="cb8-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_cos_sched(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>sched_params):</span>
<span id="cb8-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Creates a Cosine schedule using the `timm` library."""</span></span>
<span id="cb8-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of diffusion iterations</span></span>
<span id="cb8-15">    num_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sched_params[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_steps'</span>]</span>
<span id="cb8-16">    </span>
<span id="cb8-17">    min_val, max_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sched_params[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_val'</span>], sched_params[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_val'</span>]</span>
<span id="cb8-18">    </span>
<span id="cb8-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute number of warmup steps, if given</span></span>
<span id="cb8-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> sched_params.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warmup_fact'</span>):</span>
<span id="cb8-21">        warmup_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(num_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sched_params[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warmup_fact'</span>])</span>
<span id="cb8-22">        warmup_init_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sched_params.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warmup_init_val'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb8-24">        warmup_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> warmup_init_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb8-25">    </span>
<span id="cb8-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the dummy optimizer for the timm scheduler</span></span>
<span id="cb8-27">    opt_args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SimpleNamespace(lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_val, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>default_opt_args)</span>
<span id="cb8-28">    optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_optimizer(opt_args, model)</span>
<span id="cb8-29">      </span>
<span id="cb8-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the cosine schedule</span></span>
<span id="cb8-31">    lr_sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CosineLRScheduler(</span>
<span id="cb8-32">        optimizer,</span>
<span id="cb8-33">        t_initial<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_steps,</span>
<span id="cb8-34">        lr_min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>min_val,</span>
<span id="cb8-35">        warmup_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>warmup_t,</span>
<span id="cb8-36">        warmup_lr_init<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>warmup_init_val,</span>
<span id="cb8-37">    )</span>
<span id="cb8-38"></span>
<span id="cb8-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># extract and return the CFG values at each iteration</span></span>
<span id="cb8-40">    cfg_per_step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [lr_sched.get_epoch_values(step)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> step <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_steps)]</span>
<span id="cb8-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> cfg_per_step</span></code></pre></div>
</div>
<p>Now that we have both the parameters and builder functions for Cosine schedules, we can create them:</p>
<div id="952afced" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># baseline cosine guidance schedule</span></span>
<span id="cb9-2">cos_g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_cos_sched(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>cos_params)</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cosine schedule with warmup </span></span>
<span id="cb9-5">warmup_cos_g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_cos_sched(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>warmup_cos_params)</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cosine schedule with smaller G values for T-Norm</span></span>
<span id="cb9-8">t_scale_cos_g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_cos_sched(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>t_scale_params)</span></code></pre></div>
</div>
<section id="plotting-the-cosine-schedules" class="level2">
<h2 class="anchored" data-anchor-id="plotting-the-cosine-schedules">Plotting the Cosine schedules</h2>
<p>Let’s plot these new schedules to compare them against the previous, constant guidance.</p>
<div id="3bb2180d" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-15-guidance-expts-1/index_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="the-guidance-transform-class" class="level1">
<h1>The Guidance Transform class</h1>
<p>Here we create the Guidance Transformation class, <code>GuidanceTfm</code>. This class is heavily inspired by other <a href="https://fastai1.fast.ai/vision.transform.html">Transforms in the fast.ai library</a>.</p>
<p><code>GuidanceTfm</code> has an <code>encode()</code> method that takes the following inputs:</p>
<table class="table">
<thead>
<tr class="header">
<th><strong>encode Argument</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?%5Cepsilon(x)"></td>
<td>Unconditioned latents</td>
</tr>
<tr class="even">
<td><img src="https://latex.codecogs.com/png.latex?%5Cepsilon(x%5C%20%7C%5C%20y)"></td>
<td>Conditional latents</td>
</tr>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bidx%7D"></td>
<td>The current diffusion step</td>
</tr>
</tbody>
</table>
<p>For convenience we call the unconditioned latents “<img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bu%7D">” and the conditioned latents “<img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bt%7D">”.</p>
<p>The base class applies a standard CFG update. However, there are also methods to pre and post process the latents. The goal of these other methods is to easily try different and custom normalizations. For example, we can implement all of our normalization ideas with these methods.</p>
<p>Lastly, <code>GuidanceTfm</code> takes one initialization parameter: <code>schedules</code>. This is a dictionary that maps a parameter name to an array-like, indexable sequence of values. This sequence is how we tap in to the scheduled <img src="https://latex.codecogs.com/png.latex?G"> value at timestep <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bidx%7D">. And if we ever want to include or schedule other parameters, we can add them to <code>schedules</code> and access them in any of the <code>encode()</code> functions.</p>
<div id="af24a0e3" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> GuidanceTfm:</span>
<span id="cb10-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Baseline Classifier-free Guidance for Difussion."</span></span>
<span id="cb10-3">    name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CFGuidance"</span></span>
<span id="cb10-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, schedules, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb10-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> schedules</span>
<span id="cb10-6">        </span>
<span id="cb10-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> encode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, u, t, idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb10-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Applies guidance on `u` and `t` with optional pre/post processing."</span></span>
<span id="cb10-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pre_proc(u, t, idx)</span>
<span id="cb10-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.guide(u, t, idx)</span>
<span id="cb10-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.post_proc(u, t, idx)</span>
<span id="cb10-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pred</span>
<span id="cb10-13">    </span>
<span id="cb10-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> guide(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, u, t, idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb10-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Mixes latents `u` and `t` based on guidance schedule for `g`."</span></span>
<span id="cb10-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.scheduler(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'g'</span>, idx) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> u))</span>
<span id="cb10-17"></span>
<span id="cb10-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pre_proc (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, u, t, idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>): <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb10-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> post_proc(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, u, t, idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>): <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb10-20">    </span>
<span id="cb10-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> scheduler(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, name, idx):</span>
<span id="cb10-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Gets the scheduled value for parameter `name` at timestep `idx`."</span></span>
<span id="cb10-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.schedules.get(name)[idx]</span>
<span id="cb10-24">    </span>
<span id="cb10-25">    </span>
<span id="cb10-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> BaseNormGuidance(GuidanceTfm):</span>
<span id="cb10-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Scales the noise prediction by its overall norm."</span></span>
<span id="cb10-28">    name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BaseNormGuidance"</span></span>
<span id="cb10-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> post_proc(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, u, t, idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb10-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (torch.linalg.norm(u) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> torch.linalg.norm(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pred))</span>
<span id="cb10-31">        </span>
<span id="cb10-32">        </span>
<span id="cb10-33"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> TNormGuidance(GuidanceTfm):</span>
<span id="cb10-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Scales the latent mix of `t - u`"</span></span>
<span id="cb10-35">    name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TNormGuidance"</span></span>
<span id="cb10-36">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> guide(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, u, t, idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb10-37">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.scheduler(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'g'</span>, idx) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> u)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> torch.linalg.norm(t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> u) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> torch.linalg.norm(u)</span>
<span id="cb10-38">        </span>
<span id="cb10-39">        </span>
<span id="cb10-40"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> FullNormGuidance(TNormGuidance, BaseNormGuidance):</span>
<span id="cb10-41">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Applies both Base and T-Norm on the noise prediction."</span></span>
<span id="cb10-42">    name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FullNormGuidance"</span></span>
<span id="cb10-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span></code></pre></div>
</div>
</section>
<section id="creating-guidance-experiments" class="level1">
<h1>Creating guidance experiments</h1>
<p>Now that we have the transforms and schedules, we are finally ready to create some experiments!</p>
<section id="making-schedules-for-guidancetfm" class="level2">
<h2 class="anchored" data-anchor-id="making-schedules-for-guidancetfm">Making <code>schedules</code> for <code>GuidanceTfm</code></h2>
<p>We start with the following family of Guidance schedules:<br>
- Constant guidance with <img src="https://latex.codecogs.com/png.latex?%5Cleft(G%20=%207.5%5Cright)"><br>
- Constant guidance with <img src="https://latex.codecogs.com/png.latex?%5Cleft(G%20=%200.15%5Cright)"><br>
- A cosine schedule from <img src="https://latex.codecogs.com/png.latex?%5Cleft(G%20=%207.5%5Cright)"> down to <img src="https://latex.codecogs.com/png.latex?%5Cleft(G%20=%200.15%5Cright)"><br>
- A cosine schedule that warms up to <img src="https://latex.codecogs.com/png.latex?%5Cleft(G%20=%207.5%5Cright)"> over the first 10% of steps</p>
<p>For the T-Norm experiments, we also define a smaller-valued cosine schedule:<br>
- T-Norm cosine schedule from <img src="https://latex.codecogs.com/png.latex?%5Cleft(G%20=%200.25%5Cright)"> down to <img src="https://latex.codecogs.com/png.latex?%5Cleft(G%20=%200.05%5Cright)"></p>
<p>The schedule maps below will be the arguments to our <code>GuidanceTfm</code> instances.&nbsp;</p>
<div id="584f7008" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># baseline constant schedules with min and max values</span></span>
<span id="cb11-2">max_sched        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'g'</span>: [max_g] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> num_steps}</span>
<span id="cb11-3">min_sched        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'g'</span>: [min_g] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> num_steps}</span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cosine schedules</span></span>
<span id="cb11-6">cos_sched        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'g'</span>: cos_g}</span>
<span id="cb11-7">cos_warmup_sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'g'</span>: warmup_cos_g}</span>
<span id="cb11-8"></span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># normalized cosing schedules for T and Full-scale guidance</span></span>
<span id="cb11-10">small_cos_sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'g'</span>:  t_scale_cos_g}</span></code></pre></div>
</div>
</section>
<section id="recreating-the-forum-ideas" class="level2">
<h2 class="anchored" data-anchor-id="recreating-the-forum-ideas">Recreating the forum ideas</h2>
<p>First, let’s recreate the experiment baselines from the forums and Fahim’s notebook.</p>
<div id="63949d49" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stores the guidance experiements to run</span></span>
<span id="cb12-2">expts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb12-3"></span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">### RECREATE SCALING RUNS FROM fast.ai FORUM POSTS</span></span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#################################################</span></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#################################################</span></span>
<span id="cb12-8">baseline        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GuidanceTfm(max_sched)       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1) No scaling, guidance fixed to 7.5</span></span>
<span id="cb12-9">scale_base_hi_g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BaseNormGuidance(max_sched)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2) Scale the "whole" update</span></span>
<span id="cb12-10">scale_T_lo_g    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TNormGuidance(min_sched)     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3) Scale the update of "t"</span></span>
<span id="cb12-11">scale_all_hi_g  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FullNormGuidance(min_sched)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4) Scale everything (steps 2 + 3)</span></span>
<span id="cb12-12"></span>
<span id="cb12-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add baselines to the experiment list</span></span>
<span id="cb12-14">expts[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'NoNorm_FixedG_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>max_g<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>]   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> baseline</span>
<span id="cb12-15">expts[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'BaseNorm_FixedG_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>max_g<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scale_base_hi_g</span>
<span id="cb12-16">expts[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'TNorm_FixedG_0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>min_g<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>]   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scale_T_lo_g</span>
<span id="cb12-17">expts[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'FullNorm_FixedG_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>min_g<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scale_all_hi_g</span>
<span id="cb12-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#################################################</span></span></code></pre></div>
</div>
</section>
<section id="combining-scales-and-schedules" class="level2">
<h2 class="anchored" data-anchor-id="combining-scales-and-schedules">Combining scales and schedules</h2>
<p>Next, we leverage our <code>GuidanceTfm</code> class to easily make new experiments.</p>
<p>We create the following:</p>
<ul>
<li>Default and BaseNorm Guidance with Cosine and Cosine Warmup schedules.</li>
<li>T-Norm and FullNorm Guidance with the smaller T-Cosine schedule.</li>
</ul>
<div id="182370da" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># group the cosine to run, and their names for plotting</span></span>
<span id="cb13-2">name2sched <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb13-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cos'</span>:        cos_sched,</span>
<span id="cb13-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CosWarmup'</span>:  cos_warmup_sched,</span>
<span id="cb13-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TCos'</span>:       small_cos_sched,</span>
<span id="cb13-6">}</span>
<span id="cb13-7"></span>
<span id="cb13-8"></span>
<span id="cb13-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># T-Norm and FullNorm guidance with small T-Cosine</span></span>
<span id="cb13-10">norm_scalers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [TNormGuidance, FullNormGuidance]</span>
<span id="cb13-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> scaler <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> norm_scalers:</span>
<span id="cb13-12">    </span>
<span id="cb13-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step through all cosine schedules</span></span>
<span id="cb13-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TCos'</span>]:</span>
<span id="cb13-15"></span>
<span id="cb13-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># experiment for this (scaling, schedule) pair</span></span>
<span id="cb13-17">        expt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler(name2sched[name])</span>
<span id="cb13-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># unique name for this experiment</span></span>
<span id="cb13-19">        expt_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>scaler<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_Sched_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb13-20"></span>
<span id="cb13-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add scaler to lists of experiments</span></span>
<span id="cb13-22">        expts[expt_name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expt</span>
<span id="cb13-23"></span>
<span id="cb13-24">        </span>
<span id="cb13-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Default and BaseNorm guidance with cosine schedules </span></span>
<span id="cb13-26">g_scalers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [GuidanceTfm, BaseNormGuidance]</span>
<span id="cb13-27"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> scaler <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> g_scalers:</span>
<span id="cb13-28">    </span>
<span id="cb13-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># step through all cosine schedules</span></span>
<span id="cb13-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cos'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CosWarmup'</span>]:</span>
<span id="cb13-31"></span>
<span id="cb13-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># experiment for this (scaling, schedule) pair</span></span>
<span id="cb13-33">        expt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler(name2sched[name])</span>
<span id="cb13-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># unique name for this experiment</span></span>
<span id="cb13-35">        expt_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>scaler<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_Sched_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb13-36"></span>
<span id="cb13-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add scaler to lists of experiments</span></span>
<span id="cb13-38">        expts[expt_name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expt</span></code></pre></div>
</div>
<p>Here we print all of the queued experiments:</p>
<div id="619f5f98" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Guidance experiments to run:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.join(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k,_ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> expts.items()))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Guidance experiments to run:

NoNorm_FixedG_7.50
BaseNorm_FixedG_7.50
TNorm_FixedG_00.15
FullNorm_FixedG_0.15
TNormGuidance_Sched_TCos
FullNormGuidance_Sched_TCos
CFGuidance_Sched_Cos
CFGuidance_Sched_CosWarmup
BaseNormGuidance_Sched_Cos
BaseNormGuidance_Sched_CosWarmup</code></pre>
</div>
</div>
</section>
</section>
<section id="generating-images" class="level1">
<h1>Generating images</h1>
<p>We are almost there! Now we need a way to actually generate images.</p>
<p>The <code>generate()</code> function below is almost identical to the the <code>StableDiffusionPipeline()</code> from HuggingFace.</p>
<p>We make a few changes to ensure that the initial latents are the same between runs. That means that only the guidance schedule and/or normalization affects the outputs.</p>
<div id="90953f08" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the shared, initial latents</span></span>
<span id="cb16-2">width, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># grab the initial set of latents</span></span>
<span id="cb16-5">seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span></span>
<span id="cb16-6">torch.manual_seed(seed)</span>
<span id="cb16-7">init_latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, unet.in_channels, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>unet.dtype, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span>
<span id="cb16-8"></span>
<span id="cb16-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> generate(prompt, gtfm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>width, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>height, guidance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_g, steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_steps, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb16-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make sure we got a guidance function</span></span>
<span id="cb16-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> gtfm</span>
<span id="cb16-12">    </span>
<span id="cb16-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prepare text embeddings</span></span>
<span id="cb16-14">    text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_embeddings(prompt)</span>
<span id="cb16-15">    uncond <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_embeddings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span>
<span id="cb16-16">    emb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([uncond, text]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(unet.dtype)</span>
<span id="cb16-17">    </span>
<span id="cb16-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start from the shared, initial latents</span></span>
<span id="cb16-19">    latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.clone(init_latents)</span>
<span id="cb16-20">    scheduler.set_timesteps(steps)</span>
<span id="cb16-21">    latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scheduler.init_noise_sigma</span>
<span id="cb16-22">    </span>
<span id="cb16-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run diffusion</span></span>
<span id="cb16-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,ts <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(tqdm(scheduler.timesteps)):</span>
<span id="cb16-25">        inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scheduler.scale_model_input(torch.cat([latents] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), ts)</span>
<span id="cb16-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad(): </span>
<span id="cb16-27">            tf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ts</span>
<span id="cb16-28">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.has_mps:</span>
<span id="cb16-29">                tf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ts.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(torch.float32)</span>
<span id="cb16-30">            u,t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unet(inp, tf, encoder_hidden_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>emb).sample.chunk(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb16-31">        </span>
<span id="cb16-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run the guidance transform</span></span>
<span id="cb16-33">        pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gtfm.encode(u, t, idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i)</span>
<span id="cb16-34">        </span>
<span id="cb16-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the latents</span></span>
<span id="cb16-36">        latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scheduler.step(pred, ts, latents).prev_sample</span>
<span id="cb16-37">        </span>
<span id="cb16-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># decode and return the final latents</span></span>
<span id="cb16-39">    image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_from_latents(latents)</span>
<span id="cb16-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image    </span></code></pre></div>
</div>
<p>Let’s save ourselves some work by writing a harness function to automatically store the experiment results:</p>
<div id="ca6eb625" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># store generated images and their title (the experiment name)</span></span>
<span id="cb17-2">images, titles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> harness(prompt, gtfm, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>):</span>
<span id="cb17-5">    img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate(prompt, gtfm)</span>
<span id="cb17-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print(title)</span></span>
<span id="cb17-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#show_image(img, scale=1)</span></span>
<span id="cb17-8">    images.append(img)</span>
<span id="cb17-9">    titles.append(title)</span></code></pre></div>
</div>
</section>
<section id="running-the-guidance-experiments." class="level1">
<h1>Running the guidance experiments.</h1>
<div id="aeb2c4ea" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run each of the functions with the harness</span></span>
<span id="cb18-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gname, gtfm <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> expts.items():</span>
<span id="cb18-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Running experiment: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gname<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">...'</span>)</span>
<span id="cb18-4">    harness(prompt, gtfm, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gname)</span>
<span id="cb18-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Done.'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running experiment: NoNorm_FixedG_7.50...
Done.
Running experiment: BaseNorm_FixedG_7.50...
Done.
Running experiment: TNorm_FixedG_00.15...
Done.
Running experiment: FullNorm_FixedG_0.15...
Done.
Running experiment: TNormGuidance_Sched_TCos...
Done.
Running experiment: FullNormGuidance_Sched_TCos...
Done.
Running experiment: CFGuidance_Sched_Cos...
Done.
Running experiment: CFGuidance_Sched_CosWarmup...
Done.
Running experiment: BaseNormGuidance_Sched_Cos...
Done.
Running experiment: BaseNormGuidance_Sched_CosWarmup...
Done.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"9e3cb44d425b4994a0aa363d1a14011d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"134fb54d395046bba9856700ca610b80","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"fbf505ed0abd45378c252fb8670988e7","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ffca5d3f1d67453db00db873b9614ebc","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4495dd788635406ba678603645c592d7","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1e1dc057dcda4a3987b63e783d2b09d9","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"886b4658518844ea8201f02fa98af963","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1177d0ab4c4e4a2fadb288795f0fcc9f","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b9fe3e42d55b4e2283c09dc82b1f7576","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"28da7d2dcd1b4038b89354c866c156f5","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
</section>
<section id="results" class="level1">
<h1>Results</h1>
<section id="showing-all-images-side-by-side" class="level2">
<h2 class="anchored" data-anchor-id="showing-all-images-side-by-side">Showing all images side by side</h2>
<p>Our starting image, the baseline, is in the top-left. All other images are from different Guidance normalizations and schedules.</p>
<div id="c2d1aa19" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-15-guidance-expts-1/index_files/figure-html/cell-20-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>That’s a lot of images. Thankfully, there is one result that stands out above the rest:</p>
</section>
<section id="biggest-improvement-cosine-with-t-norm-and-fullnorm" class="level2">
<h2 class="anchored" data-anchor-id="biggest-improvement-cosine-with-t-norm-and-fullnorm">Biggest Improvement: Cosine with T-Norm and FullNorm</h2>
<p>There seems to be a consistent gain from using either T-Norm or FullNorm with a Cosine schedule.</p>
<p>The image below compares our baseline to T-Norm and Cosine schedule. We can see:</p>
<ul>
<li>A more semantically correct horse (it has all of its legs!).<br>
</li>
<li>Better details and colors in the background.</li>
</ul>
<p>The horse’s body is still not quite right, but it’s a marked improvement from the baseline.</p>
<div id="0973ddb3" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-15-guidance-expts-1/index_files/figure-html/cell-21-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="cosine-t-norm-vs.-cosine-fullnorm" class="level2">
<h2 class="anchored" data-anchor-id="cosine-t-norm-vs.-cosine-fullnorm">Cosine T-Norm vs.&nbsp;Cosine FullNorm</h2>
<p>These images are close, and both are better than the baseline. It seems we traded some background quality for subject quality with FullNorm vs.&nbsp;T-Norm.</p>
<div id="bac76ba3" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-15-guidance-expts-1/index_files/figure-html/cell-22-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>This notebook recaps a set of discussions on the fast.ai forums about how to improve Classifier-free Guidance.</p>
<p>Two changes were proposed and tested:<br>
- Normalizing the guidance parameter.<br>
- Scheduling the guidance parameter.</p>
<p>A <code>GuidanceTfm</code> class was created to easily leverage these approaches in other runs.</p>
<p>Overall, it seems that a combination of T-Norm and Cosine schedule improves both the details and syntax of generated images.</p>
<p>Given that these improvements are achieved for “free”, with a negligible increase in computation time, and without any external data or fine-tuning, they could be a healthy addition to any existing diffusion process.</p>
<section id="more-examples" class="level3">
<h3 class="anchored" data-anchor-id="more-examples">More examples</h3>
<p>Here is an example from a run using a different prompt:</p>
<blockquote class="blockquote">
<p>“a portrait of a great Incan Warlord wearing his ornate ceremonial armor”</p>
</blockquote>
<p>With a few Diffusion pipeline changes:</p>
<ul>
<li>Using Stable Diffusion <code>v1-5</code> from Runway.ml<br>
</li>
<li>Using <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BVAE-mse%7D"> from stability.ai</li>
</ul>
<p>We again see a huge improvement from using FullNorm with a Cosine schedule.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: left;"><strong>Baseline</strong></th>
<th style="text-align: left;"><strong>FullNorm with Cosine schedule</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><img src="https://enzokro.dev/blog/posts/2022-11-15-guidance-expts-1/comp1.png" class="img-fluid"></td>
<td style="text-align: left;"><img src="https://enzokro.dev/blog/posts/2022-11-15-guidance-expts-1/comp2.png" class="img-fluid"></td>
</tr>
</tbody>
</table>
<p>This shows that the improvements may not be isolated to <code>v1-4</code> or any particular <img src="https://latex.codecogs.com/png.latex?VAE">!</p>
</section>
</section>
<section id="appendix-more-comparisons" class="level1">
<h1>Appendix: More comparisons</h1>
<p>The gains from other schedules are normalizations are less noticeable.</p>
<p>There are likely still universal gains from normalizing. But with Cosine schedules on their own the results are more mixed.</p>
<p>To drive this point home: there is a lot more exploration left to do for both schedule values and warmups. This notebook is hopefully a good starting point for others to build on!</p>
<section id="original-vs.-basenorm" class="level2">
<h2 class="anchored" data-anchor-id="original-vs.-basenorm">Original vs.&nbsp;BaseNorm</h2>
<p>Here we plot our default image and the result from BaseNorm.</p>
<p>The differences are subtle, but track the general observations from the forums:<br>
- More detail in the backgrounds.<br>
- Better shadowing on subjects.<br>
- Some moderate clarity gains.</p>
<div id="c65358c1" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-15-guidance-expts-1/index_files/figure-html/cell-23-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="original-vs.-t-norm" class="level2">
<h2 class="anchored" data-anchor-id="original-vs.-t-norm">Original vs.&nbsp;T-Norm</h2>
<div id="5f5161ea" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-15-guidance-expts-1/index_files/figure-html/cell-24-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="original-vs.-fullnorm" class="level2">
<h2 class="anchored" data-anchor-id="original-vs.-fullnorm">Original vs.&nbsp;FullNorm</h2>
<div id="f985b295" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-15-guidance-expts-1/index_files/figure-html/cell-25-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="original-vs.-cosine" class="level2">
<h2 class="anchored" data-anchor-id="original-vs.-cosine">Original vs.&nbsp;Cosine</h2>
<div id="cdc20289" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-15-guidance-expts-1/index_files/figure-html/cell-26-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="original-vs.-basenorm-with-cosine" class="level2">
<h2 class="anchored" data-anchor-id="original-vs.-basenorm-with-cosine">Original vs.&nbsp;BaseNorm with Cosine</h2>
<div id="9acb31a5" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-11-15-guidance-expts-1/index_files/figure-html/cell-27-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>diffusion</category>
  <category>classifier-free guidance</category>
  <category>deep learning</category>
  <guid>https://enzokro.dev/blog/posts/2022-11-15-guidance-expts-1/</guid>
  <pubDate>Sun, 13 Nov 2022 05:00:00 GMT</pubDate>
  <media:content url="https://enzokro.dev/blog/posts/2022-11-15-guidance-expts-1/cat2.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Merging an arbitrary number of Binary Trees</title>
  <dc:creator>enzokro </dc:creator>
  <link>https://enzokro.dev/blog/posts/2022-11-08-merge-n-BSTs/</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>Using functional python tools to merge several Binary Trees together.</p>
</blockquote>
<section id="introduction." class="level1">
<h1>Introduction.</h1>
<p>There is a classic programming interview question that asks us to merge two Binary Trees.</p>
<p>Below is one possible setup, borrowed from the official LeetCode problem description <a href="https://leetcode.com/problems/merge-two-binary-trees/">Merge Two Binary Trees</a>:<br>
<br></p>
<blockquote class="blockquote">
<p>You are given two binary trees <code>root1</code> and <code>root2</code>.</p>
<p>Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.</p>
<p>Return the merged tree.</p>
<p><strong>Note</strong>: The merging process must start from the root nodes of both trees.</p>
</blockquote>
</section>
<section id="approaching-the-problem." class="level1">
<h1>Approaching the problem.</h1>
<p>Like many BST problems, this one is a natural fit for a recursive solution where we consider the following scenarios:</p>
<ol type="1">
<li>The base case(s): when to return and start working up the recursive stack.<br>
</li>
<li>If we are not in a base case, what specific actions must we take?<br>
</li>
<li>Then, call the function on the remaining sub-problems, usually the children of the current node.</li>
</ol>
<section id="the-intuition-to-merge-two-binary-trees." class="level2">
<h2 class="anchored" data-anchor-id="the-intuition-to-merge-two-binary-trees.">The intuition to merge two Binary Trees.</h2>
<p>The general intuition to solve this problem is:</p>
<ol type="1">
<li>Overlay the two trees together, starting from their root nodes.<br>
</li>
<li>Then, merge the values of the root nodes.<br>
</li>
<li>Finally, merge both the left and and right subtrees in the same way.</li>
</ol>
<p>What will these steps look like in code?</p>
</section>
</section>
<section id="merging-only-two-bsts" class="level1">
<h1>Merging only two BSTs</h1>
<p>We can translate the publicly available Java implementation to arrive at the following python solution:</p>
<div id="d241115d" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Solution:</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> mergeTrees(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, t1: Optional[TreeNode], t2: Optional[TreeNode]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Optional[TreeNode]:</span>
<span id="cb1-3">        </span>
<span id="cb1-4">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Base cases:</span></span>
<span id="cb1-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 1) The first tree is null, return the second tree</span></span>
<span id="cb1-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 2) The second tree is null, return the first tree</span></span>
<span id="cb1-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (t1 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb1-8">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> t2</span>
<span id="cb1-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (t2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb1-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> t1</span>
<span id="cb1-11">        </span>
<span id="cb1-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If we make it here, then there are two valid nodes we have to merge</span></span>
<span id="cb1-13">        </span>
<span id="cb1-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merge the nodes (add the value from the first into the second)</span></span>
<span id="cb1-15">        t1.val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> t2.val</span>
<span id="cb1-16">        </span>
<span id="cb1-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now merge the left and right subtrees. </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">NOTE</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: this is recursive call</span></span>
<span id="cb1-18">        t1.left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mergeTrees(t1.left, t2.left)</span>
<span id="cb1-19">        t1.right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mergeTrees(t1.right, t2.right)</span>
<span id="cb1-20">        </span>
<span id="cb1-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># At the end of the recursive stack, t1 will be the root of the valid, merged tree.</span></span>
<span id="cb1-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> t1</span></code></pre></div>
</div>
<p>If a matching, overlapping node exists in both trees, then we add their values together.</p>
<p>If a node exists in one tree but not the other, then we take the value from the existing node.</p>
<p>Once all nodes have been visited, then the trees are fully merged and we are done.</p>
</section>
<section id="merging-an-arbitrary-number-of-binary-trees" class="level1">
<h1>Merging an arbitrary number of Binary Trees</h1>
<p>It turns out that we can leverage some functional tools from python to make the solution above even more general.</p>
<p>Specifically, we will use python’s functional <code>map</code> and <code>lambda</code>, together with <code>getattr</code> and sequence expansion via <code>*</code>, to merge an arbitrary number of Binary Trees.</p>
<div id="f8053889" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Solution:</span>
<span id="cb2-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> mergeTrees(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args: Optional[List[TreeNode]]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Optional[TreeNode]:</span>
<span id="cb2-3">        </span>
<span id="cb2-4">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Base case: all trees are empty, we have nothing to merge</span></span>
<span id="cb2-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>(args): <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb2-6">        </span>
<span id="cb2-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the values of every matched overlapping node, and sum them together.</span></span>
<span id="cb2-8">        vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> n: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">getattr</span>(n, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), args)</span>
<span id="cb2-9">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TreeNode(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(vals))</span>
<span id="cb2-10">        </span>
<span id="cb2-11">        </span>
<span id="cb2-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the left child from the merged left-subtrees</span></span>
<span id="cb2-13">        node.left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mergeTrees(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> n: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">getattr</span>(n, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>), args))</span>
<span id="cb2-14">        </span>
<span id="cb2-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the right child from the merged right-subtrees</span></span>
<span id="cb2-16">        node.right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mergeTrees(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> n: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">getattr</span>(n, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>), args))</span>
<span id="cb2-17"></span>
<span id="cb2-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the new, merged tree        </span></span>
<span id="cb2-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> node</span></code></pre></div>
</div>
<p>This solution is more general at the cost of more memory: we create a new <code>TreeNode</code> instead of adding to an existing node’s value.</p>
<p>However, this still follows the problem’s constraints that we return a “new binary tree”. In our more general solution, the returned <code>node</code> at the top of the recursive stack will be the root of a new binary tree.</p>
<section id="footnotes" class="level6">
<h6 class="anchored" data-anchor-id="footnotes"><strong>Footnotes</strong></h6>
<blockquote class="blockquote">
<p>The Binary Tree image for this post is from the good folks at <a href="https://www.codiwan.com/posts/tree/merge-two-binary-trees-617">Codiwan</a>.</p>
</blockquote>


</section>
</section>

 ]]></description>
  <category>Binary Tree</category>
  <category>algorithms</category>
  <category>functional</category>
  <guid>https://enzokro.dev/blog/posts/2022-11-08-merge-n-BSTs/</guid>
  <pubDate>Tue, 08 Nov 2022 05:00:00 GMT</pubDate>
  <media:content url="https://enzokro.dev/blog/posts/2022-11-08-merge-n-BSTs/merging_bts.png" medium="image" type="image/png" height="138" width="144"/>
</item>
<item>
  <title>Complex Rayleigh Weight Initializations</title>
  <dc:creator>enzokro </dc:creator>
  <link>https://enzokro.dev/blog/posts/2022-09-01-rayleigh-init/</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>Creating complex-valued Rayleigh initializations for neural networks.</p>
</blockquote>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Most neural networks use real-valued weights instead of complex ones. Real-valued networks include NLP transformers for text, CNNs in Computer Vision for images, and feed-forward networks for audio signals like speech. At initialization, each real-valued weight only needs a single real-valued number. These networks are quite powerful and have been extremely successful in their domains, so why do we need complex-valued weights at all?</p>
<p>It turns our that many signals are better represented in the complex domain. These complex-valued signals are found in:</p>
<ul>
<li>Robotics<br>
</li>
<li>Radio Frequency communications<br>
</li>
<li>Bio-informatics<br>
</li>
<li>Radar<br>
</li>
<li>Speech</li>
</ul>
<p>That does not mean that we <em>must</em> use complex values for these signals. The crucial point is that real-valued networks are potentially throwing away half of the information in the input.</p>
<p>Moreover, the phase of complex signals contains important information. For example, the phase of an image describes the position of the photo’s subjects, while the magnitude mainly has color information. In speech, the phase of a signal is important for how understandable the recording is. In sonar, communications, radar, and robotics the phase embeds information about both the signal’s content and its location.</p>
<p>If we want to leverage the full potential of these complex input signals, we need to match them with complex-valued neural networks. The key difference for complex weights is that we now need need two values: one for phase and the other for magnitude.</p>
<p>But we cannot simply take two regular, real-valued initializations and call it a day. The rest of this post goes over the details of accurately creating proper initializations for complex-valued weights.</p>
<section id="complex-numbers-a-brief-recap" class="level2">
<h2 class="anchored" data-anchor-id="complex-numbers-a-brief-recap">Complex Numbers: A brief recap</h2>
<p><br> Complex numbers have two components:<br>
- A real part.<br>
- An imaginary part.</p>
<p>The real component is a regular number like we would find on a plain number line. The imaginary component exists along the <code>i</code> axis.</p>
<p>To keep things simple, we can think of these numbers on a two-dimensional plot. The real number is on the x-axis while the imaginary number is on the y-axis.</p>
<section id="starting-with-a-real-number" class="level3">
<h3 class="anchored" data-anchor-id="starting-with-a-real-number">Starting with a real number</h3>
<p>Plotting examples is a great way to make things concrete. We first plot a regular, real number that we are all familiar with: <img src="https://latex.codecogs.com/png.latex?x%20=%202"></p>
<div id="cell-7" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-09-01-rayleigh-init/index_files/figure-html/cell-2-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="magnitude-of-a-real-number" class="level3">
<h3 class="anchored" data-anchor-id="magnitude-of-a-real-number">Magnitude of a real number</h3>
<p>The distance from the origin to our number tells us its magnitude. With positive values this feels redundant, since the magnitude is always the number itself.</p>
<p>But what about negative numbers? That is where the absolute value, represented as <img src="https://latex.codecogs.com/png.latex?%7Cx%7C">, comes into play. If we had picked <img src="https://latex.codecogs.com/png.latex?x%20=%20-2"> instead, the magnitude would still be the same: <img src="https://latex.codecogs.com/png.latex?%7C-2%7C%20=%20%7C2%7C%20=%202">.</p>
<p>So for any real number, positive or negative, we can find its magnitude by drawing an arrow starting from the origin <img src="https://latex.codecogs.com/png.latex?0">. The absolute length of the arrow will be the number’s magnitude.</p>
<p>Why are we spelling out this aspect of numbers so much? That will become clear when we introduce the imaginary component next.</p>
</section>
<section id="adding-an-imaginary-component" class="level3">
<h3 class="anchored" data-anchor-id="adding-an-imaginary-component">Adding an imaginary component</h3>
<p>We will keep our real component the same: <img src="https://latex.codecogs.com/png.latex?x%20=%202">.</p>
<p>But now, let’s an imaginary component: <img src="https://latex.codecogs.com/png.latex?y%20=%203">, to turn it into a complex number.</p>
<p>What does this new complex number look like? We can visualize it on a 2D plot:</p>
<div id="cell-12" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-09-01-rayleigh-init/index_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We combined these two components to get a complex number! Let’s call this number <img src="https://latex.codecogs.com/png.latex?z">.</p>
<p><img src="https://latex.codecogs.com/png.latex?z"> will be defined as: <img src="https://latex.codecogs.com/png.latex?z%20=%20x%20+%20iy"></p>
<p>The “<img src="https://latex.codecogs.com/png.latex?i">” next to a number means that it is the imaginary component.</p>
</section>
<section id="magnitude-of-a-complex-number" class="level3">
<h3 class="anchored" data-anchor-id="magnitude-of-a-complex-number">Magnitude of a complex number</h3>
<p>While we could use the real and imaginary components, there is another representation of complex numbers that will be more useful to us. This other representation is the <em>magnitude</em> and <em>phase</em> of a complex number.</p>
<p>Remember how for a real number, its magnitude was the length of an arrow starting from the origin? The same idea applies to complex numbers. With one new detail: we have two components now, so our arrow’s length will be different.<br>
Let’s first draw our new complex number as an arrow.</p>
<div id="cell-17" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-09-01-rayleigh-init/index_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The formula to compute the magnitude of a complex number <img src="https://latex.codecogs.com/png.latex?z"> is:<br>
<img src="https://latex.codecogs.com/png.latex?%7Cz%7C%20=%20%5Csqrt%7Bx%5E%7B2%7D%20+%20y%5E%7B2%7D%7D"></p>
<p>Plugging in our <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y"> values gives our complex <img src="https://latex.codecogs.com/png.latex?z"> a magnitude of:</p>
<p><img src="https://latex.codecogs.com/png.latex?%7Cz%7C%20=%20%5Csqrt%7B2%5E%7B2%7D%20+%203%5E%7B2%7D%7D%20=%20%5Csqrt%7B4%20+%209%7D%20=%20%5Csqrt%7B13%7D"></p>
<p>While knowing the magnitude is important, it is not enough to fully describe <img src="https://latex.codecogs.com/png.latex?z">. For example what if instead of <img src="https://latex.codecogs.com/png.latex?(x%20=%202,%20y%20=%203)"> we had swapped them around as <img src="https://latex.codecogs.com/png.latex?(x%20=%203,%20y%20=%202)">. If we plug these values into the magnitude equation we get back the exact same number <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7B13%7D">.</p>
<p>But looking at our 2D plots, these swapped points would obviously be in different locations. So if we were given only the magnitude, how could we tell that it came from our true, original <img src="https://latex.codecogs.com/png.latex?z">?</p>
</section>
<section id="phase-telling-complex-magnitudes-apart-from-each-other" class="level3">
<h3 class="anchored" data-anchor-id="phase-telling-complex-magnitudes-apart-from-each-other">Phase: telling complex magnitudes apart from each other</h3>
<p>The way to tell two complex numbers with the same magnitude apart lies in the fact that the arrows are no longer flat along the x-axis.</p>
<p>Instead they are now elevated (“pulled up”) by the imaginary component <img src="https://latex.codecogs.com/png.latex?y%20=%203">. The complex number now has an <em>angle</em> respective to the x-axis.</p>
<p>This angle, together with a magnitude, is enough to perfectly describe our complex <img src="https://latex.codecogs.com/png.latex?z">. In other words: we know both how long to make the vector and where to point it.</p>
<p>Let’s complete the picture by including the angle of <img src="https://latex.codecogs.com/png.latex?z">:</p>
<div id="cell-23" class="cell">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-09-01-rayleigh-init/index_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We use <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> to represent the angle. The formula to compute <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> is:<br>
<img src="https://latex.codecogs.com/png.latex?%5Ctheta%20=%20%5Carctan%7B%5Cfrac%7By%7D%7Bx%7D%7D"></p>
<p>Plugging in <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y"> for our complex number <img src="https://latex.codecogs.com/png.latex?z"> gives us an angle of:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Ctheta%20=%20%5Carctan%7B%5Cfrac%7B3%7D%7B2%7D%7D%20=%2056.31%20%5E%5Ccirc"></p>
<p>With the phase and magnitude, we now have a unique way of representing our complex number <img src="https://latex.codecogs.com/png.latex?z">.</p>
</section>
</section>
<section id="recap-complex-numbers" class="level2">
<h2 class="anchored" data-anchor-id="recap-complex-numbers">Recap: Complex Numbers</h2>
<p>In this section, we gave a brief overview of complex numbers and their representation. To make things concrete, we picked a complex number <img src="https://latex.codecogs.com/png.latex?z"> with a real component <img src="https://latex.codecogs.com/png.latex?x%20=%202"> and an imaginary component <img src="https://latex.codecogs.com/png.latex?y%20=%203">.</p>
<p>Then, we showed that we can perfectly represent this complex number <img src="https://latex.codecogs.com/png.latex?z"> with two pieces of information: its <em>magnitude</em> and its <em>phase</em>.</p>
<ul>
<li><strong>Magnitude</strong>: the length of a vector.<br>
</li>
<li><strong>Phase</strong>: the angle, or direction, where a vector is pointing.</li>
</ul>
</section>
</section>
<section id="distributions-for-complex-initializations." class="level1">
<h1>Distributions for complex initializations.</h1>
<p>Now that we know what complex numbers are, how do we pick them to make sure they are good initial weight values?</p>
<section id="background-on-neural-network-initializations" class="level2">
<h2 class="anchored" data-anchor-id="background-on-neural-network-initializations">Background on neural network initializations</h2>
<p>While initializations are now taken for granted, they were part of the first key pieces that made it possible to train deep neural networks. Before we knew how to properly initialize networks, training was very unstable as the gradients would either diverge or collapse to 0. This is known as gradient explosion or vanishing, respectively.</p>
<p>The main insights to prevent gradients from vanishing or exploding came from analyzing their variance during training.<br>
&gt; <strong>Aside</strong>: this is still an important error analysis tool! Looking at the behavior and distribution of gradients is a surefire way to catch problems with the training. Especially during the earliest optimizer steps.</p>
<section id="achieving-smooth-gradient-flows" class="level3">
<h3 class="anchored" data-anchor-id="achieving-smooth-gradient-flows">Achieving smooth gradient flows</h3>
<p>It was the seminal work by <a href="https://arxiv.org/pdf/1502.01852.pdf">He</a> and <a href="http://proceedings.mlr.press/v9/glorot10a/glorot10a.pdf">Glorot, Bengio</a> that showed how to control the variance of gradients to make sure that training was successful. They found that the variance of the sampling distributions, either Normal or Uniform, must meet certain criteria for the gradients to flow “smoothly”.</p>
<p>Here, “smoothly” means that the gradients neither disappear nor explode during training.</p>
<p>The initializations derived in these papers are now the defaults in popular deep learning libraries like TensorFlow and pytorch.</p>
<p>Unfortunately, the theory of complex-valued neural networks is not as well established. How can we know what are good variances and distributions for complex weights?</p>
<p>It turns out we can borrow these hard-earned lessons about good real-valued initializations to make sure that our complex gradients flow smoothly.</p>
</section>
</section>
<section id="initializing-complex-magnitudes" class="level2">
<h2 class="anchored" data-anchor-id="initializing-complex-magnitudes">Initializing complex magnitudes</h2>
<p>Instead of drawing from a Normal or Uniform distribution, like we do for real-valued networks, the magnitudes will instead be drawn from a <strong><a href="https://en.wikipedia.org/wiki/Rayleigh_distribution%5D">Rayleigh distribution</a></strong>. The reasons for this are described below. We can think of a Rayleigh distribution as the complex version of the familiar Normal distribution we use for real-valued weights.</p>
</section>
<section id="initializing-phases" class="level2">
<h2 class="anchored" data-anchor-id="initializing-phases">Initializing phases</h2>
<p>The phases will be drawn from a Uniform distribution. To see why, think about a compass with 360 degrees to choose from.</p>
<p>We could randomly pick a degree and start walking in that direction for a given amount of time. Assuming we are on a flat surface, each degree choice will place us in a different, unique location.</p>
<p>Because we don’t know which direction our learned complex weights should point in, the best we can do is to start by randomly pointing everywhere and letting the gradients steer the vectors instead.</p>
</section>
</section>
<section id="history-of-complex-networks" class="level1">
<h1>History of Complex Networks</h1>
<p>Despite the fact that they are not as popular as real-valued approaches, complex networks have a rich and long history. See Chapter 3 of this thesis on <a href="https://digitalcommons.dartmouth.edu/dissertations/55/">Complex Networks for Audio</a> by Andy M. Sarroff for a great historical recap.</p>
<p>The first modern, complete work on complex neural nets was <a href="https://arxiv.org/pdf/1705.09792.pdf">Deep Complex Networks</a> by Trabelsi et. al.&nbsp;This paper explored many fundamental building blocks for deep complex networks. It developed complex versions of initializations, convolutions, activations, and batch normalizations. It then stacked these blocks together to build complex versions of popular networks like ResNets.</p>
<p>Despite this fantastic work the field remained somewhat quiet. But! There has been a recent activity spike in exciting fields like medical imaging, radio frequency signal processing, optical networks, and even quantum networks!</p>
<p>Some of these newer applications and advances are described in this comprehensive <a href="https://arxiv.org/pdf/2101.12249.pdf">Survey of Complex-Valued Neural Networks</a> by Bassey at. al.&nbsp;</p>
<p>Now that we know a bit more about Complex Networks, we are finally ready to initialize their weights. Let’s start by looking at the Rayleigh distribution to learn more about our complex magnitudes.</p>
</section>
<section id="the-rayleigh-distribution" class="level1">
<h1>The Rayleigh Distribution</h1>
<p>A Rayleigh distribution happens when two random variables are added together. In order to be Rayleigh distributed, the random variables must be uncorrelated, normally distributed, have zero mean, and share the same standard deviation. Let’s make this more concrete with a few examples.</p>
<p>First, imagine setting up a sensor that measures wind speed out in an open field. If we analyzed the wind speed through this sensor in two directions, say North and East, then the magnitude of the wind’s velocity will follow a Rayleigh distribution.</p>
<p>For another example, imagine tuning your car radio and accidentally ending up at an empty station. Only the familiar crackle of static is audible. This static means that the radio spectrum is empty and all we hear is noise. If we recorded the real and imaginary components of this noise, its magnitude would follow a Rayleigh distribution. In other words, pure RF noise follows a Rayleigh distribution.</p>
<section id="why-rayleigh" class="level2">
<h2 class="anchored" data-anchor-id="why-rayleigh">Why Rayleigh?</h2>
<p>Why do we choose the Rayleigh distribution? The reason is that, without having more information about what our complex magnitudes <em>should</em> be, it is the best, unbiased starting point for the network.</p>
<p>In other words, we pick the maximum entropy distribution to avoid a-priori biasing our network toward any particular outcome. One of the successes of Deep Learning has been that it’s best to let the learning procedure figure out the values on its own in its higher dimensional activation feature space.</p>
<p>This is the complex-valued version of the same logic for using Normal or Uniform distribution to initialize real-valued networks.</p>
</section>
<section id="details-of-the-rayleigh-distribution" class="level2">
<h2 class="anchored" data-anchor-id="details-of-the-rayleigh-distribution">Details of the Rayleigh distribution</h2>
<p>Let’s dive into the details. The equation below is the Probability Density Function (PDF) of the Rayleigh distribution.</p>
<p><img src="https://latex.codecogs.com/png.latex?f(x,%5Csigma)%20=%20%5Cfrac%7Bx%7D%7B%5Csigma%5E2%7De%5E%7B-x%5E2/(2%5Csigma%5E2)%7D,%20%5C%20%5C%20x%20%5Cgeq%200"></p>
<p>This equation is a bit intimidating in written form. Let’s instead code it up as a python function with NumPy to make it cleaner.</p>
<div id="cell-39" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start by importing the libraries we need</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> numpy.random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> default_rng</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb1-7">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ignore"</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define the Rayleigh PDF</span></span>
<span id="cb1-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> rayleigh_pdf(x, sigma):</span>
<span id="cb1-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Evaluates the Rayleigh PDF at a given point `x`."</span></span>
<span id="cb1-12">    p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># see if you can match this code to the equation above</span></span>
<span id="cb1-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> p</span></code></pre></div>
</div>
<p>The parameter sigma <img src="https://latex.codecogs.com/png.latex?(%5Csigma)"> is known as the distribution’s scale. It is commonly found in many probability distributions and often controls how spread out or narrow a distribution is.</p>
<p>Let us start by setting <img src="https://latex.codecogs.com/png.latex?%5Csigma%20=%201"> to draw the “basic” Rayleigh shape. We will then change sigma to see how this affects the distribution’s shape.</p>
<div id="cell-42" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start with sigma of one as the base case</span></span>
<span id="cb2-2">sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate the Rayleigh PDF on 100 equally spaced points between 0 and 5</span></span>
<span id="cb2-5">points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb2-6">ray_pdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rayleigh_pdf(points, sigma)  </span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># setup the plot</span></span>
<span id="cb2-9">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), dpi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb2-10">ax.set_xticklabels([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ax.get_xticklabels()))))</span>
<span id="cb2-11">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sample Value'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-large'</span>)</span>
<span id="cb2-12">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Probability Density'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-large'</span>)</span>
<span id="cb2-13">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rayleigh PDF'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xx-large'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot the Rayleigh pdf</span></span>
<span id="cb2-16">ax.plot(ray_pdf)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-09-01-rayleigh-init/index_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>As we mentioned the scale <img src="https://latex.codecogs.com/png.latex?%5Csigma"> controls the width or narrowness of the distribution.<br>
Let’s both halve and double sigma to (<img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B2%7D,%20%7B2%7D)"> respectively to see what happens.</p>
<div id="cell-44" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># setup plot</span></span>
<span id="cb3-2">fig,ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), dpi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb3-3">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sample Value'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-large'</span>)</span>
<span id="cb3-4">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Probability Density'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-large'</span>)</span>
<span id="cb3-5">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rayleigh PDFs'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xx-large'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> </span>
<span id="cb3-6"></span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># different colors for each sigma</span></span>
<span id="cb3-9">sigmas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb3-10">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'m'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>]</span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot the distributions with different scales</span></span>
<span id="cb3-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color,sig <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(colors,sigmas):</span>
<span id="cb3-14">    rpdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rayleigh_pdf(points, sig)</span>
<span id="cb3-15">    ax.plot(points, rpdf, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'σ: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sig<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb3-16">ax.set_xticklabels([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ax.get_xticklabels()))))</span>
<span id="cb3-17">ax.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-09-01-rayleigh-init/index_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The blue line in the plot above is the same PDF from our first plot where <img src="https://latex.codecogs.com/png.latex?%5Csigma%20=%201">.</p>
<p>We can see how <img src="https://latex.codecogs.com/png.latex?(%5Csigma%20=%200.5)"> pulls the distribution up and to the left, while <img src="https://latex.codecogs.com/png.latex?(%5Csigma%20=%202)"> squishes it down and to the right.</p>
<p>In other words, a smaller sigma makes our distribution narrower while a larger sigma makes it wider.</p>
<p>Plotting the theoretical Rayleigh PDF only shows what the distribution <em>should</em> looks like. Next, we need to actually generate some Rayleigh values.</p>
</section>
</section>
<section id="generating-rayleigh-samples" class="level1">
<h1>Generating Rayleigh samples</h1>
<p>We use the <a href="https://numpy.org/doc/stable/reference/random/generator.html">default_rng</a> class in numpy to draw Rayleigh samples. <code>default_rng</code> is a helpful class that can sample from just about every known distribution.</p>
<p>First we create the <code>default_rng</code> class with an arbitrary seed of <img src="https://latex.codecogs.com/png.latex?0">.</p>
<div id="cell-50" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-2">rand <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> default_rng(seed)</span></code></pre></div>
</div>
<p>This <code>default_rng</code> instance can now sample directly from a Rayleigh distribution. We can use the sampling function <code>default_rng.rayleigh</code> which accepts two parameters:<br>
- <code>scale</code>: <img src="https://latex.codecogs.com/png.latex?%5Csigma"> with a default value of 1.<br>
- <code>size</code>: the shape of the output array</p>
<p>Let’s start by drawing 1,000 Rayleigh samples with <img src="https://latex.codecogs.com/png.latex?%5Csigma%20=%201">.</p>
<div id="cell-53" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-2">shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># one dimensional vector with 1000 samples</span></span>
<span id="cb5-4">ray_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand.rayleigh(scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>shape)</span></code></pre></div>
</div>
<p>How can we check check if these samples are actually Rayleigh distributed? We can compare these values to the plots of the theoretical Rayleigh PDF from the previous section.</p>
<p>The easiest way to compare the samples is with a histogram.</p>
<div id="cell-55" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># setup the histogram plot for our drawn samples</span></span>
<span id="cb6-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), dpi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb6-3">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sample Value'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-large'</span>)</span>
<span id="cb6-4">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Counts'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-large'</span>)</span>
<span id="cb6-5">plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Histogram of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Rayleigh samples'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xx-large'</span>)</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot the histogram of 1000 Rayleigh samples</span></span>
<span id="cb6-8">plt.hist(ray_vals, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-09-01-rayleigh-init/index_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>This is an ok start. If we squint, we can almost see the Rayleigh PDF shape we plotted earlier. But <img src="https://latex.codecogs.com/png.latex?1,000"> is a small number of samples.</p>
<p>As we draw more samples, the distribution should grow closer and closer to the theoretical PDF plots. Let’s make sure this happens by now drawing <img src="https://latex.codecogs.com/png.latex?10,000"> samples.</p>
<div id="cell-57" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># setup the new plot with more samples</span></span>
<span id="cb7-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), dpi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb7-3">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sample Value'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-large'</span>)</span>
<span id="cb7-4">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Counts'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-large'</span>)</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot even more Rayleigh samples</span></span>
<span id="cb7-7">large_shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span></span>
<span id="cb7-8">plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Histogram of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>large_shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Rayleigh samples'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xx-large'</span>)</span>
<span id="cb7-9">many_ray_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand.rayleigh(scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>large_shape)</span>
<span id="cb7-10">plt.hist(many_ray_vals, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-09-01-rayleigh-init/index_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>This looks much better! Now we can compare this histogram to the theoretical Rayleigh PDF.</p>
<blockquote class="blockquote">
<p>Note that we pass <code>density=True</code> to the histogram function to normalize it and make it an approximate PDF.</p>
</blockquote>
<div id="cell-59" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># setup the plot again</span></span>
<span id="cb8-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), dpi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb8-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sampled vs. Theoretical Rayleigh PDFs'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-large'</span>)</span>
<span id="cb8-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sample Value'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-large'</span>)</span>
<span id="cb8-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Probability Density'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-large'</span>)</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compare the sample and theoretical PDFs of the Rayleigh distribution</span></span>
<span id="cb8-8">plt.hist(many_ray_vals, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># makes the histogram sum to one to mimic a pdf</span></span>
<span id="cb8-9">plt.plot(points, ray_pdf, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'theoretical rayleigh pdf'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb8-10">plt.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-09-01-rayleigh-init/index_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>A near perfect match! Now we can successfully generate our initial complex Rayleigh magnitudes.</p>
<p>We are ready to move on to the phase.</p>
</section>
<section id="sampling-phase-initializations" class="level1">
<h1>Sampling phase initializations</h1>
<p>The Rayleigh values from the previous section tell us the magnitude, or length, of our complex weights. But that is only one part of a complex number. We are still missing the angle, or phase, that these complex numbers are pointing in.</p>
<p>For the phase, is enough to use random, uniform angles. Why can we do this here, when we went to such care to get the correct magnitude values?</p>
<p>It turns out that many processes such as speech, medical images, and radio modulations encode information in the signal’s phase. But we don’t know what this phase should look like beforehand. And we don’t want to bias the networks to any particular phase orientation.</p>
<p>Instead, by uniformly picking random starting phases it is like we are pointing in every direction, roughly equally. Tying it back to our compass example from earlier. It’s as if we told each weight to random pick a degree and start walking in that direction.</p>
<p>Then, during training, the network will learn how to best orient the weights for its given task.</p>
<p>Sampling this random uniform phase is straightforward. We pick uniform samples from <img src="https://latex.codecogs.com/png.latex?-%5Cpi"> to <img src="https://latex.codecogs.com/png.latex?%5Cpi"> radians which maps to a full loop of the unit circle. Even better, we can also reuse the same <code>default_rng</code> from before!</p>
<div id="cell-63" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pick random directions along the unit circle</span></span>
<span id="cb9-2">phase <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand.uniform(low<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span>np.pi, high<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.pi, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ray_vals.shape)</span></code></pre></div>
</div>
<section id="magnitude-phase-vs.-real-imaginary" class="level2">
<h2 class="anchored" data-anchor-id="magnitude-phase-vs.-real-imaginary">(Magnitude, Phase) vs.&nbsp;(Real, Imaginary)</h2>
<p>We mentioned earlier that a complex number has real and imaginary components. But so far we have deal with magnitudes and phases instead. How are these quantities related?</p>
<p>It turns out that we can use the phase and magnitude to split our vector into its real and imaginary parts. The cosine of the phase and magnitude gives us the real part, and the sine of the phase gives us the imaginary part.</p>
<p>These are two different representations of the same complex number. We do not lose anything going from one to the other or vice-versa.</p>
<div id="cell-66" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># splitting our phases and magnitues into real and imaginary components</span></span>
<span id="cb10-2">real <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ray_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.cos(phase)</span>
<span id="cb10-3">imag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ray_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sin(phase)</span></code></pre></div>
</div>
<p>It turns out this will be a key detail when we are creating complex-valued network layers. As a preview: we will give one set of weights the <code>real</code> values, and another set of weights the <code>imag</code> values. This is because complex operations like addition and multiplication work better on GPUs with real and imaginary representations.</p>
</section>
<section id="visualizing-our-random-phases" class="level2">
<h2 class="anchored" data-anchor-id="visualizing-our-random-phases">Visualizing our random phases</h2>
<p>Now we can check if these phases are truly orienting our magnitudes in random directions. To do so we plot the first 500 complex weights in the polar plane.</p>
<div id="cell-70" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># indexes for the first 500 random weights</span></span>
<span id="cb11-3">chosen_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>) </span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot these first complex weights</span></span>
<span id="cb11-6">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), dpi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb11-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idx <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> chosen_samples:</span>
<span id="cb11-8"></span>
<span id="cb11-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># index into phase and magnitude variables</span></span>
<span id="cb11-10">    angle,mag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> phase[idx],ray_vals[idx]</span>
<span id="cb11-11"></span>
<span id="cb11-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot them starting from the origin</span></span>
<span id="cb11-13">    plt.polar([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,angle], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,mag], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>)</span>
<span id="cb11-14">    </span>
<span id="cb11-15">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Magnitudes and Phases of our Complex Weights'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-09-01-rayleigh-init/index_files/figure-html/cell-16-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>That definitely looks like a random, uniform orientation!</p>
</section>
</section>
<section id="recapping-phase-and-magnitude-so-far" class="level1">
<h1>Recapping Phase and Magnitude so far</h1>
<p>To recap we now have:<br>
- Magnitude initializations drawn from a Rayleigh distribution.<br>
- Phase initializations drawn from a Uniform distribution.</p>
<p>Putting these together, we have complex-valued numbers pointing roughly in all directions.</p>
<p>We are almost there. There is one more important detail to work out: the variance of our complex weights.</p>
</section>
<section id="matching-he-and-glorot-variance-criteria" class="level1">
<h1>Matching He and Glorot variance criteria</h1>
<p>Even though we now have random complex weights, they are not yet good initializations. The polar plot above gives some clues as to why.<br>
&gt; hint: look at the range of the vector’s magnitudes.</p>
<p>Remember from the background section on initializations: the key insight was that the variance of the distributions need to follow certain criteria. This variance criteria makes sure that the gradients flow well during backpropagation.</p>
<p>To be more specific, both the He and Glorot criteria are based on the incoming and outgoing connections of a network layer. This number of connections is typically called <code>fanIn</code> and <code>fanOut</code>, respectively.</p>
<p>The He criteria says that the variance of weights <img src="https://latex.codecogs.com/png.latex?W"> should be: <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BVar%7D(W)%20=%20%5Cfrac%7B2%7D%7B%5Ctext%7BfanIn%7D%7D"></p>
<p>The Glorot criteria says that the variance should be: <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BVar%7D(W)%20=%20%5Cfrac%7B2%7D%7B%5Ctext%7BfanIn%20+%20fanOut%7D%7D"></p>
<p>Deep Neural Networks can easily have thousands or even millions of connections. Looking at the criteria equations above, that means that we need very small variances since <code>fanIn</code> and <code>fanOut</code> will be large.</p>
<p>Now we can see why our weights so far, shown in the earlier polar plot, are not good: their variance is clearly too large!</p>
<section id="he-and-glorot-criteria-for-rayleigh-distributions" class="level2">
<h2 class="anchored" data-anchor-id="he-and-glorot-criteria-for-rayleigh-distributions">He and Glorot criteria for Rayleigh distributions</h2>
<p>How can we make sure our Rayleigh magnitudes meet the He and Glorot variance criteria?<br>
The <a href="https://arxiv.org/pdf/1705.09792.pdf">Complex Neural Nets paper</a> from earlier includes a nice derivation for the variance of a complex Rayleigh distribution: <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BVar%7D(W)%20=%202%5Csigma%5E%7B2%7D"></p>
<p>We can set the Rayleigh variance equal to the He and Glorot criteria and solve for sigma <img src="https://latex.codecogs.com/png.latex?%5Csigma">.</p>
<p>To meet the He criteria, sigma should be: <img src="https://latex.codecogs.com/png.latex?%5Csigma_%7B%5Ctext%7BHe%7D%7D%20=%20%5Cfrac%7B1%7D%7B%5Csqrt%7B%5Ctext%7BfanIn%7D%7D%7D"> <br></p>
<p>To meet the Glorot criteria, sigma should be: <img src="https://latex.codecogs.com/png.latex?%5Csigma_%7B%5Ctext%7BGlorot%7D%7D%20=%20%5Cfrac%7B1%7D%7B%5Csqrt%7B%5Ctext%7BfanIn%20+%20fanOut%7D%7D%7D"> <br></p>
<section id="starting-with-a-simple-one-layer-network" class="level3">
<h3 class="anchored" data-anchor-id="starting-with-a-simple-one-layer-network">Starting with a simple one-layer network</h3>
<p>In the previous sections we used a flat vector of complex weights for the examples and plots. Tying it back at our two concrete examples of wind speed and radio noise, it’s as if we took a single series of measurements.</p>
<p>But since the He and Glorot criteria are defined for network layers, we need a new example. Let’s start with to a simple one-layer network. Our layer will have 100 inputs and 50 outputs (<code>fanIn</code> = 100, <code>fanOut</code> = 50).</p>
<p>Plugging these <code>fanIn</code> and <code>fanOut</code> values into the Rayleigh sigma criteria gives: <img src="https://latex.codecogs.com/png.latex?%5Csigma_%7B%5Ctext%7BHe%7D%7D%20=%20%5Cfrac%7B1%7D%7B10%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Csigma_%7B%5Ctext%7BGlorot%7D%7D%20=%20%5Cfrac%7B1%7D%7B5%5Csqrt%7B6%7D%7D"></p>
<p>Now we can pass either of these sigmas to our <code>default_rng</code> and it will draw Rayleigh samples with variances that match the chosen criteria.</p>
<blockquote class="blockquote">
<p>A quick word about <code>fanIn</code> and <code>fanOut</code>. We saw the simple feed-forward case with in our example for a single network layer. In that case the number of incoming connections was simply <code>fanIn</code> and the outgoing connections were <code>fanOut</code>.</p>
</blockquote>
<blockquote class="blockquote">
<p>However, the convolutional case is a bit more complicated. A convolutional layer has input and output feature maps which are roughly analogous to input and output units in feed-forward layers. But they also have a kernel size to consider. PyTorch has a nice <a href="https://pytorch.org/docs/stable/_modules/torch/nn/init.html#_calculate_fan_in_and_fan_out">convenience function</a> that handles this for us.</p>
</blockquote>
</section>
</section>
</section>
<section id="putting-it-all-together-a-complex-valued-pytorch-initializer" class="level1">
<h1>Putting it all together: A complex-valued PyTorch initializer</h1>
<p>Here is a recap of the previous sections: 1. We first saw a brief overview of complex numbers.<br>
2. We learned about the history of good initializations and Complex Networks.<br>
3. We analyzed the theoretical Rayleigh distribution.<br>
1. We drew some Rayleigh magnitudes to learn more about the distribution.<br>
2. We picked a random uniform phase, and saw how this orients our vectors in all directions.<br>
3. We matched our Rayleigh samples to the He and Glorot variance criteria for a single network layer.</p>
<p>To get usable initializations, we need a function that glues the important pieces together: - Draw random phase samples.<br>
- Draw Rayleigh magnitude samples.<br>
- Match the He or Glorot variance criteria.<br>
- Are PyTorch tensors with the correct shape for a given network layer.</p>
<p>We can refactor the earlier code into a function that does just this.</p>
<div id="cell-94" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_complex_inits(module, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, criterion<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'he'</span>, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'float32'</span>):</span>
<span id="cb12-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Initializes complex-valued Rayleigh weights as PyTorch tensors.</span></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb12-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># random number generator</span></span>
<span id="cb12-6">    rand <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> default_rng(seed <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> seed <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> torch.initial_seed())</span>
<span id="cb12-7">    </span>
<span id="cb12-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get shape of the weights</span></span>
<span id="cb12-9">    weight_shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> module.weight.size()</span>
<span id="cb12-10">    </span>
<span id="cb12-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># find the number of input and output connection</span></span>
<span id="cb12-12">    fan_in, fan_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.init._calculate_fan_in_and_fan_out(module.weight)</span>
<span id="cb12-13">    </span>
<span id="cb12-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute the Rayleigh sigma that meets the chosen variance criteria</span></span>
<span id="cb12-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> criterion <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'he'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'glorot'</span>)</span>
<span id="cb12-16">    factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fan_in <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'he'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> fan_in <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> fan_out</span>
<span id="cb12-17">    sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.sqrt(factor)</span>
<span id="cb12-18">    </span>
<span id="cb12-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># draw the scaled rayleigh magnitudes</span></span>
<span id="cb12-20">    magnitude <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand.rayleigh(scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>weight_shape)</span>
<span id="cb12-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># draw uniform angle samples</span></span>
<span id="cb12-22">    phase <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand.uniform(low<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span>np.pi, high<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.pi, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>magnitude.shape)</span>
<span id="cb12-23">    </span>
<span id="cb12-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split magnitudes into real and imaginary components</span></span>
<span id="cb12-25">    real <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (magnitude <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.cos(phase)).astype(dtype)</span>
<span id="cb12-26">    imag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (magnitude <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sin(phase)).astype(dtype)</span>
<span id="cb12-27">    </span>
<span id="cb12-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># turn into float tensors and return</span></span>
<span id="cb12-29">    real,imag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(torch.from_numpy, [real,imag])</span>
<span id="cb12-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> real,imag</span>
<span id="cb12-31">    </span></code></pre></div>
</div>
<p>Let’s use this function to get complex weight initializations for a Linear and Convolutional module.</p>
<section id="complex-initializations-for-nn.linear" class="level2">
<h2 class="anchored" data-anchor-id="complex-initializations-for-nn.linear">Complex initializations for <code>nn.Linear</code></h2>
<div id="cell-97" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># re-create out earlier example with a single layer</span></span>
<span id="cb13-2">fan_in, fan_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb13-3">sigma_he <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.sqrt(fan_in) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to match the He criteria</span></span>
<span id="cb13-4"></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the complex-valued weights</span></span>
<span id="cb13-6">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.Linear(fan_in, fan_out)</span>
<span id="cb13-7">real, imag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_complex_inits(m)</span></code></pre></div>
</div>
<p>We should check that the magnitude of the weights actually follow a Rayleigh distribution.</p>
<div id="cell-99" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get linear magnitudes as a flat numpy vector</span></span>
<span id="cb14-2">magnitude <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.sqrt(real<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> imag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).numpy().reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div id="cell-100" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># setup the plot</span></span>
<span id="cb15-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), dpi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb15-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Complex nn.Linear Weights vs. Theoretical Rayleigh PDF'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-large'</span>)</span>
<span id="cb15-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sample Value'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-large'</span>)</span>
<span id="cb15-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Probability Density'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-large'</span>)</span>
<span id="cb15-6"></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pick points that cover the sample range to compare with theoretical rayleigh pdf</span></span>
<span id="cb15-8">points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, magnitude.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb15-9">ray_pdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rayleigh_pdf(points, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma_he)</span>
<span id="cb15-10"></span>
<span id="cb15-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot histogram of Linear magnitudes vs. the theoretical pdf</span></span>
<span id="cb15-12">plt.hist(magnitude, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb15-13">plt.plot(points, ray_pdf, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-09-01-rayleigh-init/index_files/figure-html/cell-20-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Success! Our Linear module is properly initialized.</p>
</section>
<section id="complex-initializations-for-nn.conv2d" class="level2">
<h2 class="anchored" data-anchor-id="complex-initializations-for-nn.conv2d">Complex initializations for <code>nn.Conv2d</code></h2>
<p>Can we do the same for a convolutional layer? Our main concern is correctly handling both the tensor shape and <code>fan_in</code>, <code>fan_out</code>.</p>
<div id="cell-104" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make conv layer with 100 input features, 50 output features, and (3x3) kernel</span></span>
<span id="cb16-2">k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># kernel size</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now, these are the number of feature maps (chan_in and chan_out)</span></span>
<span id="cb16-4">fan_in, fan_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb16-5"></span>
<span id="cb16-6">conv_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.Conv2d(fan_in, fan_out, k)</span>
<span id="cb16-7">real_conv, imag_conv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_complex_inits(conv_layer) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the initial complex weights</span></span>
<span id="cb16-8"></span>
<span id="cb16-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make sure the shape of weights is ok</span></span>
<span id="cb16-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Shapes of real and imaginary convolutional tensors: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>real_conv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>imag_conv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Shapes of real and imaginary convolutional tensors: torch.Size([50, 100, 3, 3]), torch.Size([50, 100, 3, 3])</code></pre>
</div>
</div>
<p>Let’s check if these convolutional weights are still Rayleigh distributed.</p>
<div id="cell-106" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get convolutional magnitudes as a flat numpy vector</span></span>
<span id="cb18-2">conv_magnitude <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.sqrt(real_conv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> imag_conv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).numpy().reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div id="cell-107" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># setup the plots</span></span>
<span id="cb19-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), dpi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb19-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Complex nn.Conv2d Weights vs. Theoretical Rayleigh PDF'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-large'</span>)</span>
<span id="cb19-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sample Value'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-large'</span>)</span>
<span id="cb19-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Probability Density'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x-large'</span>)</span>
<span id="cb19-6"></span>
<span id="cb19-7"></span>
<span id="cb19-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pick points that cover sample range to compare with theoretical rayleigh pdf</span></span>
<span id="cb19-9">points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, conv_magnitude.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb19-10"></span>
<span id="cb19-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># note: we need to re-compute fanIn for the convolutional layer</span></span>
<span id="cb19-12">fan_in, fan_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.init._calculate_fan_in_and_fan_out(conv_layer.weight)</span>
<span id="cb19-13">sigma_he_conv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.sqrt(fan_in)</span>
<span id="cb19-14"></span>
<span id="cb19-15">ray_pdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rayleigh_pdf(points, sigma_he_conv)</span>
<span id="cb19-16"></span>
<span id="cb19-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot histogram of magnitudes vs. theoretical pdf</span></span>
<span id="cb19-18">plt.hist(conv_magnitude, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb19-19">plt.plot(points, ray_pdf, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://enzokro.dev/blog/posts/2022-09-01-rayleigh-init/index_files/figure-html/cell-23-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Another match! Our convolutional layer is also properly initialized.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this post we created Rayleigh initializations for complex-valued neural networks.</p>
<p>We started with an overview of complex numbers and weight initializations. Next we moved on to the history of Complex Networks and the Rayleigh distribution.</p>
<p>Then we used the Rayleigh distribution to sample the magnitudes of complex-valued weights. We then added uniform phase information to randomly orient the vectors. After that, we made sure that the variance of our complex weights made them good initial values.</p>
<p>Finally, we put all everything together into a python function that return complex initialization tensors. This initialization function will be the first building block of complex-valued neural networks.</p>


</section>

 ]]></description>
  <category>deep learning</category>
  <category>complex networks</category>
  <guid>https://enzokro.dev/blog/posts/2022-09-01-rayleigh-init/</guid>
  <pubDate>Thu, 01 Sep 2022 04:00:00 GMT</pubDate>
  <media:content url="https://enzokro.dev/blog/posts/2022-09-01-rayleigh-init/polar_plot.png" medium="image" type="image/png" height="141" width="144"/>
</item>
</channel>
</rss>
